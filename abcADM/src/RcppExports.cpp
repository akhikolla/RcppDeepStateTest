// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MCMC_ABC
List MCMC_ABC(const int numSamples, const int numBurning, const int numThining, const double delta, const double k_val, const NumericVector wVec, const NumericVector censorVec, const List inputData);
RcppExport SEXP _abcADM_MCMC_ABC(SEXP numSamplesSEXP, SEXP numBurningSEXP, SEXP numThiningSEXP, SEXP deltaSEXP, SEXP k_valSEXP, SEXP wVecSEXP, SEXP censorVecSEXP, SEXP inputDataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type numSamples(numSamplesSEXP);
    Rcpp::traits::input_parameter< const int >::type numBurning(numBurningSEXP);
    Rcpp::traits::input_parameter< const int >::type numThining(numThiningSEXP);
    Rcpp::traits::input_parameter< const double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double >::type k_val(k_valSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type censorVec(censorVecSEXP);
    Rcpp::traits::input_parameter< const List >::type inputData(inputDataSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_ABC(numSamples, numBurning, numThining, delta, k_val, wVec, censorVec, inputData));
    return rcpp_result_gen;
END_RCPP
}
// modifynPerTheta
void modifynPerTheta(const int newnPerTheta, const int verbose);
RcppExport SEXP _abcADM_modifynPerTheta(SEXP newnPerThetaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type newnPerTheta(newnPerThetaSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    modifynPerTheta(newnPerTheta, verbose);
    return R_NilValue;
END_RCPP
}
// modifyTEnd
void modifyTEnd(const double newEndT, const int verbose);
RcppExport SEXP _abcADM_modifyTEnd(SEXP newEndTSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type newEndT(newEndTSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    modifyTEnd(newEndT, verbose);
    return R_NilValue;
END_RCPP
}
// modifyTimeStep
void modifyTimeStep(const double newdt, const int verbose);
RcppExport SEXP _abcADM_modifyTimeStep(SEXP newdtSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type newdt(newdtSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    modifyTimeStep(newdt, verbose);
    return R_NilValue;
END_RCPP
}
// catConstants
void catConstants();
RcppExport SEXP _abcADM_catConstants() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    catConstants();
    return R_NilValue;
END_RCPP
}
// modifyLoadP
void modifyLoadP(std::string paramName, double param, const int verbose);
RcppExport SEXP _abcADM_modifyLoadP(SEXP paramNameSEXP, SEXP paramSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type paramName(paramNameSEXP);
    Rcpp::traits::input_parameter< double >::type param(paramSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    modifyLoadP(paramName, param, verbose);
    return R_NilValue;
END_RCPP
}
// print_LoadProfile
void print_LoadProfile(std::string paramName);
RcppExport SEXP _abcADM_print_LoadProfile(SEXP paramNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type paramName(paramNameSEXP);
    print_LoadProfile(paramName);
    return R_NilValue;
END_RCPP
}
// solveODE
List solveODE(NumericMatrix inputTheta, double phi, const int verbose);
RcppExport SEXP _abcADM_solveODE(SEXP inputThetaSEXP, SEXP phiSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type inputTheta(inputThetaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(solveODE(inputTheta, phi, verbose));
    return rcpp_result_gen;
END_RCPP
}
// use_CANL
NumericMatrix use_CANL(const NumericMatrix mat, const int N, const double w0, const double k, const double eps);
RcppExport SEXP _abcADM_use_CANL(SEXP matSEXP, SEXP NSEXP, SEXP w0SEXP, SEXP kSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type w0(w0SEXP);
    Rcpp::traits::input_parameter< const double >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(use_CANL(mat, N, w0, k, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abcADM_MCMC_ABC", (DL_FUNC) &_abcADM_MCMC_ABC, 8},
    {"_abcADM_modifynPerTheta", (DL_FUNC) &_abcADM_modifynPerTheta, 2},
    {"_abcADM_modifyTEnd", (DL_FUNC) &_abcADM_modifyTEnd, 2},
    {"_abcADM_modifyTimeStep", (DL_FUNC) &_abcADM_modifyTimeStep, 2},
    {"_abcADM_catConstants", (DL_FUNC) &_abcADM_catConstants, 0},
    {"_abcADM_modifyLoadP", (DL_FUNC) &_abcADM_modifyLoadP, 3},
    {"_abcADM_print_LoadProfile", (DL_FUNC) &_abcADM_print_LoadProfile, 1},
    {"_abcADM_solveODE", (DL_FUNC) &_abcADM_solveODE, 3},
    {"_abcADM_use_CANL", (DL_FUNC) &_abcADM_use_CANL, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_abcADM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
