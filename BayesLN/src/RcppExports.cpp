// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gibbs_norep
List gibbs_norep(arma::vec y, arma::mat X, arma::mat Z, double l_s, double l_t, double d_s, double d_t, double g_s, double g_t, int nsamp, int verbose, arma::mat beta, arma::vec sigma2, arma::vec tau2);
RcppExport SEXP _BayesLN_gibbs_norep(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP l_sSEXP, SEXP l_tSEXP, SEXP d_sSEXP, SEXP d_tSEXP, SEXP g_sSEXP, SEXP g_tSEXP, SEXP nsampSEXP, SEXP verboseSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type l_s(l_sSEXP);
    Rcpp::traits::input_parameter< double >::type l_t(l_tSEXP);
    Rcpp::traits::input_parameter< double >::type d_s(d_sSEXP);
    Rcpp::traits::input_parameter< double >::type d_t(d_tSEXP);
    Rcpp::traits::input_parameter< double >::type g_s(g_sSEXP);
    Rcpp::traits::input_parameter< double >::type g_t(g_tSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_norep(y, X, Z, l_s, l_t, d_s, d_t, g_s, g_t, nsamp, verbose, beta, sigma2, tau2));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_norep_r
List gibbs_norep_r(arma::vec y, arma::mat X, arma::mat Z, double l_s, arma::vec l_t, double d_s, arma::vec d_t, double g_s, arma::vec g_t, int r, arma::vec m_s_cum, arma::vec m_s, int nsamp, int verbose, arma::mat beta, arma::vec sigma2, arma::mat tau2);
RcppExport SEXP _BayesLN_gibbs_norep_r(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP l_sSEXP, SEXP l_tSEXP, SEXP d_sSEXP, SEXP d_tSEXP, SEXP g_sSEXP, SEXP g_tSEXP, SEXP rSEXP, SEXP m_s_cumSEXP, SEXP m_sSEXP, SEXP nsampSEXP, SEXP verboseSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type l_s(l_sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type l_t(l_tSEXP);
    Rcpp::traits::input_parameter< double >::type d_s(d_sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_t(d_tSEXP);
    Rcpp::traits::input_parameter< double >::type g_s(g_sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_t(g_tSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m_s_cum(m_s_cumSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m_s(m_sSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_norep_r(y, X, Z, l_s, l_t, d_s, d_t, g_s, g_t, r, m_s_cum, m_s, nsamp, verbose, beta, sigma2, tau2));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_rep
List gibbs_rep(arma::vec y, arma::mat X, arma::mat Z, arma::mat Xrep, arma::mat Zrep, double l_s, double l_t, double d_s, double d_t, double g_s, double g_t, int nsamp, int verbose, arma::mat beta, arma::vec sigma2, arma::vec tau2);
RcppExport SEXP _BayesLN_gibbs_rep(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP XrepSEXP, SEXP ZrepSEXP, SEXP l_sSEXP, SEXP l_tSEXP, SEXP d_sSEXP, SEXP d_tSEXP, SEXP g_sSEXP, SEXP g_tSEXP, SEXP nsampSEXP, SEXP verboseSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xrep(XrepSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zrep(ZrepSEXP);
    Rcpp::traits::input_parameter< double >::type l_s(l_sSEXP);
    Rcpp::traits::input_parameter< double >::type l_t(l_tSEXP);
    Rcpp::traits::input_parameter< double >::type d_s(d_sSEXP);
    Rcpp::traits::input_parameter< double >::type d_t(d_tSEXP);
    Rcpp::traits::input_parameter< double >::type g_s(g_sSEXP);
    Rcpp::traits::input_parameter< double >::type g_t(g_tSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_rep(y, X, Z, Xrep, Zrep, l_s, l_t, d_s, d_t, g_s, g_t, nsamp, verbose, beta, sigma2, tau2));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_rep_r
List gibbs_rep_r(arma::vec y, arma::mat X, arma::mat Z, arma::mat Xrep, arma::mat Zrep, double l_s, arma::vec l_t, double d_s, arma::vec d_t, double g_s, arma::vec g_t, int r, arma::vec m_s_cum, arma::vec m_s, int nsamp, int verbose, arma::mat beta, arma::vec sigma2, arma::mat tau2);
RcppExport SEXP _BayesLN_gibbs_rep_r(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP XrepSEXP, SEXP ZrepSEXP, SEXP l_sSEXP, SEXP l_tSEXP, SEXP d_sSEXP, SEXP d_tSEXP, SEXP g_sSEXP, SEXP g_tSEXP, SEXP rSEXP, SEXP m_s_cumSEXP, SEXP m_sSEXP, SEXP nsampSEXP, SEXP verboseSEXP, SEXP betaSEXP, SEXP sigma2SEXP, SEXP tau2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Xrep(XrepSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zrep(ZrepSEXP);
    Rcpp::traits::input_parameter< double >::type l_s(l_sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type l_t(l_tSEXP);
    Rcpp::traits::input_parameter< double >::type d_s(d_sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d_t(d_tSEXP);
    Rcpp::traits::input_parameter< double >::type g_s(g_sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_t(g_tSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m_s_cum(m_s_cumSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m_s(m_sSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau2(tau2SEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_rep_r(y, X, Z, Xrep, Zrep, l_s, l_t, d_s, d_t, g_s, g_t, r, m_s_cum, m_s, nsamp, verbose, beta, sigma2, tau2));
    return rcpp_result_gen;
END_RCPP
}
// predictive_gen
List predictive_gen(arma::mat Xrep, arma::mat Zrep, arma::mat beta, arma::mat u, arma::vec sigma2, int nsamp, int verbose);
RcppExport SEXP _BayesLN_predictive_gen(SEXP XrepSEXP, SEXP ZrepSEXP, SEXP betaSEXP, SEXP uSEXP, SEXP sigma2SEXP, SEXP nsampSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xrep(XrepSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zrep(ZrepSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(predictive_gen(Xrep, Zrep, beta, u, sigma2, nsamp, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesLN_gibbs_norep", (DL_FUNC) &_BayesLN_gibbs_norep, 14},
    {"_BayesLN_gibbs_norep_r", (DL_FUNC) &_BayesLN_gibbs_norep_r, 17},
    {"_BayesLN_gibbs_rep", (DL_FUNC) &_BayesLN_gibbs_rep, 16},
    {"_BayesLN_gibbs_rep_r", (DL_FUNC) &_BayesLN_gibbs_rep_r, 19},
    {"_BayesLN_predictive_gen", (DL_FUNC) &_BayesLN_predictive_gen, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesLN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
