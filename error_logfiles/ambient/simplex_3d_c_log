==13448== Memcheck, a memory error detector
==13448== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==13448== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==13448== Command: ./simplex_3d_c_DeepState_TestHarness --fuzz --fuzz_save_passing --output_test_dir /home/akhila/Documents/compileAttributescheck/ambient/inst/testfiles/simplex_3d_c/simplex_3d_c_output
==13448== 
INFO: Starting fuzzing
WARNING: No seed provided; using 1597731544
WARNING: No test specified, defaulting to first test defined (ambient_deepstate_test_simplex_3d_c_test)
height values: -61362347
width values: -882370260
depth values: -2124513751
seed values: -929666386
freq values: 4.544e-268
fractal values: -1618229380
octaves values: -1868627316
lacunarity values: -5.77936e-179
gain values: -1.45443e-179
pertube values: 2010850120
pertube_amp values: -4.61959e-92
input ends
EXTERNAL: Error: negative length vectors are not allowed

EXTERNAL: Execution halted

==13449== 
==13449== HEAP SUMMARY:
==13449==     in use at exit: 50,292,293 bytes in 9,714 blocks
==13449==   total heap usage: 27,818 allocs, 18,104 frees, 86,076,705 bytes allocated
==13449== 
==13449== 8 bytes in 1 blocks are definitely lost in loss record 10 of 1,307
==13449==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13449==    by 0x40E786: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:111)
==13449==    by 0x40E72B: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:436)
==13449==    by 0x40E6D2: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:172)
==13449==    by 0x40E60E: std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (stl_vector.h:187)
==13449==    by 0x40E4B4: std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (stl_vector.h:138)
==13449==    by 0x40E3E6: std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) (stl_vector.h:284)
==13449==    by 0x40E13F: Rcpp::Dimension::Dimension(unsigned long const&, unsigned long const&) (Dimension.h:45)
==13449==    by 0x40CC67: Rcpp::Matrix<14, Rcpp::PreserveStorage>::Matrix(int const&, int const&) (Matrix.h:59)
==13449==    by 0x43ADE3: simplex_3d_c(int, int, int, int, double, int, int, double, double, int, double) (simplex.cpp:51)
==13449==    by 0x40995A: DeepState_Test_ambient_deepstate_test_simplex_3d_c_test() (simplex_3d_c_DeepState_TestHarness.cpp:77)
==13449==    by 0x408E18: DeepState_Run_ambient_deepstate_test_simplex_3d_c_test() (simplex_3d_c_DeepState_TestHarness.cpp:7)
==13449== 
==13449== LEAK SUMMARY:
==13449==    definitely lost: 8 bytes in 1 blocks
==13449==    indirectly lost: 0 bytes in 0 blocks
==13449==      possibly lost: 0 bytes in 0 blocks
==13449==    still reachable: 50,292,285 bytes in 9,713 blocks
==13449==                       of which reachable via heuristic:
==13449==                         newarray           : 4,264 bytes in 1 blocks
==13449==         suppressed: 0 bytes in 0 blocks
==13449== Reachable blocks (those to which a pointer was found) are not shown.
==13449== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==13449== 
==13449== For counts of detected and suppressed errors, rerun with: -v
==13449== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
height values: -159358429
width values: -1454041512
depth values: 2107014060
seed values: -1658727428
freq values: -2.80383e+160
fractal values: -1273678030
octaves values: -1763985012
lacunarity values: -4.30461e+223
gain values: -3.03955e+279
pertube values: -252622427
pertube_amp values: 2.08404e-59
input ends
EXTERNAL: Error: vector is too large

EXTERNAL: Execution halted

==13456== 
==13456== HEAP SUMMARY:
==13456==     in use at exit: 50,292,292 bytes in 9,714 blocks
==13456==   total heap usage: 27,818 allocs, 18,104 frees, 86,076,704 bytes allocated
==13456== 
==13456== 8 bytes in 1 blocks are definitely lost in loss record 10 of 1,307
==13456==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13456==    by 0x40E786: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:111)
==13456==    by 0x40E72B: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:436)
==13456==    by 0x40E6D2: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:172)
==13456==    by 0x40E60E: std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (stl_vector.h:187)
==13456==    by 0x40E4B4: std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (stl_vector.h:138)
==13456==    by 0x40E3E6: std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) (stl_vector.h:284)
==13456==    by 0x40E13F: Rcpp::Dimension::Dimension(unsigned long const&, unsigned long const&) (Dimension.h:45)
==13456==    by 0x40CC67: Rcpp::Matrix<14, Rcpp::PreserveStorage>::Matrix(int const&, int const&) (Matrix.h:59)
==13456==    by 0x43ADE3: simplex_3d_c(int, int, int, int, double, int, int, double, double, int, double) (simplex.cpp:51)
==13456==    by 0x40995A: DeepState_Test_ambient_deepstate_test_simplex_3d_c_test() (simplex_3d_c_DeepState_TestHarness.cpp:77)
==13456==    by 0x408E18: DeepState_Run_ambient_deepstate_test_simplex_3d_c_test() (simplex_3d_c_DeepState_TestHarness.cpp:7)
==13456== 
==13456== LEAK SUMMARY:
==13456==    definitely lost: 8 bytes in 1 blocks
==13456==    indirectly lost: 0 bytes in 0 blocks
==13456==      possibly lost: 0 bytes in 0 blocks
==13456==    still reachable: 50,292,284 bytes in 9,713 blocks
==13456==                       of which reachable via heuristic:
==13456==                         newarray           : 4,264 bytes in 1 blocks
==13456==         suppressed: 0 bytes in 0 blocks
==13456== Reachable blocks (those to which a pointer was found) are not shown.
==13456== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==13456== 
==13456== For counts of detected and suppressed errors, rerun with: -v
==13456== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
INFO: Done fuzzing! Ran 2 tests (0 tests/second) with 2 failed/0 passed/0 abandoned tests
==13448== 
==13448== HEAP SUMMARY:
==13448==     in use at exit: 8 bytes in 1 blocks
==13448==   total heap usage: 4 allocs, 3 frees, 106,568 bytes allocated
==13448== 
==13448== LEAK SUMMARY:
==13448==    definitely lost: 0 bytes in 0 blocks
==13448==    indirectly lost: 0 bytes in 0 blocks
==13448==      possibly lost: 0 bytes in 0 blocks
==13448==    still reachable: 8 bytes in 1 blocks
==13448==         suppressed: 0 bytes in 0 blocks
==13448== Reachable blocks (those to which a pointer was found) are not shown.
==13448== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==13448== 
==13448== For counts of detected and suppressed errors, rerun with: -v
==13448== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
