// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// computeNeighboursWeights
NumericMatrix computeNeighboursWeights(NumericMatrix predTrainingID, NumericMatrix predTestingID, int ntrain, int ntest, int ntree);
RcppExport SEXP _abcrf_computeNeighboursWeights(SEXP predTrainingIDSEXP, SEXP predTestingIDSEXP, SEXP ntrainSEXP, SEXP ntestSEXP, SEXP ntreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type predTrainingID(predTrainingIDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type predTestingID(predTestingIDSEXP);
    Rcpp::traits::input_parameter< int >::type ntrain(ntrainSEXP);
    Rcpp::traits::input_parameter< int >::type ntest(ntestSEXP);
    Rcpp::traits::input_parameter< int >::type ntree(ntreeSEXP);
    rcpp_result_gen = Rcpp::wrap(computeNeighboursWeights(predTrainingID, predTestingID, ntrain, ntest, ntree));
    return rcpp_result_gen;
END_RCPP
}
// findweights
NumericMatrix findweights(NumericMatrix trainingNodeID, NumericMatrix testingNodeID, IntegerMatrix inbag, int ntrain, int nnew, int ntree);
RcppExport SEXP _abcrf_findweights(SEXP trainingNodeIDSEXP, SEXP testingNodeIDSEXP, SEXP inbagSEXP, SEXP ntrainSEXP, SEXP nnewSEXP, SEXP ntreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type trainingNodeID(trainingNodeIDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type testingNodeID(testingNodeIDSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type inbag(inbagSEXP);
    Rcpp::traits::input_parameter< int >::type ntrain(ntrainSEXP);
    Rcpp::traits::input_parameter< int >::type nnew(nnewSEXP);
    Rcpp::traits::input_parameter< int >::type ntree(ntreeSEXP);
    rcpp_result_gen = Rcpp::wrap(findweights(trainingNodeID, testingNodeID, inbag, ntrain, nnew, ntree));
    return rcpp_result_gen;
END_RCPP
}
// findweights_train
NumericMatrix findweights_train(NumericMatrix trainingNodeID, NumericMatrix inbag, int ntrain, int trainIdx, int ntree);
RcppExport SEXP _abcrf_findweights_train(SEXP trainingNodeIDSEXP, SEXP inbagSEXP, SEXP ntrainSEXP, SEXP trainIdxSEXP, SEXP ntreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type trainingNodeID(trainingNodeIDSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inbag(inbagSEXP);
    Rcpp::traits::input_parameter< int >::type ntrain(ntrainSEXP);
    Rcpp::traits::input_parameter< int >::type trainIdx(trainIdxSEXP);
    Rcpp::traits::input_parameter< int >::type ntree(ntreeSEXP);
    rcpp_result_gen = Rcpp::wrap(findweights_train(trainingNodeID, inbag, ntrain, trainIdx, ntree));
    return rcpp_result_gen;
END_RCPP
}
// oobErrors
NumericVector oobErrors(IntegerVector sequo, int ntrain, IntegerVector mod, int ntree, IntegerVector modindex, IntegerMatrix inbag, IntegerMatrix mimi);
RcppExport SEXP _abcrf_oobErrors(SEXP sequoSEXP, SEXP ntrainSEXP, SEXP modSEXP, SEXP ntreeSEXP, SEXP modindexSEXP, SEXP inbagSEXP, SEXP mimiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type sequo(sequoSEXP);
    Rcpp::traits::input_parameter< int >::type ntrain(ntrainSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mod(modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree(ntreeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type modindex(modindexSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type inbag(inbagSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type mimi(mimiSEXP);
    rcpp_result_gen = Rcpp::wrap(oobErrors(sequo, ntrain, mod, ntree, modindex, inbag, mimi));
    return rcpp_result_gen;
END_RCPP
}
// oobErrorsReg
NumericVector oobErrorsReg(IntegerVector sequo, int ntrain, int ntree, NumericVector resp, IntegerMatrix inbag, NumericMatrix pred);
RcppExport SEXP _abcrf_oobErrorsReg(SEXP sequoSEXP, SEXP ntrainSEXP, SEXP ntreeSEXP, SEXP respSEXP, SEXP inbagSEXP, SEXP predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type sequo(sequoSEXP);
    Rcpp::traits::input_parameter< int >::type ntrain(ntrainSEXP);
    Rcpp::traits::input_parameter< int >::type ntree(ntreeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type inbag(inbagSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pred(predSEXP);
    rcpp_result_gen = Rcpp::wrap(oobErrorsReg(sequo, ntrain, ntree, resp, inbag, pred));
    return rcpp_result_gen;
END_RCPP
}
// oobMedErrorsReg
NumericVector oobMedErrorsReg(IntegerVector sequo, int ntrain, int ntree, NumericVector resp, IntegerMatrix inbag, NumericMatrix pred);
RcppExport SEXP _abcrf_oobMedErrorsReg(SEXP sequoSEXP, SEXP ntrainSEXP, SEXP ntreeSEXP, SEXP respSEXP, SEXP inbagSEXP, SEXP predSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type sequo(sequoSEXP);
    Rcpp::traits::input_parameter< int >::type ntrain(ntrainSEXP);
    Rcpp::traits::input_parameter< int >::type ntree(ntreeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type inbag(inbagSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pred(predSEXP);
    rcpp_result_gen = Rcpp::wrap(oobMedErrorsReg(sequo, ntrain, ntree, resp, inbag, pred));
    return rcpp_result_gen;
END_RCPP
}
// predictOob_cpp
NumericMatrix predictOob_cpp(NumericMatrix origNodes, NumericMatrix inbag, int nobs, int ntree);
RcppExport SEXP _abcrf_predictOob_cpp(SEXP origNodesSEXP, SEXP inbagSEXP, SEXP nobsSEXP, SEXP ntreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type origNodes(origNodesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inbag(inbagSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type ntree(ntreeSEXP);
    rcpp_result_gen = Rcpp::wrap(predictOob_cpp(origNodes, inbag, nobs, ntree));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abcrf_computeNeighboursWeights", (DL_FUNC) &_abcrf_computeNeighboursWeights, 5},
    {"_abcrf_findweights", (DL_FUNC) &_abcrf_findweights, 6},
    {"_abcrf_findweights_train", (DL_FUNC) &_abcrf_findweights_train, 5},
    {"_abcrf_oobErrors", (DL_FUNC) &_abcrf_oobErrors, 7},
    {"_abcrf_oobErrorsReg", (DL_FUNC) &_abcrf_oobErrorsReg, 6},
    {"_abcrf_oobMedErrorsReg", (DL_FUNC) &_abcrf_oobMedErrorsReg, 6},
    {"_abcrf_predictOob_cpp", (DL_FUNC) &_abcrf_predictOob_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_abcrf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
