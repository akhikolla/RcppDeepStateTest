// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// comp_surv_cpp_DeepState_TestHarness_generation.cpp and comp_surv_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

int comp_surv_cpp(double time1, double event1, double time0, double event0);

TEST(WinRatio_deepstate_test,comp_surv_cpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector time1(1);
  time1[0]  = RcppDeepState_double();
  std::string time1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WinRatio/inst/testfiles/comp_surv_cpp/AFL_comp_surv_cpp/afl_inputs/" + std::to_string(t) + "_time1.qs";
  qs::c_qsave(time1,time1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "time1 values: "<< time1 << std::endl;
  NumericVector event1(1);
  event1[0]  = RcppDeepState_double();
  std::string event1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WinRatio/inst/testfiles/comp_surv_cpp/AFL_comp_surv_cpp/afl_inputs/" + std::to_string(t) + "_event1.qs";
  qs::c_qsave(event1,event1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "event1 values: "<< event1 << std::endl;
  NumericVector time0(1);
  time0[0]  = RcppDeepState_double();
  std::string time0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WinRatio/inst/testfiles/comp_surv_cpp/AFL_comp_surv_cpp/afl_inputs/" + std::to_string(t) + "_time0.qs";
  qs::c_qsave(time0,time0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "time0 values: "<< time0 << std::endl;
  NumericVector event0(1);
  event0[0]  = RcppDeepState_double();
  std::string event0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/WinRatio/inst/testfiles/comp_surv_cpp/AFL_comp_surv_cpp/afl_inputs/" + std::to_string(t) + "_event0.qs";
  qs::c_qsave(event0,event0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "event0 values: "<< event0 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    comp_surv_cpp(time1[0],event1[0],time0[0],event0[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
