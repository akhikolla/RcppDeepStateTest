// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcppDiscriminantAnalysisGlasso_DeepState_TestHarness_generation.cpp and rcppDiscriminantAnalysisGlasso_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector rcppDiscriminantAnalysisGlasso(NumericMatrix X_, IntegerVector labels_, const int nbClust, double l, double r);

TEST(SelvarMix_deepstate_test,rcppDiscriminantAnalysisGlasso_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix X_  = RcppDeepState_NumericMatrix();
  std::string X__t = "/home/akhila/fuzzer_packages/fuzzedpackages/SelvarMix/inst/testfiles/rcppDiscriminantAnalysisGlasso/libFuzzer_rcppDiscriminantAnalysisGlasso/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X_.qs";
  qs::c_qsave(X_,X__t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X_ values: "<< X_ << std::endl;
  IntegerVector labels_  = RcppDeepState_IntegerVector();
  std::string labels__t = "/home/akhila/fuzzer_packages/fuzzedpackages/SelvarMix/inst/testfiles/rcppDiscriminantAnalysisGlasso/libFuzzer_rcppDiscriminantAnalysisGlasso/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_labels_.qs";
  std::string l_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SelvarMix/inst/testfiles/rcppDiscriminantAnalysisGlasso/libFuzzer_rcppDiscriminantAnalysisGlasso/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_l.qs";
  qs::c_qsave(labels_,labels__t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "labels_ values: "<< labels_ << std::endl;
  IntegerVector nbClust(1);
  nbClust[0]  = RcppDeepState_int();
  std::string nbClust_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SelvarMix/inst/testfiles/rcppDiscriminantAnalysisGlasso/libFuzzer_rcppDiscriminantAnalysisGlasso/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nbClust.qs";
  qs::c_qsave(nbClust,nbClust_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nbClust values: "<< nbClust << std::endl;
  NumericVector l(1);
  l[0]  = RcppDeepState_double();
  std::string l_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SelvarMix/inst/testfiles/rcppDiscriminantAnalysisGlasso/libFuzzer_rcppDiscriminantAnalysisGlasso/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_l.qs";
  qs::c_qsave(l,l_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "l values: "<< l << std::endl;
  NumericVector r(1);
  r[0]  = RcppDeepState_double();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/SelvarMix/inst/testfiles/rcppDiscriminantAnalysisGlasso/libFuzzer_rcppDiscriminantAnalysisGlasso/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcppDiscriminantAnalysisGlasso(X_,labels_,nbClust[0],l[0],r[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
