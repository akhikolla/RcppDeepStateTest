// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// logliknormLR_DeepState_TestHarness_generation.cpp and logliknormLR_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix logliknormLR(NumericVector yy, NumericMatrix XX_aug, double alpha, int init);

TEST(PWD_deepstate_test,logliknormLR_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector yy  = RcppDeepState_NumericVector();
  std::string yy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PWD/inst/testfiles/logliknormLR/AFL_logliknormLR/afl_inputs/" + std::to_string(t) + "_yy.qs";
  qs::c_qsave(yy,yy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "yy values: "<< yy << std::endl;
  NumericMatrix XX_aug  = RcppDeepState_NumericMatrix();
  std::string XX_aug_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PWD/inst/testfiles/logliknormLR/AFL_logliknormLR/afl_inputs/" + std::to_string(t) + "_XX_aug.qs";
  qs::c_qsave(XX_aug,XX_aug_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "XX_aug values: "<< XX_aug << std::endl;
  NumericVector alpha(1);
  alpha[0]  = RcppDeepState_double();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PWD/inst/testfiles/logliknormLR/AFL_logliknormLR/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  IntegerVector init(1);
  init[0]  = RcppDeepState_int();
  std::string init_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PWD/inst/testfiles/logliknormLR/AFL_logliknormLR/afl_inputs/" + std::to_string(t) + "_init.qs";
  qs::c_qsave(init,init_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "init values: "<< init << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    logliknormLR(yy,XX_aug,alpha[0],init[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
