// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ipfLGD
NumericMatrix ipfLGD(NumericMatrix train, NumericMatrix test, double sd, double epsilon);
RcppExport SEXP _ipft_ipfLGD(SEXP trainSEXP, SEXP testSEXP, SEXP sdSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test(testSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(ipfLGD(train, test, sd, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// ipfPLGD
NumericMatrix ipfPLGD(NumericMatrix train, NumericMatrix test, double sd, double epsilon, double alpha, double threshold);
RcppExport SEXP _ipft_ipfPLGD(SEXP trainSEXP, SEXP testSEXP, SEXP sdSEXP, SEXP epsilonSEXP, SEXP alphaSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test(testSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(ipfPLGD(train, test, sd, epsilon, alpha, threshold));
    return rcpp_result_gen;
END_RCPP
}
// ipfEuclidean
NumericMatrix ipfEuclidean(NumericMatrix train, NumericMatrix test);
RcppExport SEXP _ipft_ipfEuclidean(SEXP trainSEXP, SEXP testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test(testSEXP);
    rcpp_result_gen = Rcpp::wrap(ipfEuclidean(train, test));
    return rcpp_result_gen;
END_RCPP
}
// ipfManhattan
NumericMatrix ipfManhattan(NumericMatrix train, NumericMatrix test);
RcppExport SEXP _ipft_ipfManhattan(SEXP trainSEXP, SEXP testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test(testSEXP);
    rcpp_result_gen = Rcpp::wrap(ipfManhattan(train, test));
    return rcpp_result_gen;
END_RCPP
}
// ipfNormDistance
NumericMatrix ipfNormDistance(NumericMatrix train, NumericMatrix test, double normVal);
RcppExport SEXP _ipft_ipfNormDistance(SEXP trainSEXP, SEXP testSEXP, SEXP normValSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type train(trainSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type test(testSEXP);
    Rcpp::traits::input_parameter< double >::type normVal(normValSEXP);
    rcpp_result_gen = Rcpp::wrap(ipfNormDistance(train, test, normVal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ipft_ipfLGD", (DL_FUNC) &_ipft_ipfLGD, 4},
    {"_ipft_ipfPLGD", (DL_FUNC) &_ipft_ipfPLGD, 6},
    {"_ipft_ipfEuclidean", (DL_FUNC) &_ipft_ipfEuclidean, 2},
    {"_ipft_ipfManhattan", (DL_FUNC) &_ipft_ipfManhattan, 2},
    {"_ipft_ipfNormDistance", (DL_FUNC) &_ipft_ipfNormDistance, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ipft(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
