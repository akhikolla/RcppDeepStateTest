// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cpp_tapply_sum_DeepState_TestHarness_generation.cpp and cpp_tapply_sum_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix cpp_tapply_sum(int Q, NumericMatrix x, IntegerVector dum);

TEST(fixest_deepstate_test,cpp_tapply_sum_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector Q(1);
  Q[0]  = RcppDeepState_int();
  std::string Q_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpp_tapply_sum/AFL_cpp_tapply_sum/afl_inputs/" + std::to_string(t) + "_Q.qs";
  qs::c_qsave(Q,Q_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Q values: "<< Q << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpp_tapply_sum/AFL_cpp_tapply_sum/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector dum  = RcppDeepState_IntegerVector();
  std::string dum_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpp_tapply_sum/AFL_cpp_tapply_sum/afl_inputs/" + std::to_string(t) + "_dum.qs";
  qs::c_qsave(dum,dum_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dum values: "<< dum << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cpp_tapply_sum(Q[0],x,dum);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
