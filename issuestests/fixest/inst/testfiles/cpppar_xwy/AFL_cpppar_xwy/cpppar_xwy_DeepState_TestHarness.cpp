// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cpppar_xwy_DeepState_TestHarness_generation.cpp and cpppar_xwy_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector cpppar_xwy(NumericMatrix X, NumericVector y, NumericVector w, int nthreads);

TEST(fixest_deepstate_test,cpppar_xwy_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpppar_xwy/AFL_cpppar_xwy/afl_inputs/" + std::to_string(t) + "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpppar_xwy/AFL_cpppar_xwy/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector w  = RcppDeepState_NumericVector();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpppar_xwy/AFL_cpppar_xwy/afl_inputs/" + std::to_string(t) + "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  IntegerVector nthreads(1);
  nthreads[0]  = RcppDeepState_int();
  std::string nthreads_t = "/home/akhila/fuzzer_packages/fuzzedpackages/fixest/inst/testfiles/cpppar_xwy/AFL_cpppar_xwy/afl_inputs/" + std::to_string(t) + "_nthreads.qs";
  qs::c_qsave(nthreads,nthreads_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nthreads values: "<< nthreads << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cpppar_xwy(X,y,w,nthreads[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
