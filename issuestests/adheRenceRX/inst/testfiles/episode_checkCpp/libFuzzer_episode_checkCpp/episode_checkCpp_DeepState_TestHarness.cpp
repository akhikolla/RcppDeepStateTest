// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// episode_checkCpp_DeepState_TestHarness_generation.cpp and episode_checkCpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector episode_checkCpp(NumericVector x, int perm_gap, int init_rank);

TEST(adheRenceRX_deepstate_test,episode_checkCpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/adheRenceRX/inst/testfiles/episode_checkCpp/libFuzzer_episode_checkCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector perm_gap(1);
  perm_gap[0]  = RcppDeepState_int();
  std::string perm_gap_t = "/home/akhila/fuzzer_packages/fuzzedpackages/adheRenceRX/inst/testfiles/episode_checkCpp/libFuzzer_episode_checkCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_perm_gap.qs";
  qs::c_qsave(perm_gap,perm_gap_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "perm_gap values: "<< perm_gap << std::endl;
  IntegerVector init_rank(1);
  init_rank[0]  = RcppDeepState_int();
  std::string init_rank_t = "/home/akhila/fuzzer_packages/fuzzedpackages/adheRenceRX/inst/testfiles/episode_checkCpp/libFuzzer_episode_checkCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_init_rank.qs";
  qs::c_qsave(init_rank,init_rank_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "init_rank values: "<< init_rank << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    episode_checkCpp(x,perm_gap[0],init_rank[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
