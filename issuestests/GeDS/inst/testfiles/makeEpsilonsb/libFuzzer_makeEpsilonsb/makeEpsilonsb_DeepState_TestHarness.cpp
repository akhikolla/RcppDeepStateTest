// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// makeEpsilonsb_DeepState_TestHarness_generation.cpp and makeEpsilonsb_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector makeEpsilonsb(NumericVector data, NumericVector Xs, NumericVector Ys, int degree);

TEST(GeDS_deepstate_test,makeEpsilonsb_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector data  = RcppDeepState_NumericVector();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/libFuzzer_makeEpsilonsb/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  NumericVector Xs  = RcppDeepState_NumericVector();
  std::string Xs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/libFuzzer_makeEpsilonsb/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Xs.qs";
  qs::c_qsave(Xs,Xs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Xs values: "<< Xs << std::endl;
  NumericVector Ys  = RcppDeepState_NumericVector();
  std::string Ys_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/libFuzzer_makeEpsilonsb/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Ys.qs";
  qs::c_qsave(Ys,Ys_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ys values: "<< Ys << std::endl;
  IntegerVector degree(1);
  degree[0]  = RcppDeepState_int();
  std::string degree_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GeDS/inst/testfiles/makeEpsilonsb/libFuzzer_makeEpsilonsb/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_degree.qs";
  qs::c_qsave(degree,degree_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "degree values: "<< degree << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    makeEpsilonsb(data,Xs,Ys,degree[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
