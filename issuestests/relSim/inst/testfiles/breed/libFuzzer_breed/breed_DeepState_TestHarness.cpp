// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// breed_DeepState_TestHarness_generation.cpp and breed_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector breed(IntegerVector Parents, int ns, int Ns, int nLoci);

TEST(relSim_deepstate_test,breed_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector Parents  = RcppDeepState_IntegerVector();
  std::string Parents_t = "/home/akhila/fuzzer_packages/fuzzedpackages/relSim/inst/testfiles/breed/libFuzzer_breed/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Parents.qs";
  qs::c_qsave(Parents,Parents_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Parents values: "<< Parents << std::endl;
  IntegerVector ns(1);
  ns[0]  = RcppDeepState_int();
  std::string ns_t = "/home/akhila/fuzzer_packages/fuzzedpackages/relSim/inst/testfiles/breed/libFuzzer_breed/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ns.qs";
  qs::c_qsave(ns,ns_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ns values: "<< ns << std::endl;
  IntegerVector Ns(1);
  Ns[0]  = RcppDeepState_int();
  std::string Ns_t = "/home/akhila/fuzzer_packages/fuzzedpackages/relSim/inst/testfiles/breed/libFuzzer_breed/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Ns.qs";
  qs::c_qsave(Ns,Ns_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ns values: "<< Ns << std::endl;
  IntegerVector nLoci(1);
  nLoci[0]  = RcppDeepState_int();
  std::string nLoci_t = "/home/akhila/fuzzer_packages/fuzzedpackages/relSim/inst/testfiles/breed/libFuzzer_breed/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nLoci.qs";
  qs::c_qsave(nLoci,nLoci_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nLoci values: "<< nLoci << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    breed(Parents,ns[0],Ns[0],nLoci[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
