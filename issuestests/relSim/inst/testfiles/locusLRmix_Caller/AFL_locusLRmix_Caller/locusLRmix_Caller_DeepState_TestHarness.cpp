// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// locusLRmix_Caller_DeepState_TestHarness_generation.cpp and locusLRmix_Caller_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double locusLRmix_Caller(IntegerVector ProfVic, IntegerVector ProfSus, NumericVector Freq);

TEST(relSim_deepstate_test,locusLRmix_Caller_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector ProfVic  = RcppDeepState_IntegerVector();
  std::string ProfVic_t = "/home/akhila/fuzzer_packages/fuzzedpackages/relSim/inst/testfiles/locusLRmix_Caller/AFL_locusLRmix_Caller/afl_inputs/" + std::to_string(t) + "_ProfVic.qs";
  qs::c_qsave(ProfVic,ProfVic_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ProfVic values: "<< ProfVic << std::endl;
  IntegerVector ProfSus  = RcppDeepState_IntegerVector();
  std::string ProfSus_t = "/home/akhila/fuzzer_packages/fuzzedpackages/relSim/inst/testfiles/locusLRmix_Caller/AFL_locusLRmix_Caller/afl_inputs/" + std::to_string(t) + "_ProfSus.qs";
  qs::c_qsave(ProfSus,ProfSus_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ProfSus values: "<< ProfSus << std::endl;
  NumericVector Freq  = RcppDeepState_NumericVector();
  std::string Freq_t = "/home/akhila/fuzzer_packages/fuzzedpackages/relSim/inst/testfiles/locusLRmix_Caller/AFL_locusLRmix_Caller/afl_inputs/" + std::to_string(t) + "_Freq.qs";
  qs::c_qsave(Freq,Freq_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Freq values: "<< Freq << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    locusLRmix_Caller(ProfVic,ProfSus,Freq);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
