// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// ebb_crossprob_cor_R_DeepState_TestHarness_generation.cpp and ebb_crossprob_cor_R_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double ebb_crossprob_cor_R(int d, NumericVector bounds, NumericVector correlations);

TEST(GBJ_deepstate_test,ebb_crossprob_cor_R_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector d(1);
  d[0]  = RcppDeepState_int();
  std::string d_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GBJ/inst/testfiles/ebb_crossprob_cor_R/libFuzzer_ebb_crossprob_cor_R/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_d.qs";
  qs::c_qsave(d,d_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  NumericVector bounds  = RcppDeepState_NumericVector();
  std::string bounds_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GBJ/inst/testfiles/ebb_crossprob_cor_R/libFuzzer_ebb_crossprob_cor_R/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_bounds.qs";
  qs::c_qsave(bounds,bounds_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bounds values: "<< bounds << std::endl;
  NumericVector correlations  = RcppDeepState_NumericVector();
  std::string correlations_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GBJ/inst/testfiles/ebb_crossprob_cor_R/libFuzzer_ebb_crossprob_cor_R/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_correlations.qs";
  qs::c_qsave(correlations,correlations_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "correlations values: "<< correlations << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    ebb_crossprob_cor_R(d[0],bounds,correlations);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
