// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// LambdaSeqCpp_DeepState_TestHarness_generation.cpp and LambdaSeqCpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

arma::Col<double> LambdaSeqCpp(double from, double to, double length);

TEST(biClassify_deepstate_test,LambdaSeqCpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector from(1);
  from[0]  = RcppDeepState_double();
  std::string from_t = "/home/akhila/fuzzer_packages/fuzzedpackages/biClassify/inst/testfiles/LambdaSeqCpp/AFL_LambdaSeqCpp/afl_inputs/" + std::to_string(t) + "_from.qs";
  qs::c_qsave(from,from_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "from values: "<< from << std::endl;
  NumericVector to(1);
  to[0]  = RcppDeepState_double();
  std::string to_t = "/home/akhila/fuzzer_packages/fuzzedpackages/biClassify/inst/testfiles/LambdaSeqCpp/AFL_LambdaSeqCpp/afl_inputs/" + std::to_string(t) + "_to.qs";
  qs::c_qsave(to,to_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "to values: "<< to << std::endl;
  NumericVector length(1);
  length[0]  = RcppDeepState_double();
  std::string length_t = "/home/akhila/fuzzer_packages/fuzzedpackages/biClassify/inst/testfiles/LambdaSeqCpp/AFL_LambdaSeqCpp/afl_inputs/" + std::to_string(t) + "_length.qs";
  qs::c_qsave(length,length_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "length values: "<< length << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    LambdaSeqCpp(from[0],to[0],length[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
