// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// scorepoilogcpp_DeepState_TestHarness_generation.cpp and scorepoilogcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector scorepoilogcpp(NumericVector beta, NumericVector Y, NumericMatrix DataM, NumericMatrix DataM0, NumericMatrix DataM1, NumericVector phat, NumericVector qhat, NumericVector weight, NumericVector offset);

TEST(augSIMEX_deepstate_test,scorepoilogcpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector beta  = RcppDeepState_NumericVector();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericVector Y  = RcppDeepState_NumericVector();
  std::string Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Y.qs";
  qs::c_qsave(Y,Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericMatrix DataM  = RcppDeepState_NumericMatrix();
  std::string DataM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DataM.qs";
  qs::c_qsave(DataM,DataM_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DataM values: "<< DataM << std::endl;
  NumericMatrix DataM0  = RcppDeepState_NumericMatrix();
  std::string DataM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DataM.qs";
  std::string DataM0_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DataM0.qs";
  qs::c_qsave(DataM0,DataM0_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DataM0 values: "<< DataM0 << std::endl;
  NumericMatrix DataM1  = RcppDeepState_NumericMatrix();
  std::string DataM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DataM.qs";
  std::string DataM1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_DataM1.qs";
  qs::c_qsave(DataM1,DataM1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "DataM1 values: "<< DataM1 << std::endl;
  NumericVector phat  = RcppDeepState_NumericVector();
  std::string phat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_phat.qs";
  qs::c_qsave(phat,phat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "phat values: "<< phat << std::endl;
  NumericVector qhat  = RcppDeepState_NumericVector();
  std::string qhat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_qhat.qs";
  qs::c_qsave(qhat,qhat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "qhat values: "<< qhat << std::endl;
  NumericVector weight  = RcppDeepState_NumericVector();
  std::string weight_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_weight.qs";
  qs::c_qsave(weight,weight_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "weight values: "<< weight << std::endl;
  NumericVector offset  = RcppDeepState_NumericVector();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/augSIMEX/inst/testfiles/scorepoilogcpp/libFuzzer_scorepoilogcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    scorepoilogcpp(beta,Y,DataM,DataM0,DataM1,phat,qhat,weight,offset);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
