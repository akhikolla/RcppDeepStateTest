// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// stat_binom_cpp_DeepState_TestHarness_generation.cpp and stat_binom_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector stat_binom_cpp(NumericVector yin, NumericVector yout, double ty, NumericVector popin, NumericVector popout, double tpop);

TEST(smerc_deepstate_test,stat_binom_cpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector yin  = RcppDeepState_NumericVector();
  std::string yin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smerc/inst/testfiles/stat_binom_cpp/libFuzzer_stat_binom_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_yin.qs";
  qs::c_qsave(yin,yin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "yin values: "<< yin << std::endl;
  NumericVector yout  = RcppDeepState_NumericVector();
  std::string yout_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smerc/inst/testfiles/stat_binom_cpp/libFuzzer_stat_binom_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_yout.qs";
  qs::c_qsave(yout,yout_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "yout values: "<< yout << std::endl;
  NumericVector ty(1);
  ty[0]  = RcppDeepState_double();
  std::string ty_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smerc/inst/testfiles/stat_binom_cpp/libFuzzer_stat_binom_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ty.qs";
  qs::c_qsave(ty,ty_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ty values: "<< ty << std::endl;
  NumericVector popin  = RcppDeepState_NumericVector();
  std::string popin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smerc/inst/testfiles/stat_binom_cpp/libFuzzer_stat_binom_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_popin.qs";
  qs::c_qsave(popin,popin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "popin values: "<< popin << std::endl;
  NumericVector popout  = RcppDeepState_NumericVector();
  std::string popout_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smerc/inst/testfiles/stat_binom_cpp/libFuzzer_stat_binom_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_popout.qs";
  qs::c_qsave(popout,popout_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "popout values: "<< popout << std::endl;
  NumericVector tpop(1);
  tpop[0]  = RcppDeepState_double();
  std::string tpop_t = "/home/akhila/fuzzer_packages/fuzzedpackages/smerc/inst/testfiles/stat_binom_cpp/libFuzzer_stat_binom_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_tpop.qs";
  qs::c_qsave(tpop,tpop_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tpop values: "<< tpop << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    stat_binom_cpp(yin,yout,ty[0],popin,popout,tpop[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
