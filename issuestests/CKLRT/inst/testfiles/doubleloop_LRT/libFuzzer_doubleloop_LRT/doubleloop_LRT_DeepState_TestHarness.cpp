// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// doubleloop_LRT_DeepState_TestHarness_generation.cpp and doubleloop_LRT_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix doubleloop_LRT(NumericMatrix K1R, NumericMatrix K2R, NumericMatrix P0R, NumericMatrix AR, NumericMatrix U1R, NumericMatrix wR, NumericVector LamdasR, int nminuspx, NumericVector all_rho, NumericMatrix LR0_allRhoR);

TEST(CKLRT_deepstate_test,doubleloop_LRT_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix K1R  = RcppDeepState_NumericMatrix();
  std::string K1R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_K1R.qs";
  qs::c_qsave(K1R,K1R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K1R values: "<< K1R << std::endl;
  NumericMatrix K2R  = RcppDeepState_NumericMatrix();
  std::string K2R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_K2R.qs";
  qs::c_qsave(K2R,K2R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K2R values: "<< K2R << std::endl;
  NumericMatrix P0R  = RcppDeepState_NumericMatrix();
  std::string P0R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_P0R.qs";
  qs::c_qsave(P0R,P0R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "P0R values: "<< P0R << std::endl;
  NumericMatrix AR  = RcppDeepState_NumericMatrix();
  std::string AR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_AR.qs";
  qs::c_qsave(AR,AR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AR values: "<< AR << std::endl;
  NumericMatrix U1R  = RcppDeepState_NumericMatrix();
  std::string U1R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_U1R.qs";
  qs::c_qsave(U1R,U1R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "U1R values: "<< U1R << std::endl;
  NumericMatrix wR  = RcppDeepState_NumericMatrix();
  std::string wR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_wR.qs";
  qs::c_qsave(wR,wR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wR values: "<< wR << std::endl;
  NumericVector LamdasR  = RcppDeepState_NumericVector();
  std::string LamdasR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_LamdasR.qs";
  qs::c_qsave(LamdasR,LamdasR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LamdasR values: "<< LamdasR << std::endl;
  IntegerVector nminuspx(1);
  nminuspx[0]  = RcppDeepState_int();
  std::string nminuspx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nminuspx.qs";
  qs::c_qsave(nminuspx,nminuspx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nminuspx values: "<< nminuspx << std::endl;
  NumericVector all_rho  = RcppDeepState_NumericVector();
  std::string all_rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_all_rho.qs";
  qs::c_qsave(all_rho,all_rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "all_rho values: "<< all_rho << std::endl;
  NumericMatrix LR0_allRhoR  = RcppDeepState_NumericMatrix();
  std::string LR0_allRhoR_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CKLRT/inst/testfiles/doubleloop_LRT/libFuzzer_doubleloop_LRT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_LR0_allRhoR.qs";
  qs::c_qsave(LR0_allRhoR,LR0_allRhoR_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LR0_allRhoR values: "<< LR0_allRhoR << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    doubleloop_LRT(K1R,K2R,P0R,AR,U1R,wR,LamdasR,nminuspx[0],all_rho,LR0_allRhoR);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
