// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cdm_rcpp_slca_calc_probs_DeepState_TestHarness_generation.cpp and cdm_rcpp_slca_calc_probs_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector cdm_rcpp_slca_calc_probs(Rcpp::NumericMatrix XdesM, Rcpp::NumericVector dimXdes, Rcpp::NumericVector Xlambda);

TEST(CDM_deepstate_test,cdm_rcpp_slca_calc_probs_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix XdesM  = RcppDeepState_NumericMatrix();
  std::string XdesM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_slca_calc_probs/libFuzzer_cdm_rcpp_slca_calc_probs/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_XdesM.qs";
  qs::c_qsave(XdesM,XdesM_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "XdesM values: "<< XdesM << std::endl;
  NumericVector dimXdes  = RcppDeepState_NumericVector();
  std::string dimXdes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_slca_calc_probs/libFuzzer_cdm_rcpp_slca_calc_probs/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dimXdes.qs";
  qs::c_qsave(dimXdes,dimXdes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dimXdes values: "<< dimXdes << std::endl;
  NumericVector Xlambda  = RcppDeepState_NumericVector();
  std::string Xlambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_slca_calc_probs/libFuzzer_cdm_rcpp_slca_calc_probs/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Xlambda.qs";
  qs::c_qsave(Xlambda,Xlambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Xlambda values: "<< Xlambda << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cdm_rcpp_slca_calc_probs(XdesM,dimXdes,Xlambda);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
