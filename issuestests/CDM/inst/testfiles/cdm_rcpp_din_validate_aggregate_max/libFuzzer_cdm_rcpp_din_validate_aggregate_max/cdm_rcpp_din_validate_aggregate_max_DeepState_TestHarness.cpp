// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cdm_rcpp_din_validate_aggregate_max_DeepState_TestHarness_generation.cpp and cdm_rcpp_din_validate_aggregate_max_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericMatrix cdm_rcpp_din_validate_aggregate_max(Rcpp::NumericVector IDI, Rcpp::IntegerVector itemindex, int I);

TEST(CDM_deepstate_test,cdm_rcpp_din_validate_aggregate_max_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector IDI  = RcppDeepState_NumericVector();
  std::string IDI_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_din_validate_aggregate_max/libFuzzer_cdm_rcpp_din_validate_aggregate_max/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_IDI.qs";
  std::string I_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_din_validate_aggregate_max/libFuzzer_cdm_rcpp_din_validate_aggregate_max/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_I.qs";
  qs::c_qsave(IDI,IDI_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "IDI values: "<< IDI << std::endl;
  IntegerVector itemindex  = RcppDeepState_IntegerVector();
  std::string itemindex_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_din_validate_aggregate_max/libFuzzer_cdm_rcpp_din_validate_aggregate_max/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_itemindex.qs";
  qs::c_qsave(itemindex,itemindex_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "itemindex values: "<< itemindex << std::endl;
  IntegerVector I(1);
  I[0]  = RcppDeepState_int();
  std::string I_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_din_validate_aggregate_max/libFuzzer_cdm_rcpp_din_validate_aggregate_max/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_I.qs";
  qs::c_qsave(I,I_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "I values: "<< I << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cdm_rcpp_din_validate_aggregate_max(IDI,itemindex,I[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
