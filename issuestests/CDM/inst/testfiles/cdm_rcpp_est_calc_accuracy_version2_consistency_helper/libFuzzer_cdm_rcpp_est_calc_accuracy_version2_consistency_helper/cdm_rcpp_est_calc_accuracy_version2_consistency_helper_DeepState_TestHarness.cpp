// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cdm_rcpp_est_calc_accuracy_version2_consistency_helper_DeepState_TestHarness_generation.cpp and cdm_rcpp_est_calc_accuracy_version2_consistency_helper_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double cdm_rcpp_est_calc_accuracy_version2_consistency_helper(Rcpp::NumericMatrix post, Rcpp::IntegerVector est, int max_est_index, double N, Rcpp::NumericVector prob_theta, double eps);

TEST(CDM_deepstate_test,cdm_rcpp_est_calc_accuracy_version2_consistency_helper_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix post  = RcppDeepState_NumericMatrix();
  std::string post_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libFuzzer_cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_post.qs";
  qs::c_qsave(post,post_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "post values: "<< post << std::endl;
  IntegerVector est  = RcppDeepState_IntegerVector();
  std::string est_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libFuzzer_cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_est.qs";
  qs::c_qsave(est,est_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "est values: "<< est << std::endl;
  IntegerVector max_est_index(1);
  max_est_index[0]  = RcppDeepState_int();
  std::string max_est_index_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libFuzzer_cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_max_est_index.qs";
  qs::c_qsave(max_est_index,max_est_index_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_est_index values: "<< max_est_index << std::endl;
  NumericVector N(1);
  N[0]  = RcppDeepState_double();
  std::string N_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libFuzzer_cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N.qs";
  qs::c_qsave(N,N_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N values: "<< N << std::endl;
  NumericVector prob_theta  = RcppDeepState_NumericVector();
  std::string prob_theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libFuzzer_cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_prob_theta.qs";
  qs::c_qsave(prob_theta,prob_theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "prob_theta values: "<< prob_theta << std::endl;
  NumericVector eps(1);
  eps[0]  = RcppDeepState_double();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CDM/inst/testfiles/cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libFuzzer_cdm_rcpp_est_calc_accuracy_version2_consistency_helper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_eps.qs";
  qs::c_qsave(eps,eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cdm_rcpp_est_calc_accuracy_version2_consistency_helper(post,est,max_est_index[0],N[0],prob_theta,eps[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
