useDynLib(Qtools, .registration = TRUE)
importFrom("graphics", "abline", "lines", "mtext", "par", "plot", "points", "segments") 
importFrom("grDevices", "grey")
importFrom("Gmisc", "fastDoCall")
importFrom("glmx", "ao1")
importFrom("gtools", "combinations")
importFrom("Rcpp", "evalCpp")
importFrom("utils", "packageDescription", "getFromNamespace")

import("stats")
import("boot")
import("MASS")
import("Matrix")
import("np")
import("numDeriv")
import("quantreg")

#exportPattern("^[^\\.]")
exportPattern("^[[:alpha:]]+")

S3method(coef, midrq)
S3method(coef, rqt)
S3method(coef, rq.counts)

S3method(confint, midquantile)

S3method(fitted, midrq)
S3method(fitted, rqt)
S3method(fitted, rq.counts)

S3method(maref, rqt)
S3method(maref, rq.counts)

S3method(plot, midecdf)
S3method(plot, midq2q)
S3method(plot, midquantile)
S3method(plot, qlss)

S3method(predict, midrq)
S3method(predict, rrq)
S3method(predict, rqt)
S3method(predict, rq.counts)
S3method(predict, qlss)

S3method(print, cmidecdf)
S3method(print, dqc)
S3method(print, GOFTest)
S3method(print, midecdf)
S3method(print, midquantile)
S3method(print, midrq)
S3method(print, rrq)
S3method(print, rqt)
S3method(print, rq.counts)
S3method(print, qlss)
S3method(print, summary.midrq)
S3method(print, summary.rqt)
S3method(print, summary.rrq)

S3method(qlss, default)
S3method(qlss, formula)
S3method(qlss, numeric)

S3method(residuals, midrq)
S3method(residuals, rqt)
S3method(residuals, rq.counts)

S3method(sparsity, rq)
S3method(sparsity, rqs)
S3method(sparsity, rqt)

S3method(summary, midrq)
S3method(summary, rrq)
S3method(summary, rqt)

S3method(vcov, midrq)
