// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// speckle_generator_DeepState_TestHarness_generation.cpp and speckle_generator_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector speckle_generator(double rho, double theta, double dm, double seeing, double speckle_sigma, double wind);

TEST(specklestar_deepstate_test,speckle_generator_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/specklestar/inst/testfiles/speckle_generator/libFuzzer_speckle_generator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector theta(1);
  theta[0]  = RcppDeepState_double();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/specklestar/inst/testfiles/speckle_generator/libFuzzer_speckle_generator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector dm(1);
  dm[0]  = RcppDeepState_double();
  std::string dm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/specklestar/inst/testfiles/speckle_generator/libFuzzer_speckle_generator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dm.qs";
  qs::c_qsave(dm,dm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dm values: "<< dm << std::endl;
  NumericVector seeing(1);
  seeing[0]  = RcppDeepState_double();
  std::string seeing_t = "/home/akhila/fuzzer_packages/fuzzedpackages/specklestar/inst/testfiles/speckle_generator/libFuzzer_speckle_generator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_seeing.qs";
  qs::c_qsave(seeing,seeing_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seeing values: "<< seeing << std::endl;
  NumericVector speckle_sigma(1);
  speckle_sigma[0]  = RcppDeepState_double();
  std::string speckle_sigma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/specklestar/inst/testfiles/speckle_generator/libFuzzer_speckle_generator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_speckle_sigma.qs";
  qs::c_qsave(speckle_sigma,speckle_sigma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "speckle_sigma values: "<< speckle_sigma << std::endl;
  NumericVector wind(1);
  wind[0]  = RcppDeepState_double();
  std::string wind_t = "/home/akhila/fuzzer_packages/fuzzedpackages/specklestar/inst/testfiles/speckle_generator/libFuzzer_speckle_generator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_wind.qs";
  qs::c_qsave(wind,wind_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wind values: "<< wind << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    speckle_generator(rho[0],theta[0],dm[0],seeing[0],speckle_sigma[0],wind[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
