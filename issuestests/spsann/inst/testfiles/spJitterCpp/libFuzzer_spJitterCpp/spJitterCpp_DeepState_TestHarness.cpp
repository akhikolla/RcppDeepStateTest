// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// spJitterCpp_DeepState_TestHarness_generation.cpp and spJitterCpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector spJitterCpp(NumericMatrix x, NumericMatrix y, double xmax, double xmin, double ymax, double ymin, int idx);

TEST(spsann_deepstate_test,spJitterCpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix y  = RcppDeepState_NumericMatrix();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector xmax(1);
  xmax[0]  = RcppDeepState_double();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  std::string xmax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xmax.qs";
  qs::c_qsave(xmax,xmax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xmax values: "<< xmax << std::endl;
  NumericVector xmin(1);
  xmin[0]  = RcppDeepState_double();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  std::string xmin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xmin.qs";
  qs::c_qsave(xmin,xmin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xmin values: "<< xmin << std::endl;
  NumericVector ymax(1);
  ymax[0]  = RcppDeepState_double();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  std::string ymax_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ymax.qs";
  qs::c_qsave(ymax,ymax_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ymax values: "<< ymax << std::endl;
  NumericVector ymin(1);
  ymin[0]  = RcppDeepState_double();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  std::string ymin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ymin.qs";
  qs::c_qsave(ymin,ymin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ymin values: "<< ymin << std::endl;
  IntegerVector idx(1);
  idx[0]  = RcppDeepState_int();
  std::string idx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/spsann/inst/testfiles/spJitterCpp/libFuzzer_spJitterCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_idx.qs";
  qs::c_qsave(idx,idx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "idx values: "<< idx << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    spJitterCpp(x,y,xmax[0],xmin[0],ymax[0],ymin[0],idx[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
