// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sd_m3_DeepState_TestHarness_generation.cpp and sd_m3_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double sd_m3(int NZ, int NP, NumericMatrix W, double m);

TEST(bmotif_deepstate_test,sd_m3_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector NZ(1);
  NZ[0]  = RcppDeepState_int();
  std::string NZ_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bmotif/inst/testfiles/sd_m3/libFuzzer_sd_m3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_NZ.qs";
  qs::c_qsave(NZ,NZ_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NZ values: "<< NZ << std::endl;
  IntegerVector NP(1);
  NP[0]  = RcppDeepState_int();
  std::string NP_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bmotif/inst/testfiles/sd_m3/libFuzzer_sd_m3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_NP.qs";
  qs::c_qsave(NP,NP_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "NP values: "<< NP << std::endl;
  NumericMatrix W  = RcppDeepState_NumericMatrix();
  std::string W_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bmotif/inst/testfiles/sd_m3/libFuzzer_sd_m3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_W.qs";
  qs::c_qsave(W,W_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "W values: "<< W << std::endl;
  NumericVector m(1);
  m[0]  = RcppDeepState_double();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bmotif/inst/testfiles/sd_m3/libFuzzer_sd_m3/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m.qs";
  qs::c_qsave(m,m_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sd_m3(NZ[0],NP[0],W,m[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
