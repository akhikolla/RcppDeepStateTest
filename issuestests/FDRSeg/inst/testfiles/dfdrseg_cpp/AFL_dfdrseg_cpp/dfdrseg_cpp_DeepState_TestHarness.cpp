// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// dfdrseg_cpp_DeepState_TestHarness_generation.cpp and dfdrseg_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List dfdrseg_cpp(NumericVector Y, NumericVector q, NumericVector qm, double sd, int lag);

TEST(FDRSeg_deepstate_test,dfdrseg_cpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Y  = RcppDeepState_NumericVector();
  std::string Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FDRSeg/inst/testfiles/dfdrseg_cpp/AFL_dfdrseg_cpp/afl_inputs/" + std::to_string(t) + "_Y.qs";
  qs::c_qsave(Y,Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericVector q  = RcppDeepState_NumericVector();
  std::string q_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FDRSeg/inst/testfiles/dfdrseg_cpp/AFL_dfdrseg_cpp/afl_inputs/" + std::to_string(t) + "_q.qs";
  qs::c_qsave(q,q_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "q values: "<< q << std::endl;
  NumericVector qm  = RcppDeepState_NumericVector();
  std::string q_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FDRSeg/inst/testfiles/dfdrseg_cpp/AFL_dfdrseg_cpp/afl_inputs/" + std::to_string(t) + "_q.qs";
  std::string qm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FDRSeg/inst/testfiles/dfdrseg_cpp/AFL_dfdrseg_cpp/afl_inputs/" + std::to_string(t) + "_qm.qs";
  qs::c_qsave(qm,qm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "qm values: "<< qm << std::endl;
  NumericVector sd(1);
  sd[0]  = RcppDeepState_double();
  std::string sd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FDRSeg/inst/testfiles/dfdrseg_cpp/AFL_dfdrseg_cpp/afl_inputs/" + std::to_string(t) + "_sd.qs";
  qs::c_qsave(sd,sd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sd values: "<< sd << std::endl;
  IntegerVector lag(1);
  lag[0]  = RcppDeepState_int();
  std::string lag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FDRSeg/inst/testfiles/dfdrseg_cpp/AFL_dfdrseg_cpp/afl_inputs/" + std::to_string(t) + "_lag.qs";
  qs::c_qsave(lag,lag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lag values: "<< lag << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    dfdrseg_cpp(Y,q,qm,sd[0],lag[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
