// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bscCI
NumericVector bscCI(int n_tot, int n_suc, double conf);
RcppExport SEXP _rbscCI_bscCI(SEXP n_totSEXP, SEXP n_sucSEXP, SEXP confSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_tot(n_totSEXP);
    Rcpp::traits::input_parameter< int >::type n_suc(n_sucSEXP);
    Rcpp::traits::input_parameter< double >::type conf(confSEXP);
    rcpp_result_gen = Rcpp::wrap(bscCI(n_tot, n_suc, conf));
    return rcpp_result_gen;
END_RCPP
}
// cpCI
NumericVector cpCI(int n_tot, int n_suc, double conf);
RcppExport SEXP _rbscCI_cpCI(SEXP n_totSEXP, SEXP n_sucSEXP, SEXP confSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_tot(n_totSEXP);
    Rcpp::traits::input_parameter< int >::type n_suc(n_sucSEXP);
    Rcpp::traits::input_parameter< double >::type conf(confSEXP);
    rcpp_result_gen = Rcpp::wrap(cpCI(n_tot, n_suc, conf));
    return rcpp_result_gen;
END_RCPP
}
// bicoln_raw_export
double bicoln_raw_export(const unsigned int N, const unsigned int k);
RcppExport SEXP _rbscCI_bicoln_raw_export(SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(bicoln_raw_export(N, k));
    return rcpp_result_gen;
END_RCPP
}
// bicoln_mem
double bicoln_mem(const unsigned int N, const unsigned int k);
RcppExport SEXP _rbscCI_bicoln_mem(SEXP NSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(bicoln_mem(N, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rbscCI_bscCI", (DL_FUNC) &_rbscCI_bscCI, 3},
    {"_rbscCI_cpCI", (DL_FUNC) &_rbscCI_cpCI, 3},
    {"_rbscCI_bicoln_raw_export", (DL_FUNC) &_rbscCI_bicoln_raw_export, 2},
    {"_rbscCI_bicoln_mem", (DL_FUNC) &_rbscCI_bicoln_mem, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rbscCI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
