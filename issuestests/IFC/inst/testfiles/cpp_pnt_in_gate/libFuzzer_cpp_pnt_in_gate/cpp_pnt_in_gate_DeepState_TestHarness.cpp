// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cpp_pnt_in_gate_DeepState_TestHarness_generation.cpp and cpp_pnt_in_gate_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::LogicalVector cpp_pnt_in_gate(const Rcpp::NumericMatrix pnts, const Rcpp::NumericMatrix gate, const int algorithm, const double epsilon);

TEST(IFC_deepstate_test,cpp_pnt_in_gate_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix pnts  = RcppDeepState_NumericMatrix();
  std::string pnts_t = "/home/akhila/fuzzer_packages/fuzzedpackages/IFC/inst/testfiles/cpp_pnt_in_gate/libFuzzer_cpp_pnt_in_gate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_pnts.qs";
  qs::c_qsave(pnts,pnts_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pnts values: "<< pnts << std::endl;
  NumericMatrix gate  = RcppDeepState_NumericMatrix();
  std::string gate_t = "/home/akhila/fuzzer_packages/fuzzedpackages/IFC/inst/testfiles/cpp_pnt_in_gate/libFuzzer_cpp_pnt_in_gate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gate.qs";
  qs::c_qsave(gate,gate_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gate values: "<< gate << std::endl;
  IntegerVector algorithm(1);
  algorithm[0]  = RcppDeepState_int();
  std::string algorithm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/IFC/inst/testfiles/cpp_pnt_in_gate/libFuzzer_cpp_pnt_in_gate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_algorithm.qs";
  qs::c_qsave(algorithm,algorithm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "algorithm values: "<< algorithm << std::endl;
  NumericVector epsilon(1);
  epsilon[0]  = RcppDeepState_double();
  std::string epsilon_t = "/home/akhila/fuzzer_packages/fuzzedpackages/IFC/inst/testfiles/cpp_pnt_in_gate/libFuzzer_cpp_pnt_in_gate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_epsilon.qs";
  qs::c_qsave(epsilon,epsilon_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "epsilon values: "<< epsilon << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cpp_pnt_in_gate(pnts,gate,algorithm[0],epsilon[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
