// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// erode_rect_DeepState_TestHarness_generation.cpp and erode_rect_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector erode_rect(NumericVector im, int sx, int sy, int sz);

TEST(imager_deepstate_test,erode_rect_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector im  = RcppDeepState_NumericVector();
  std::string im_t = "/home/akhila/fuzzer_packages/fuzzedpackages/imager/inst/testfiles/erode_rect/libFuzzer_erode_rect/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_im.qs";
  qs::c_qsave(im,im_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "im values: "<< im << std::endl;
  IntegerVector sx(1);
  sx[0]  = RcppDeepState_int();
  std::string sx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/imager/inst/testfiles/erode_rect/libFuzzer_erode_rect/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sx.qs";
  qs::c_qsave(sx,sx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sx values: "<< sx << std::endl;
  IntegerVector sy(1);
  sy[0]  = RcppDeepState_int();
  std::string sy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/imager/inst/testfiles/erode_rect/libFuzzer_erode_rect/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sy.qs";
  qs::c_qsave(sy,sy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sy values: "<< sy << std::endl;
  IntegerVector sz(1);
  sz[0]  = RcppDeepState_int();
  std::string sz_t = "/home/akhila/fuzzer_packages/fuzzedpackages/imager/inst/testfiles/erode_rect/libFuzzer_erode_rect/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sz.qs";
  qs::c_qsave(sz,sz_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sz values: "<< sz << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    erode_rect(im,sx[0],sy[0],sz[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
