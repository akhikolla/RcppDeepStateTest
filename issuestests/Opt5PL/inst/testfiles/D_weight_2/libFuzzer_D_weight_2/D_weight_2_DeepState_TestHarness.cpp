// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// D_weight_2_DeepState_TestHarness_generation.cpp and D_weight_2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector D_weight_2(NumericVector q, NumericVector W, NumericVector T1, NumericVector T2, NumericVector T3, NumericVector X, NumericMatrix inv1, NumericMatrix inv2, NumericMatrix inv3);

TEST(Opt5PL_deepstate_test,D_weight_2_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector q  = RcppDeepState_NumericVector();
  std::string q_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_q.qs";
  qs::c_qsave(q,q_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "q values: "<< q << std::endl;
  NumericVector W  = RcppDeepState_NumericVector();
  std::string W_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_W.qs";
  qs::c_qsave(W,W_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "W values: "<< W << std::endl;
  NumericVector T1  = RcppDeepState_NumericVector();
  std::string T1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_T1.qs";
  qs::c_qsave(T1,T1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T1 values: "<< T1 << std::endl;
  NumericVector T2  = RcppDeepState_NumericVector();
  std::string T2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_T2.qs";
  qs::c_qsave(T2,T2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T2 values: "<< T2 << std::endl;
  NumericVector T3  = RcppDeepState_NumericVector();
  std::string T3_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_T3.qs";
  qs::c_qsave(T3,T3_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T3 values: "<< T3 << std::endl;
  NumericVector X  = RcppDeepState_NumericVector();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericMatrix inv1  = RcppDeepState_NumericMatrix();
  std::string inv1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_inv1.qs";
  qs::c_qsave(inv1,inv1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inv1 values: "<< inv1 << std::endl;
  NumericMatrix inv2  = RcppDeepState_NumericMatrix();
  std::string inv2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_inv2.qs";
  qs::c_qsave(inv2,inv2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inv2 values: "<< inv2 << std::endl;
  NumericMatrix inv3  = RcppDeepState_NumericMatrix();
  std::string inv3_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Opt5PL/inst/testfiles/D_weight_2/libFuzzer_D_weight_2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_inv3.qs";
  qs::c_qsave(inv3,inv3_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "inv3 values: "<< inv3 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    D_weight_2(q,W,T1,T2,T3,X,inv1,inv2,inv3);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
