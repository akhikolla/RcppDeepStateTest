// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// nodeVars_DeepState_TestHarness_generation.cpp and nodeVars_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector nodeVars(IntegerVector varnodes, int nrnodes, int p, IntegerVector parents, IntegerVector idcskeep, IntegerVector nodect, int rowoffset, IntegerVector nodevars);

TEST(iRF_deepstate_test,nodeVars_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector varnodes  = RcppDeepState_IntegerVector();
  std::string varnodes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_varnodes.qs";
  qs::c_qsave(varnodes,varnodes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "varnodes values: "<< varnodes << std::endl;
  IntegerVector nrnodes(1);
  nrnodes[0]  = RcppDeepState_int();
  std::string nrnodes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nrnodes.qs";
  qs::c_qsave(nrnodes,nrnodes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nrnodes values: "<< nrnodes << std::endl;
  IntegerVector p(1);
  p[0]  = RcppDeepState_int();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(p,p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  IntegerVector parents  = RcppDeepState_IntegerVector();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  std::string parents_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_parents.qs";
  qs::c_qsave(parents,parents_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parents values: "<< parents << std::endl;
  IntegerVector idcskeep  = RcppDeepState_IntegerVector();
  std::string idcskeep_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_idcskeep.qs";
  qs::c_qsave(idcskeep,idcskeep_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "idcskeep values: "<< idcskeep << std::endl;
  IntegerVector nodect  = RcppDeepState_IntegerVector();
  std::string nodect_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nodect.qs";
  qs::c_qsave(nodect,nodect_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nodect values: "<< nodect << std::endl;
  IntegerVector rowoffset(1);
  rowoffset[0]  = RcppDeepState_int();
  std::string rowoffset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rowoffset.qs";
  qs::c_qsave(rowoffset,rowoffset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rowoffset values: "<< rowoffset << std::endl;
  IntegerVector nodevars  = RcppDeepState_IntegerVector();
  std::string nodevars_t = "/home/akhila/fuzzer_packages/fuzzedpackages/iRF/inst/testfiles/nodeVars/libFuzzer_nodeVars/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nodevars.qs";
  qs::c_qsave(nodevars,nodevars_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nodevars values: "<< nodevars << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    nodeVars(varnodes,nrnodes[0],p[0],parents,idcskeep,nodect,rowoffset[0],nodevars);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
