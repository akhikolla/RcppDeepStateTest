// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// power_curve_DeepState_TestHarness_generation.cpp and power_curve_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double power_curve(double bm, double ws, double wa, double tas, double g, double airDensity, double ipf, double bdc, double ppc);

TEST(FlyingR_deepstate_test,power_curve_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector bm(1);
  bm[0]  = RcppDeepState_double();
  std::string bm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_bm.qs";
  qs::c_qsave(bm,bm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bm values: "<< bm << std::endl;
  NumericVector ws(1);
  ws[0]  = RcppDeepState_double();
  std::string ws_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_ws.qs";
  qs::c_qsave(ws,ws_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ws values: "<< ws << std::endl;
  NumericVector wa(1);
  wa[0]  = RcppDeepState_double();
  std::string wa_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_wa.qs";
  qs::c_qsave(wa,wa_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "wa values: "<< wa << std::endl;
  NumericVector tas(1);
  tas[0]  = RcppDeepState_double();
  std::string tas_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_tas.qs";
  qs::c_qsave(tas,tas_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tas values: "<< tas << std::endl;
  NumericVector g(1);
  g[0]  = RcppDeepState_double();
  std::string g_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_g.qs";
  qs::c_qsave(g,g_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "g values: "<< g << std::endl;
  NumericVector airDensity(1);
  airDensity[0]  = RcppDeepState_double();
  std::string airDensity_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_airDensity.qs";
  qs::c_qsave(airDensity,airDensity_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "airDensity values: "<< airDensity << std::endl;
  NumericVector ipf(1);
  ipf[0]  = RcppDeepState_double();
  std::string ipf_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_ipf.qs";
  qs::c_qsave(ipf,ipf_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ipf values: "<< ipf << std::endl;
  NumericVector bdc(1);
  bdc[0]  = RcppDeepState_double();
  std::string bdc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_bdc.qs";
  qs::c_qsave(bdc,bdc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bdc values: "<< bdc << std::endl;
  NumericVector ppc(1);
  ppc[0]  = RcppDeepState_double();
  std::string ppc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FlyingR/inst/testfiles/power_curve/AFL_power_curve/afl_inputs/" + std::to_string(t) + "_ppc.qs";
  qs::c_qsave(ppc,ppc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ppc values: "<< ppc << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    power_curve(bm[0],ws[0],wa[0],tas[0],g[0],airDensity[0],ipf[0],bdc[0],ppc[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
