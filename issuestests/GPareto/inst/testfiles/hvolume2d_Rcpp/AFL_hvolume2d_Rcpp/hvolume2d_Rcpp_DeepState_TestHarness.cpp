// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// hvolume2d_Rcpp_DeepState_TestHarness_generation.cpp and hvolume2d_Rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double hvolume2d_Rcpp(NumericMatrix S, double x1, double x2);

TEST(GPareto_deepstate_test,hvolume2d_Rcpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix S  = RcppDeepState_NumericMatrix();
  std::string S_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GPareto/inst/testfiles/hvolume2d_Rcpp/AFL_hvolume2d_Rcpp/afl_inputs/" + std::to_string(t) + "_S.qs";
  qs::c_qsave(S,S_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "S values: "<< S << std::endl;
  NumericVector x1(1);
  x1[0]  = RcppDeepState_double();
  std::string x1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GPareto/inst/testfiles/hvolume2d_Rcpp/AFL_hvolume2d_Rcpp/afl_inputs/" + std::to_string(t) + "_x1.qs";
  qs::c_qsave(x1,x1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x1 values: "<< x1 << std::endl;
  NumericVector x2(1);
  x2[0]  = RcppDeepState_double();
  std::string x2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GPareto/inst/testfiles/hvolume2d_Rcpp/AFL_hvolume2d_Rcpp/afl_inputs/" + std::to_string(t) + "_x2.qs";
  qs::c_qsave(x2,x2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x2 values: "<< x2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    hvolume2d_Rcpp(S,x1[0],x2[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
