// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// EHI_2d_wrap_Rcpp_DeepState_TestHarness_generation.cpp and EHI_2d_wrap_Rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector EHI_2d_wrap_Rcpp(NumericMatrix P, NumericVector r, NumericMatrix mu, NumericMatrix s);

TEST(GPareto_deepstate_test,EHI_2d_wrap_Rcpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix P  = RcppDeepState_NumericMatrix();
  std::string P_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GPareto/inst/testfiles/EHI_2d_wrap_Rcpp/libFuzzer_EHI_2d_wrap_Rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_P.qs";
  qs::c_qsave(P,P_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "P values: "<< P << std::endl;
  NumericVector r  = RcppDeepState_NumericVector();
  std::string r_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GPareto/inst/testfiles/EHI_2d_wrap_Rcpp/libFuzzer_EHI_2d_wrap_Rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_r.qs";
  qs::c_qsave(r,r_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "r values: "<< r << std::endl;
  NumericMatrix mu  = RcppDeepState_NumericMatrix();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GPareto/inst/testfiles/EHI_2d_wrap_Rcpp/libFuzzer_EHI_2d_wrap_Rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericMatrix s  = RcppDeepState_NumericMatrix();
  std::string s_t = "/home/akhila/fuzzer_packages/fuzzedpackages/GPareto/inst/testfiles/EHI_2d_wrap_Rcpp/libFuzzer_EHI_2d_wrap_Rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_s.qs";
  qs::c_qsave(s,s_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "s values: "<< s << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    EHI_2d_wrap_Rcpp(P,r,mu,s);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
