// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// COMP_Q_VECT_DeepState_TestHarness_generation.cpp and COMP_Q_VECT_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector COMP_Q_VECT(NumericVector x, NumericVector p, NumericVector vp);

TEST(HistDAWass_deepstate_test,COMP_Q_VECT_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/HistDAWass/inst/testfiles/COMP_Q_VECT/libFuzzer_COMP_Q_VECT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector p  = RcppDeepState_NumericVector();
  std::string p_t = "/home/akhila/fuzzer_packages/fuzzedpackages/HistDAWass/inst/testfiles/COMP_Q_VECT/libFuzzer_COMP_Q_VECT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_p.qs";
  qs::c_qsave(p,p_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "p values: "<< p << std::endl;
  NumericVector vp  = RcppDeepState_NumericVector();
  std::string vp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/HistDAWass/inst/testfiles/COMP_Q_VECT/libFuzzer_COMP_Q_VECT/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_vp.qs";
  qs::c_qsave(vp,vp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "vp values: "<< vp << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    COMP_Q_VECT(x,p,vp);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
