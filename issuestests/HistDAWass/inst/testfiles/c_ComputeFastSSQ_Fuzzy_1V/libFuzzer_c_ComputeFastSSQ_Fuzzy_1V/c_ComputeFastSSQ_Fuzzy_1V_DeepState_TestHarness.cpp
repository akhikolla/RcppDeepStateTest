// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// c_ComputeFastSSQ_Fuzzy_1V_DeepState_TestHarness_generation.cpp and c_ComputeFastSSQ_Fuzzy_1V_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List c_ComputeFastSSQ_Fuzzy_1V(NumericMatrix M, NumericVector memb, double m);

TEST(HistDAWass_deepstate_test,c_ComputeFastSSQ_Fuzzy_1V_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix M  = RcppDeepState_NumericMatrix();
  std::string M_t = "/home/akhila/fuzzer_packages/fuzzedpackages/HistDAWass/inst/testfiles/c_ComputeFastSSQ_Fuzzy_1V/libFuzzer_c_ComputeFastSSQ_Fuzzy_1V/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_M.qs";
  qs::c_qsave(M,M_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "M values: "<< M << std::endl;
  NumericVector memb  = RcppDeepState_NumericVector();
  std::string memb_t = "/home/akhila/fuzzer_packages/fuzzedpackages/HistDAWass/inst/testfiles/c_ComputeFastSSQ_Fuzzy_1V/libFuzzer_c_ComputeFastSSQ_Fuzzy_1V/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_memb.qs";
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/HistDAWass/inst/testfiles/c_ComputeFastSSQ_Fuzzy_1V/libFuzzer_c_ComputeFastSSQ_Fuzzy_1V/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m.qs";
  qs::c_qsave(memb,memb_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "memb values: "<< memb << std::endl;
  NumericVector m(1);
  m[0]  = RcppDeepState_double();
  std::string m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/HistDAWass/inst/testfiles/c_ComputeFastSSQ_Fuzzy_1V/libFuzzer_c_ComputeFastSSQ_Fuzzy_1V/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m.qs";
  qs::c_qsave(m,m_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m values: "<< m << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    c_ComputeFastSSQ_Fuzzy_1V(M,memb,m[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
