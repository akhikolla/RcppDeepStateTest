// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// hermite_integral_val_upper_DeepState_TestHarness_generation.cpp and hermite_integral_val_upper_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix hermite_integral_val_upper(int N, NumericVector x, NumericMatrix hermite_function_mat);

TEST(hermiter_deepstate_test,hermite_integral_val_upper_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector N(1);
  N[0]  = RcppDeepState_int();
  std::string N_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hermiter/inst/testfiles/hermite_integral_val_upper/libFuzzer_hermite_integral_val_upper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N.qs";
  qs::c_qsave(N,N_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N values: "<< N << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hermiter/inst/testfiles/hermite_integral_val_upper/libFuzzer_hermite_integral_val_upper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericMatrix hermite_function_mat  = RcppDeepState_NumericMatrix();
  std::string hermite_function_mat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hermiter/inst/testfiles/hermite_integral_val_upper/libFuzzer_hermite_integral_val_upper/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_hermite_function_mat.qs";
  qs::c_qsave(hermite_function_mat,hermite_function_mat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "hermite_function_mat values: "<< hermite_function_mat << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    hermite_integral_val_upper(N[0],x,hermite_function_mat);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
