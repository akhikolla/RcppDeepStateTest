// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// refrac_extended_DeepState_TestHarness_generation.cpp and refrac_extended_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List refrac_extended(double InAlt, double height, double atpress, double attemp, double lapse_rate, int calc_flag);

TEST(swephR_deepstate_test,refrac_extended_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector InAlt(1);
  InAlt[0]  = RcppDeepState_double();
  std::string InAlt_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/refrac_extended/libFuzzer_refrac_extended/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_InAlt.qs";
  qs::c_qsave(InAlt,InAlt_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "InAlt values: "<< InAlt << std::endl;
  NumericVector height(1);
  height[0]  = RcppDeepState_double();
  std::string height_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/refrac_extended/libFuzzer_refrac_extended/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_height.qs";
  qs::c_qsave(height,height_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "height values: "<< height << std::endl;
  NumericVector atpress(1);
  atpress[0]  = RcppDeepState_double();
  std::string atpress_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/refrac_extended/libFuzzer_refrac_extended/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_atpress.qs";
  qs::c_qsave(atpress,atpress_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "atpress values: "<< atpress << std::endl;
  NumericVector attemp(1);
  attemp[0]  = RcppDeepState_double();
  std::string attemp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/refrac_extended/libFuzzer_refrac_extended/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_attemp.qs";
  qs::c_qsave(attemp,attemp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "attemp values: "<< attemp << std::endl;
  NumericVector lapse_rate(1);
  lapse_rate[0]  = RcppDeepState_double();
  std::string lapse_rate_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/refrac_extended/libFuzzer_refrac_extended/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lapse_rate.qs";
  qs::c_qsave(lapse_rate,lapse_rate_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lapse_rate values: "<< lapse_rate << std::endl;
  IntegerVector calc_flag(1);
  calc_flag[0]  = RcppDeepState_int();
  std::string calc_flag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/refrac_extended/libFuzzer_refrac_extended/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_calc_flag.qs";
  qs::c_qsave(calc_flag,calc_flag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "calc_flag values: "<< calc_flag << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    refrac_extended(InAlt[0],height[0],atpress[0],attemp[0],lapse_rate[0],calc_flag[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
