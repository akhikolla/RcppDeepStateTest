// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// heliacal_angle_DeepState_TestHarness_generation.cpp and heliacal_angle_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List heliacal_angle(double jd_ut, Rcpp::NumericVector dgeo, Rcpp::NumericVector datm, Rcpp::NumericVector dobs, int helflag, double mag, double AziO, double AziS, double AziM, double AltM);

TEST(swephR_deepstate_test,heliacal_angle_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector jd_ut(1);
  jd_ut[0]  = RcppDeepState_double();
  std::string jd_ut_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_jd_ut.qs";
  qs::c_qsave(jd_ut,jd_ut_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "jd_ut values: "<< jd_ut << std::endl;
  NumericVector dgeo  = RcppDeepState_NumericVector();
  std::string dgeo_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_dgeo.qs";
  qs::c_qsave(dgeo,dgeo_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dgeo values: "<< dgeo << std::endl;
  NumericVector datm  = RcppDeepState_NumericVector();
  std::string datm_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_datm.qs";
  qs::c_qsave(datm,datm_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "datm values: "<< datm << std::endl;
  NumericVector dobs  = RcppDeepState_NumericVector();
  std::string dobs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_dobs.qs";
  qs::c_qsave(dobs,dobs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dobs values: "<< dobs << std::endl;
  IntegerVector helflag(1);
  helflag[0]  = RcppDeepState_int();
  std::string helflag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_helflag.qs";
  qs::c_qsave(helflag,helflag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "helflag values: "<< helflag << std::endl;
  NumericVector mag(1);
  mag[0]  = RcppDeepState_double();
  std::string mag_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_mag.qs";
  qs::c_qsave(mag,mag_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mag values: "<< mag << std::endl;
  NumericVector AziO(1);
  AziO[0]  = RcppDeepState_double();
  std::string AziO_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_AziO.qs";
  qs::c_qsave(AziO,AziO_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AziO values: "<< AziO << std::endl;
  NumericVector AziS(1);
  AziS[0]  = RcppDeepState_double();
  std::string AziS_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_AziS.qs";
  qs::c_qsave(AziS,AziS_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AziS values: "<< AziS << std::endl;
  NumericVector AziM(1);
  AziM[0]  = RcppDeepState_double();
  std::string AziM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_AziM.qs";
  qs::c_qsave(AziM,AziM_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AziM values: "<< AziM << std::endl;
  NumericVector AltM(1);
  AltM[0]  = RcppDeepState_double();
  std::string AltM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/swephR/inst/testfiles/heliacal_angle/AFL_heliacal_angle/afl_inputs/" + std::to_string(t) + "_AltM.qs";
  qs::c_qsave(AltM,AltM_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "AltM values: "<< AltM << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    heliacal_angle(jd_ut[0],dgeo,datm,dobs,helflag[0],mag[0],AziO[0],AziS[0],AziM[0],AltM[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
