// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// splitt2_DeepState_TestHarness_generation.cpp and splitt2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List splitt2(NumericMatrix X, NumericMatrix Y, int m_feature, NumericVector Index, NumericMatrix Inv_Cov_Y, int Command, NumericVector ff);

TEST(MultivariateRandomForest_deepstate_test,splitt2_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MultivariateRandomForest/inst/testfiles/splitt2/libFuzzer_splitt2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericMatrix Y  = RcppDeepState_NumericMatrix();
  std::string Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MultivariateRandomForest/inst/testfiles/splitt2/libFuzzer_splitt2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Y.qs";
  qs::c_qsave(Y,Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  IntegerVector m_feature(1);
  m_feature[0]  = RcppDeepState_int();
  std::string m_feature_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MultivariateRandomForest/inst/testfiles/splitt2/libFuzzer_splitt2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_m_feature.qs";
  qs::c_qsave(m_feature,m_feature_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "m_feature values: "<< m_feature << std::endl;
  NumericVector Index  = RcppDeepState_NumericVector();
  std::string Index_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MultivariateRandomForest/inst/testfiles/splitt2/libFuzzer_splitt2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Index.qs";
  qs::c_qsave(Index,Index_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Index values: "<< Index << std::endl;
  NumericMatrix Inv_Cov_Y  = RcppDeepState_NumericMatrix();
  std::string Inv_Cov_Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MultivariateRandomForest/inst/testfiles/splitt2/libFuzzer_splitt2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Inv_Cov_Y.qs";
  qs::c_qsave(Inv_Cov_Y,Inv_Cov_Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Inv_Cov_Y values: "<< Inv_Cov_Y << std::endl;
  IntegerVector Command(1);
  Command[0]  = RcppDeepState_int();
  std::string Command_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MultivariateRandomForest/inst/testfiles/splitt2/libFuzzer_splitt2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Command.qs";
  qs::c_qsave(Command,Command_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Command values: "<< Command << std::endl;
  NumericVector ff  = RcppDeepState_NumericVector();
  std::string ff_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MultivariateRandomForest/inst/testfiles/splitt2/libFuzzer_splitt2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ff.qs";
  qs::c_qsave(ff,ff_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ff values: "<< ff << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    splitt2(X,Y,m_feature[0],Index,Inv_Cov_Y,Command[0],ff);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
