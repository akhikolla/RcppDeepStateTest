// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// latentX_calc_cpp_DeepState_TestHarness_generation.cpp and latentX_calc_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector latentX_calc_cpp(NumericVector parAlpha, NumericVector epsilonT, int ndays);

TEST(foreSIGHT_deepstate_test,latentX_calc_cpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector parAlpha  = RcppDeepState_NumericVector();
  std::string parAlpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/foreSIGHT/inst/testfiles/latentX_calc_cpp/libFuzzer_latentX_calc_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_parAlpha.qs";
  qs::c_qsave(parAlpha,parAlpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parAlpha values: "<< parAlpha << std::endl;
  NumericVector epsilonT  = RcppDeepState_NumericVector();
  std::string epsilonT_t = "/home/akhila/fuzzer_packages/fuzzedpackages/foreSIGHT/inst/testfiles/latentX_calc_cpp/libFuzzer_latentX_calc_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_epsilonT.qs";
  qs::c_qsave(epsilonT,epsilonT_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "epsilonT values: "<< epsilonT << std::endl;
  IntegerVector ndays(1);
  ndays[0]  = RcppDeepState_int();
  std::string ndays_t = "/home/akhila/fuzzer_packages/fuzzedpackages/foreSIGHT/inst/testfiles/latentX_calc_cpp/libFuzzer_latentX_calc_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ndays.qs";
  qs::c_qsave(ndays,ndays_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ndays values: "<< ndays << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    latentX_calc_cpp(parAlpha,epsilonT,ndays[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
