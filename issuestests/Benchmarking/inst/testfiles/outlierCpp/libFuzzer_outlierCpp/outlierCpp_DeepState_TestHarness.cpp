// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// outlierCpp_DeepState_TestHarness_generation.cpp and outlierCpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

void outlierCpp(const int K, const int R, NumericMatrix xy, NumericMatrix ratio, NumericMatrix imat, NumericVector rmin);

TEST(Benchmarking_deepstate_test,outlierCpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector K(1);
  K[0]  = RcppDeepState_int();
  std::string K_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/outlierCpp/libFuzzer_outlierCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_K.qs";
  qs::c_qsave(K,K_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K values: "<< K << std::endl;
  IntegerVector R(1);
  R[0]  = RcppDeepState_int();
  std::string R_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/outlierCpp/libFuzzer_outlierCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_R.qs";
  qs::c_qsave(R,R_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "R values: "<< R << std::endl;
  NumericMatrix xy  = RcppDeepState_NumericMatrix();
  std::string xy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/outlierCpp/libFuzzer_outlierCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xy.qs";
  qs::c_qsave(xy,xy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xy values: "<< xy << std::endl;
  NumericMatrix ratio  = RcppDeepState_NumericMatrix();
  std::string ratio_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/outlierCpp/libFuzzer_outlierCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ratio.qs";
  qs::c_qsave(ratio,ratio_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ratio values: "<< ratio << std::endl;
  NumericMatrix imat  = RcppDeepState_NumericMatrix();
  std::string imat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/outlierCpp/libFuzzer_outlierCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_imat.qs";
  qs::c_qsave(imat,imat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "imat values: "<< imat << std::endl;
  NumericVector rmin  = RcppDeepState_NumericVector();
  std::string rmin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/outlierCpp/libFuzzer_outlierCpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rmin.qs";
  qs::c_qsave(rmin,rmin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rmin values: "<< rmin << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    outlierCpp(K[0],R[0],xy,ratio,imat,rmin);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
