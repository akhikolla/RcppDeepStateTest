// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// det_downdate_DeepState_TestHarness_generation.cpp and det_downdate_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double det_downdate(const NumericMatrix A, const NumericVector v, const double det);

TEST(Benchmarking_deepstate_test,det_downdate_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix A  = RcppDeepState_NumericMatrix();
  std::string A_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/det_downdate/libFuzzer_det_downdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_A.qs";
  qs::c_qsave(A,A_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "A values: "<< A << std::endl;
  NumericVector v  = RcppDeepState_NumericVector();
  std::string v_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/det_downdate/libFuzzer_det_downdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_v.qs";
  qs::c_qsave(v,v_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "v values: "<< v << std::endl;
  NumericVector det(1);
  det[0]  = RcppDeepState_double();
  std::string det_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Benchmarking/inst/testfiles/det_downdate/libFuzzer_det_downdate/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_det.qs";
  qs::c_qsave(det,det_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "det values: "<< det << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    det_downdate(A,v,det[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
