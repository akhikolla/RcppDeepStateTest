// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// betaEst_DeepState_TestHarness_generation.cpp and betaEst_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List betaEst(Rcpp::NumericVector fam_group, Rcpp::NumericVector alpha, Rcpp::NumericVector dtime, Rcpp::NumericVector delta, Rcpp::NumericVector g, double var, double lower, double upper);

TEST(lclGWAS_deepstate_test,betaEst_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector fam_group  = RcppDeepState_NumericVector();
  std::string fam_group_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_fam_group.qs";
  qs::c_qsave(fam_group,fam_group_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "fam_group values: "<< fam_group << std::endl;
  NumericVector alpha  = RcppDeepState_NumericVector();
  std::string alpha_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_alpha.qs";
  qs::c_qsave(alpha,alpha_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha values: "<< alpha << std::endl;
  NumericVector dtime  = RcppDeepState_NumericVector();
  std::string dtime_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_dtime.qs";
  qs::c_qsave(dtime,dtime_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dtime values: "<< dtime << std::endl;
  NumericVector delta  = RcppDeepState_NumericVector();
  std::string delta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_delta.qs";
  qs::c_qsave(delta,delta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "delta values: "<< delta << std::endl;
  NumericVector g  = RcppDeepState_NumericVector();
  std::string g_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_g.qs";
  qs::c_qsave(g,g_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "g values: "<< g << std::endl;
  NumericVector var(1);
  var[0]  = RcppDeepState_double();
  std::string var_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_var.qs";
  qs::c_qsave(var,var_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "var values: "<< var << std::endl;
  NumericVector lower(1);
  lower[0]  = RcppDeepState_double();
  std::string lower_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_lower.qs";
  qs::c_qsave(lower,lower_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lower values: "<< lower << std::endl;
  NumericVector upper(1);
  upper[0]  = RcppDeepState_double();
  std::string upper_t = "/home/akhila/fuzzer_packages/fuzzedpackages/lclGWAS/inst/testfiles/betaEst/AFL_betaEst/afl_inputs/" + std::to_string(t) + "_upper.qs";
  qs::c_qsave(upper,upper_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "upper values: "<< upper << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    betaEst(fam_group,alpha,dtime,delta,g,var[0],lower[0],upper[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
