// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// triFind_DeepState_TestHarness_generation.cpp and triFind_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List triFind(int nT, NumericVector xT, NumericVector yT, IntegerVector i1, IntegerVector i2, IntegerVector i3, NumericVector x, NumericVector y);

TEST(interp_deepstate_test,triFind_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector nT(1);
  nT[0]  = RcppDeepState_int();
  std::string nT_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nT.qs";
  qs::c_qsave(nT,nT_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nT values: "<< nT << std::endl;
  NumericVector xT  = RcppDeepState_NumericVector();
  std::string xT_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xT.qs";
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(xT,xT_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xT values: "<< xT << std::endl;
  NumericVector yT  = RcppDeepState_NumericVector();
  std::string yT_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_yT.qs";
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(yT,yT_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "yT values: "<< yT << std::endl;
  IntegerVector i1  = RcppDeepState_IntegerVector();
  std::string i1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_i1.qs";
  qs::c_qsave(i1,i1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "i1 values: "<< i1 << std::endl;
  IntegerVector i2  = RcppDeepState_IntegerVector();
  std::string i2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_i2.qs";
  qs::c_qsave(i2,i2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "i2 values: "<< i2 << std::endl;
  IntegerVector i3  = RcppDeepState_IntegerVector();
  std::string i3_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_i3.qs";
  qs::c_qsave(i3,i3_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "i3 values: "<< i3 << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/interp/inst/testfiles/triFind/libFuzzer_triFind/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    triFind(nT[0],xT,yT,i1,i2,i3,x,y);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
