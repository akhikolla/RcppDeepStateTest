// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_fastmatclcranddclcr_DeepState_TestHarness_generation.cpp and rcpp_fastmatclcranddclcr_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

void rcpp_fastmatclcranddclcr(NumericMatrix I, NumericVector w, NumericMatrix MSEmat, NumericMatrix dMSEmat, NumericVector S, NumericMatrix dS, int maxlevel, int numpara);

TEST(CGGP_deepstate_test,rcpp_fastmatclcranddclcr_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix I  = RcppDeepState_NumericMatrix();
  std::string I_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_I.qs";
  qs::c_qsave(I,I_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "I values: "<< I << std::endl;
  NumericVector w  = RcppDeepState_NumericVector();
  std::string w_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_w.qs";
  qs::c_qsave(w,w_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "w values: "<< w << std::endl;
  NumericMatrix MSEmat  = RcppDeepState_NumericMatrix();
  std::string MSEmat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_MSEmat.qs";
  qs::c_qsave(MSEmat,MSEmat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MSEmat values: "<< MSEmat << std::endl;
  NumericMatrix dMSEmat  = RcppDeepState_NumericMatrix();
  std::string dMSEmat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dMSEmat.qs";
  qs::c_qsave(dMSEmat,dMSEmat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dMSEmat values: "<< dMSEmat << std::endl;
  NumericVector S  = RcppDeepState_NumericVector();
  std::string S_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_S.qs";
  qs::c_qsave(S,S_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "S values: "<< S << std::endl;
  NumericMatrix dS  = RcppDeepState_NumericMatrix();
  std::string dS_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_dS.qs";
  qs::c_qsave(dS,dS_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "dS values: "<< dS << std::endl;
  IntegerVector maxlevel(1);
  maxlevel[0]  = RcppDeepState_int();
  std::string maxlevel_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxlevel.qs";
  qs::c_qsave(maxlevel,maxlevel_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxlevel values: "<< maxlevel << std::endl;
  IntegerVector numpara(1);
  numpara[0]  = RcppDeepState_int();
  std::string numpara_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CGGP/inst/testfiles/rcpp_fastmatclcranddclcr/libFuzzer_rcpp_fastmatclcranddclcr/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_numpara.qs";
  qs::c_qsave(numpara,numpara_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "numpara values: "<< numpara << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_fastmatclcranddclcr(I,w,MSEmat,dMSEmat,S,dS,maxlevel[0],numpara[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
