// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// rcpp_encode_polyline_byrow_DeepState_TestHarness_generation.cpp and rcpp_encode_polyline_byrow_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

std::vector<std::string> rcpp_encode_polyline_byrow(Rcpp::NumericVector longitude, Rcpp::NumericVector latitude);

TEST(googlePolylines_deepstate_test,rcpp_encode_polyline_byrow_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector longitude  = RcppDeepState_NumericVector();
  std::string longitude_t = "/home/akhila/fuzzer_packages/fuzzedpackages/googlePolylines/inst/testfiles/rcpp_encode_polyline_byrow/AFL_rcpp_encode_polyline_byrow/afl_inputs/" + std::to_string(t) + "_longitude.qs";
  qs::c_qsave(longitude,longitude_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "longitude values: "<< longitude << std::endl;
  NumericVector latitude  = RcppDeepState_NumericVector();
  std::string latitude_t = "/home/akhila/fuzzer_packages/fuzzedpackages/googlePolylines/inst/testfiles/rcpp_encode_polyline_byrow/AFL_rcpp_encode_polyline_byrow/afl_inputs/" + std::to_string(t) + "_latitude.qs";
  qs::c_qsave(latitude,latitude_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "latitude values: "<< latitude << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    rcpp_encode_polyline_byrow(longitude,latitude);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
