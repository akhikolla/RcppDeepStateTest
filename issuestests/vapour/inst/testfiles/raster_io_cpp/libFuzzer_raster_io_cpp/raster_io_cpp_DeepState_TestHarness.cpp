// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// raster_io_cpp_DeepState_TestHarness_generation.cpp and raster_io_cpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List raster_io_cpp(CharacterVector filename, IntegerVector window, IntegerVector band, CharacterVector resample);

TEST(vapour_deepstate_test,raster_io_cpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  CharacterVector filename  = RcppDeepState_CharacterVector();
  std::string filename_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vapour/inst/testfiles/raster_io_cpp/libFuzzer_raster_io_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_filename.qs";
  qs::c_qsave(filename,filename_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "filename values: "<< filename << std::endl;
  IntegerVector window  = RcppDeepState_IntegerVector();
  std::string window_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vapour/inst/testfiles/raster_io_cpp/libFuzzer_raster_io_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_window.qs";
  qs::c_qsave(window,window_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "window values: "<< window << std::endl;
  IntegerVector band  = RcppDeepState_IntegerVector();
  std::string band_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vapour/inst/testfiles/raster_io_cpp/libFuzzer_raster_io_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_band.qs";
  qs::c_qsave(band,band_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "band values: "<< band << std::endl;
  CharacterVector resample  = RcppDeepState_CharacterVector();
  std::string resample_t = "/home/akhila/fuzzer_packages/fuzzedpackages/vapour/inst/testfiles/raster_io_cpp/libFuzzer_raster_io_cpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_resample.qs";
  qs::c_qsave(resample,resample_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "resample values: "<< resample << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    raster_io_cpp(filename,window,band,resample);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
