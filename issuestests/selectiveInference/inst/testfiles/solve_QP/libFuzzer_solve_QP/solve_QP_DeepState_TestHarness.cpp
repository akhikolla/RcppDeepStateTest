// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// solve_QP_DeepState_TestHarness_generation.cpp and solve_QP_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List solve_QP(Rcpp::NumericMatrix Sigma, double bound, int max_iter, Rcpp::NumericVector theta, Rcpp::NumericVector linear_func, Rcpp::NumericVector gradient, Rcpp::IntegerVector ever_active, Rcpp::IntegerVector nactive, double kkt_tol, double objective_tol, double parameter_tol, int max_active, int kkt_stop, int objective_stop, int param_stop);

TEST(selectiveInference_deepstate_test,solve_QP_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix Sigma  = RcppDeepState_NumericMatrix();
  std::string Sigma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Sigma.qs";
  qs::c_qsave(Sigma,Sigma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Sigma values: "<< Sigma << std::endl;
  NumericVector bound(1);
  bound[0]  = RcppDeepState_double();
  std::string bound_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_bound.qs";
  qs::c_qsave(bound,bound_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bound values: "<< bound << std::endl;
  IntegerVector max_iter(1);
  max_iter[0]  = RcppDeepState_int();
  std::string max_iter_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_max_iter.qs";
  qs::c_qsave(max_iter,max_iter_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_iter values: "<< max_iter << std::endl;
  NumericVector theta  = RcppDeepState_NumericVector();
  std::string theta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_theta.qs";
  qs::c_qsave(theta,theta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "theta values: "<< theta << std::endl;
  NumericVector linear_func  = RcppDeepState_NumericVector();
  std::string linear_func_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_linear_func.qs";
  qs::c_qsave(linear_func,linear_func_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "linear_func values: "<< linear_func << std::endl;
  NumericVector gradient  = RcppDeepState_NumericVector();
  std::string gradient_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gradient.qs";
  qs::c_qsave(gradient,gradient_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gradient values: "<< gradient << std::endl;
  IntegerVector ever_active  = RcppDeepState_IntegerVector();
  std::string ever_active_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ever_active.qs";
  qs::c_qsave(ever_active,ever_active_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ever_active values: "<< ever_active << std::endl;
  IntegerVector nactive  = RcppDeepState_IntegerVector();
  std::string nactive_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nactive.qs";
  qs::c_qsave(nactive,nactive_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nactive values: "<< nactive << std::endl;
  NumericVector kkt_tol(1);
  kkt_tol[0]  = RcppDeepState_double();
  std::string kkt_tol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kkt_tol.qs";
  qs::c_qsave(kkt_tol,kkt_tol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kkt_tol values: "<< kkt_tol << std::endl;
  NumericVector objective_tol(1);
  objective_tol[0]  = RcppDeepState_double();
  std::string objective_tol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_objective_tol.qs";
  qs::c_qsave(objective_tol,objective_tol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "objective_tol values: "<< objective_tol << std::endl;
  NumericVector parameter_tol(1);
  parameter_tol[0]  = RcppDeepState_double();
  std::string parameter_tol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_parameter_tol.qs";
  qs::c_qsave(parameter_tol,parameter_tol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parameter_tol values: "<< parameter_tol << std::endl;
  IntegerVector max_active(1);
  max_active[0]  = RcppDeepState_int();
  std::string max_active_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_max_active.qs";
  qs::c_qsave(max_active,max_active_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_active values: "<< max_active << std::endl;
  IntegerVector kkt_stop(1);
  kkt_stop[0]  = RcppDeepState_int();
  std::string kkt_stop_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kkt_stop.qs";
  qs::c_qsave(kkt_stop,kkt_stop_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kkt_stop values: "<< kkt_stop << std::endl;
  IntegerVector objective_stop(1);
  objective_stop[0]  = RcppDeepState_int();
  std::string objective_stop_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_objective_stop.qs";
  qs::c_qsave(objective_stop,objective_stop_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "objective_stop values: "<< objective_stop << std::endl;
  IntegerVector param_stop(1);
  param_stop[0]  = RcppDeepState_int();
  std::string param_stop_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_QP/libFuzzer_solve_QP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_param_stop.qs";
  qs::c_qsave(param_stop,param_stop_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "param_stop values: "<< param_stop << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    solve_QP(Sigma,bound[0],max_iter[0],theta,linear_func,gradient,ever_active,nactive,kkt_tol[0],objective_tol[0],parameter_tol[0],max_active[0],kkt_stop[0],objective_stop[0],param_stop[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
