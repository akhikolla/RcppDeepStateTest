// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// log_density_laplace_conditional__DeepState_TestHarness_generation.cpp and log_density_laplace_conditional__DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::NumericVector log_density_laplace_conditional_(double noise_scale, Rcpp::NumericMatrix optimization_linear, Rcpp::NumericMatrix optimization_state, Rcpp::NumericVector offset);

TEST(selectiveInference_deepstate_test,log_density_laplace_conditional__test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector noise_scale(1);
  noise_scale[0]  = RcppDeepState_double();
  std::string noise_scale_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_conditional_/libFuzzer_log_density_laplace_conditional_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_noise_scale.qs";
  qs::c_qsave(noise_scale,noise_scale_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "noise_scale values: "<< noise_scale << std::endl;
  NumericMatrix optimization_linear  = RcppDeepState_NumericMatrix();
  std::string optimization_linear_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_conditional_/libFuzzer_log_density_laplace_conditional_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_optimization_linear.qs";
  qs::c_qsave(optimization_linear,optimization_linear_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "optimization_linear values: "<< optimization_linear << std::endl;
  NumericMatrix optimization_state  = RcppDeepState_NumericMatrix();
  std::string optimization_state_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_conditional_/libFuzzer_log_density_laplace_conditional_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_optimization_state.qs";
  qs::c_qsave(optimization_state,optimization_state_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "optimization_state values: "<< optimization_state << std::endl;
  NumericVector offset  = RcppDeepState_NumericVector();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/log_density_laplace_conditional_/libFuzzer_log_density_laplace_conditional_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    log_density_laplace_conditional_(noise_scale[0],optimization_linear,optimization_state,offset);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
