// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// solve_barrier__DeepState_TestHarness_generation.cpp and solve_barrier__DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List solve_barrier_(Rcpp::NumericVector conjugate_arg, Rcpp::NumericMatrix precision, Rcpp::NumericVector feasible_point, int max_iter, int min_iter, double value_tol, double initial_step);

TEST(selectiveInference_deepstate_test,solve_barrier__test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector conjugate_arg  = RcppDeepState_NumericVector();
  std::string conjugate_arg_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_barrier_/libFuzzer_solve_barrier_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_conjugate_arg.qs";
  qs::c_qsave(conjugate_arg,conjugate_arg_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "conjugate_arg values: "<< conjugate_arg << std::endl;
  NumericMatrix precision  = RcppDeepState_NumericMatrix();
  std::string precision_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_barrier_/libFuzzer_solve_barrier_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_precision.qs";
  qs::c_qsave(precision,precision_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "precision values: "<< precision << std::endl;
  NumericVector feasible_point  = RcppDeepState_NumericVector();
  std::string feasible_point_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_barrier_/libFuzzer_solve_barrier_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_feasible_point.qs";
  qs::c_qsave(feasible_point,feasible_point_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "feasible_point values: "<< feasible_point << std::endl;
  IntegerVector max_iter(1);
  max_iter[0]  = RcppDeepState_int();
  std::string max_iter_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_barrier_/libFuzzer_solve_barrier_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_max_iter.qs";
  qs::c_qsave(max_iter,max_iter_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_iter values: "<< max_iter << std::endl;
  IntegerVector min_iter(1);
  min_iter[0]  = RcppDeepState_int();
  std::string min_iter_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_barrier_/libFuzzer_solve_barrier_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_min_iter.qs";
  qs::c_qsave(min_iter,min_iter_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min_iter values: "<< min_iter << std::endl;
  NumericVector value_tol(1);
  value_tol[0]  = RcppDeepState_double();
  std::string value_tol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_barrier_/libFuzzer_solve_barrier_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_value_tol.qs";
  qs::c_qsave(value_tol,value_tol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "value_tol values: "<< value_tol << std::endl;
  NumericVector initial_step(1);
  initial_step[0]  = RcppDeepState_double();
  std::string initial_step_t = "/home/akhila/fuzzer_packages/fuzzedpackages/selectiveInference/inst/testfiles/solve_barrier_/libFuzzer_solve_barrier_/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_initial_step.qs";
  qs::c_qsave(initial_step,initial_step_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "initial_step values: "<< initial_step << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    solve_barrier_(conjugate_arg,precision,feasible_point,max_iter[0],min_iter[0],value_tol[0],initial_step[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
