// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// distToAdjacency_DeepState_TestHarness_generation.cpp and distToAdjacency_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List distToAdjacency(IntegerVector constraints, const int N);

TEST(dbscan_deepstate_test,distToAdjacency_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector raints  = RcppDeepState_IntegerVector();
  std::string constraints_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/distToAdjacency/libFuzzer_distToAdjacency/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_constraints.qs";
  qs::c_qsave(constraints,constraints_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "constraints values: "<< constraints << std::endl;
  IntegerVector N(1);
  N[0]  = RcppDeepState_int();
  std::string N_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/distToAdjacency/libFuzzer_distToAdjacency/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_N.qs";
  qs::c_qsave(N,N_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "N values: "<< N << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    distToAdjacency(constraints,N[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
