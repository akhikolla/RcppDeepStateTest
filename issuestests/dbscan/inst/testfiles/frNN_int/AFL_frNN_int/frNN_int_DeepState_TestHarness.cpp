// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// frNN_int_DeepState_TestHarness_generation.cpp and frNN_int_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List frNN_int(NumericMatrix data, double eps, int type, int bucketSize, int splitRule, double approx);

TEST(dbscan_deepstate_test,frNN_int_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix data  = RcppDeepState_NumericMatrix();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/frNN_int/AFL_frNN_int/afl_inputs/" + std::to_string(t) + "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  NumericVector eps(1);
  eps[0]  = RcppDeepState_double();
  std::string eps_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/frNN_int/AFL_frNN_int/afl_inputs/" + std::to_string(t) + "_eps.qs";
  qs::c_qsave(eps,eps_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eps values: "<< eps << std::endl;
  IntegerVector type(1);
  type[0]  = RcppDeepState_int();
  std::string type_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/frNN_int/AFL_frNN_int/afl_inputs/" + std::to_string(t) + "_type.qs";
  qs::c_qsave(type,type_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "type values: "<< type << std::endl;
  IntegerVector bucketSize(1);
  bucketSize[0]  = RcppDeepState_int();
  std::string bucketSize_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/frNN_int/AFL_frNN_int/afl_inputs/" + std::to_string(t) + "_bucketSize.qs";
  qs::c_qsave(bucketSize,bucketSize_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bucketSize values: "<< bucketSize << std::endl;
  IntegerVector splitRule(1);
  splitRule[0]  = RcppDeepState_int();
  std::string splitRule_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/frNN_int/AFL_frNN_int/afl_inputs/" + std::to_string(t) + "_splitRule.qs";
  qs::c_qsave(splitRule,splitRule_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "splitRule values: "<< splitRule << std::endl;
  NumericVector approx(1);
  approx[0]  = RcppDeepState_double();
  std::string approx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dbscan/inst/testfiles/frNN_int/AFL_frNN_int/afl_inputs/" + std::to_string(t) + "_approx.qs";
  qs::c_qsave(approx,approx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "approx values: "<< approx << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    frNN_int(data,eps[0],type[0],bucketSize[0],splitRule[0],approx[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
