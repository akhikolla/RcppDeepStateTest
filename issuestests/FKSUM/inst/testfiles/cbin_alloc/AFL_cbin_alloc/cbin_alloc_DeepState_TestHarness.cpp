// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cbin_alloc_DeepState_TestHarness_generation.cpp and cbin_alloc_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector cbin_alloc(NumericVector x, int nbin, double min, double max);

TEST(FKSUM_deepstate_test,cbin_alloc_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FKSUM/inst/testfiles/cbin_alloc/AFL_cbin_alloc/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  IntegerVector nbin(1);
  nbin[0]  = RcppDeepState_int();
  std::string nbin_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FKSUM/inst/testfiles/cbin_alloc/AFL_cbin_alloc/afl_inputs/" + std::to_string(t) + "_nbin.qs";
  qs::c_qsave(nbin,nbin_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nbin values: "<< nbin << std::endl;
  NumericVector min(1);
  min[0]  = RcppDeepState_double();
  std::string min_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FKSUM/inst/testfiles/cbin_alloc/AFL_cbin_alloc/afl_inputs/" + std::to_string(t) + "_min.qs";
  qs::c_qsave(min,min_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "min values: "<< min << std::endl;
  NumericVector max(1);
  max[0]  = RcppDeepState_double();
  std::string max_t = "/home/akhila/fuzzer_packages/fuzzedpackages/FKSUM/inst/testfiles/cbin_alloc/AFL_cbin_alloc/afl_inputs/" + std::to_string(t) + "_max.qs";
  qs::c_qsave(max,max_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max values: "<< max << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cbin_alloc(x,nbin[0],min[0],max[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
