// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// IntegrMultiCpp_DeepState_TestHarness_generation.cpp and IntegrMultiCpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List IntegrMultiCpp(NumericMatrix alpha2, NumericVector linvec2, NumericMatrix Phibig2, NumericMatrix tUeach2, NumericMatrix Ueach2, NumericMatrix Tmat2, NumericMatrix Phidoublebig2, NumericMatrix Udoubleeach2, NumericMatrix XW2);

TEST(PenCoxFrail_deepstate_test,IntegrMultiCpp_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix alpha2  = RcppDeepState_NumericMatrix();
  std::string alpha2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_alpha2.qs";
  qs::c_qsave(alpha2,alpha2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "alpha2 values: "<< alpha2 << std::endl;
  NumericVector linvec2  = RcppDeepState_NumericVector();
  std::string linvec2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_linvec2.qs";
  qs::c_qsave(linvec2,linvec2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "linvec2 values: "<< linvec2 << std::endl;
  NumericMatrix Phibig2  = RcppDeepState_NumericMatrix();
  std::string Phibig2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_Phibig2.qs";
  qs::c_qsave(Phibig2,Phibig2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Phibig2 values: "<< Phibig2 << std::endl;
  NumericMatrix tUeach2  = RcppDeepState_NumericMatrix();
  std::string tUeach2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_tUeach2.qs";
  qs::c_qsave(tUeach2,tUeach2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tUeach2 values: "<< tUeach2 << std::endl;
  NumericMatrix Ueach2  = RcppDeepState_NumericMatrix();
  std::string Ueach2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_Ueach2.qs";
  qs::c_qsave(Ueach2,Ueach2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ueach2 values: "<< Ueach2 << std::endl;
  NumericMatrix Tmat2  = RcppDeepState_NumericMatrix();
  std::string Tmat2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_Tmat2.qs";
  qs::c_qsave(Tmat2,Tmat2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Tmat2 values: "<< Tmat2 << std::endl;
  NumericMatrix Phidoublebig2  = RcppDeepState_NumericMatrix();
  std::string Phidoublebig2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_Phidoublebig2.qs";
  qs::c_qsave(Phidoublebig2,Phidoublebig2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Phidoublebig2 values: "<< Phidoublebig2 << std::endl;
  NumericMatrix Udoubleeach2  = RcppDeepState_NumericMatrix();
  std::string Udoubleeach2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_Udoubleeach2.qs";
  qs::c_qsave(Udoubleeach2,Udoubleeach2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Udoubleeach2 values: "<< Udoubleeach2 << std::endl;
  NumericMatrix XW2  = RcppDeepState_NumericMatrix();
  std::string XW2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/PenCoxFrail/inst/testfiles/IntegrMultiCpp/AFL_IntegrMultiCpp/afl_inputs/" + std::to_string(t) + "_XW2.qs";
  qs::c_qsave(XW2,XW2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "XW2 values: "<< XW2 << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    IntegrMultiCpp(alpha2,linvec2,Phibig2,tUeach2,Ueach2,Tmat2,Phidoublebig2,Udoubleeach2,XW2);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
