// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// bmat_schC_DeepState_TestHarness_generation.cpp and bmat_schC_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix bmat_schC(double v1, double v2, double v3, NumericVector section_counts);

TEST(rlme_deepstate_test,bmat_schC_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector v1(1);
  v1[0]  = RcppDeepState_double();
  std::string v1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rlme/inst/testfiles/bmat_schC/libFuzzer_bmat_schC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_v1.qs";
  qs::c_qsave(v1,v1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "v1 values: "<< v1 << std::endl;
  NumericVector v2(1);
  v2[0]  = RcppDeepState_double();
  std::string v2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rlme/inst/testfiles/bmat_schC/libFuzzer_bmat_schC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_v2.qs";
  qs::c_qsave(v2,v2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "v2 values: "<< v2 << std::endl;
  NumericVector v3(1);
  v3[0]  = RcppDeepState_double();
  std::string v3_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rlme/inst/testfiles/bmat_schC/libFuzzer_bmat_schC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_v3.qs";
  qs::c_qsave(v3,v3_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "v3 values: "<< v3 << std::endl;
  NumericVector section_counts  = RcppDeepState_NumericVector();
  std::string section_counts_t = "/home/akhila/fuzzer_packages/fuzzedpackages/rlme/inst/testfiles/bmat_schC/libFuzzer_bmat_schC/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_section_counts.qs";
  qs::c_qsave(section_counts,section_counts_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "section_counts values: "<< section_counts << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    bmat_schC(v1[0],v2[0],v3[0],section_counts);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
