// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// fpr_fs_calc_DeepState_TestHarness_generation.cpp and fpr_fs_calc_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double fpr_fs_calc(double k, double Ft, double Fn, double Tr, double K);

TEST(forestControl_deepstate_test,fpr_fs_calc_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector k(1);
  k[0]  = RcppDeepState_double();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/forestControl/inst/testfiles/fpr_fs_calc/AFL_fpr_fs_calc/afl_inputs/" + std::to_string(t) + "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  NumericVector Ft(1);
  Ft[0]  = RcppDeepState_double();
  std::string Ft_t = "/home/akhila/fuzzer_packages/fuzzedpackages/forestControl/inst/testfiles/fpr_fs_calc/AFL_fpr_fs_calc/afl_inputs/" + std::to_string(t) + "_Ft.qs";
  qs::c_qsave(Ft,Ft_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ft values: "<< Ft << std::endl;
  NumericVector Fn(1);
  Fn[0]  = RcppDeepState_double();
  std::string Fn_t = "/home/akhila/fuzzer_packages/fuzzedpackages/forestControl/inst/testfiles/fpr_fs_calc/AFL_fpr_fs_calc/afl_inputs/" + std::to_string(t) + "_Fn.qs";
  qs::c_qsave(Fn,Fn_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Fn values: "<< Fn << std::endl;
  NumericVector Tr(1);
  Tr[0]  = RcppDeepState_double();
  std::string Tr_t = "/home/akhila/fuzzer_packages/fuzzedpackages/forestControl/inst/testfiles/fpr_fs_calc/AFL_fpr_fs_calc/afl_inputs/" + std::to_string(t) + "_Tr.qs";
  qs::c_qsave(Tr,Tr_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Tr values: "<< Tr << std::endl;
  NumericVector K(1);
  K[0]  = RcppDeepState_double();
  std::string K_t = "/home/akhila/fuzzer_packages/fuzzedpackages/forestControl/inst/testfiles/fpr_fs_calc/AFL_fpr_fs_calc/afl_inputs/" + std::to_string(t) + "_K.qs";
  qs::c_qsave(K,K_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K values: "<< K << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    fpr_fs_calc(k[0],Ft[0],Fn[0],Tr[0],K[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
