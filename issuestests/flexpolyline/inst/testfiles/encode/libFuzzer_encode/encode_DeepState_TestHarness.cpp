// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// encode_DeepState_TestHarness_generation.cpp and encode_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

String encode(NumericMatrix line, int precision, int third_dim, int third_dim_precision);

TEST(flexpolyline_deepstate_test,encode_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix line  = RcppDeepState_NumericMatrix();
  std::string line_t = "/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/libFuzzer_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_line.qs";
  qs::c_qsave(line,line_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "line values: "<< line << std::endl;
  IntegerVector precision(1);
  precision[0]  = RcppDeepState_int();
  std::string precision_t = "/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/libFuzzer_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_precision.qs";
  qs::c_qsave(precision,precision_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "precision values: "<< precision << std::endl;
  IntegerVector third_dim(1);
  third_dim[0]  = RcppDeepState_int();
  std::string third_dim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/libFuzzer_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_third_dim.qs";
  qs::c_qsave(third_dim,third_dim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "third_dim values: "<< third_dim << std::endl;
  IntegerVector third_dim_precision(1);
  third_dim_precision[0]  = RcppDeepState_int();
  std::string third_dim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/libFuzzer_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_third_dim.qs";
  std::string third_dim_precision_t = "/home/akhila/fuzzer_packages/fuzzedpackages/flexpolyline/inst/testfiles/encode/libFuzzer_encode/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_third_dim_precision.qs";
  qs::c_qsave(third_dim_precision,third_dim_precision_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "third_dim_precision values: "<< third_dim_precision << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    encode(line,precision[0],third_dim[0],third_dim_precision[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
