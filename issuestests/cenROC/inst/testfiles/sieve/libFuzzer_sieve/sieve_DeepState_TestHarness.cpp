// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// sieve_DeepState_TestHarness_generation.cpp and sieve_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector sieve(NumericVector Utmp, NumericVector Vtmp, NumericVector Markertmp, NumericVector Deltatmp, NumericVector KnotI, NumericVector KnotM, int ki);

TEST(cenROC_deepstate_test,sieve_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector Utmp  = RcppDeepState_NumericVector();
  std::string Utmp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cenROC/inst/testfiles/sieve/libFuzzer_sieve/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Utmp.qs";
  qs::c_qsave(Utmp,Utmp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Utmp values: "<< Utmp << std::endl;
  NumericVector Vtmp  = RcppDeepState_NumericVector();
  std::string Vtmp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cenROC/inst/testfiles/sieve/libFuzzer_sieve/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Vtmp.qs";
  qs::c_qsave(Vtmp,Vtmp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Vtmp values: "<< Vtmp << std::endl;
  NumericVector Markertmp  = RcppDeepState_NumericVector();
  std::string Markertmp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cenROC/inst/testfiles/sieve/libFuzzer_sieve/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Markertmp.qs";
  qs::c_qsave(Markertmp,Markertmp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Markertmp values: "<< Markertmp << std::endl;
  NumericVector Deltatmp  = RcppDeepState_NumericVector();
  std::string Deltatmp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cenROC/inst/testfiles/sieve/libFuzzer_sieve/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Deltatmp.qs";
  qs::c_qsave(Deltatmp,Deltatmp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Deltatmp values: "<< Deltatmp << std::endl;
  NumericVector KnotI  = RcppDeepState_NumericVector();
  std::string KnotI_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cenROC/inst/testfiles/sieve/libFuzzer_sieve/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_KnotI.qs";
  qs::c_qsave(KnotI,KnotI_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "KnotI values: "<< KnotI << std::endl;
  NumericVector KnotM  = RcppDeepState_NumericVector();
  std::string KnotM_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cenROC/inst/testfiles/sieve/libFuzzer_sieve/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_KnotM.qs";
  qs::c_qsave(KnotM,KnotM_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "KnotM values: "<< KnotM << std::endl;
  IntegerVector ki(1);
  ki[0]  = RcppDeepState_int();
  std::string ki_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cenROC/inst/testfiles/sieve/libFuzzer_sieve/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ki.qs";
  qs::c_qsave(ki,ki_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ki values: "<< ki << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    sieve(Utmp,Vtmp,Markertmp,Deltatmp,KnotI,KnotM,ki[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
