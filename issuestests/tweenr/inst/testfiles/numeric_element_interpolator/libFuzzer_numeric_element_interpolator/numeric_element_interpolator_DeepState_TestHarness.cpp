// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// numeric_element_interpolator_DeepState_TestHarness_generation.cpp and numeric_element_interpolator_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

DataFrame numeric_element_interpolator(NumericVector data, CharacterVector group, IntegerVector frame, CharacterVector ease);

TEST(tweenr_deepstate_test,numeric_element_interpolator_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector data  = RcppDeepState_NumericVector();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_element_interpolator/libFuzzer_numeric_element_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  CharacterVector group  = RcppDeepState_CharacterVector();
  std::string group_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_element_interpolator/libFuzzer_numeric_element_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_group.qs";
  qs::c_qsave(group,group_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "group values: "<< group << std::endl;
  IntegerVector frame  = RcppDeepState_IntegerVector();
  std::string frame_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_element_interpolator/libFuzzer_numeric_element_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_frame.qs";
  qs::c_qsave(frame,frame_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "frame values: "<< frame << std::endl;
  CharacterVector ease  = RcppDeepState_CharacterVector();
  std::string ease_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_element_interpolator/libFuzzer_numeric_element_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ease.qs";
  qs::c_qsave(ease,ease_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ease values: "<< ease << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    numeric_element_interpolator(data,group,frame,ease);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
