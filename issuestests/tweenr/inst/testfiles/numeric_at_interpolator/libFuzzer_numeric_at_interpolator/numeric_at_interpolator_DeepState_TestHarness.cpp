// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// numeric_at_interpolator_DeepState_TestHarness_generation.cpp and numeric_at_interpolator_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector numeric_at_interpolator(NumericVector from, NumericVector to, NumericVector at, CharacterVector ease);

TEST(tweenr_deepstate_test,numeric_at_interpolator_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector from  = RcppDeepState_NumericVector();
  std::string from_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_at_interpolator/libFuzzer_numeric_at_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_from.qs";
  qs::c_qsave(from,from_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "from values: "<< from << std::endl;
  NumericVector to  = RcppDeepState_NumericVector();
  std::string to_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_at_interpolator/libFuzzer_numeric_at_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_to.qs";
  qs::c_qsave(to,to_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "to values: "<< to << std::endl;
  NumericVector at  = RcppDeepState_NumericVector();
  std::string at_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_at_interpolator/libFuzzer_numeric_at_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_at.qs";
  qs::c_qsave(at,at_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "at values: "<< at << std::endl;
  CharacterVector ease  = RcppDeepState_CharacterVector();
  std::string ease_t = "/home/akhila/fuzzer_packages/fuzzedpackages/tweenr/inst/testfiles/numeric_at_interpolator/libFuzzer_numeric_at_interpolator/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ease.qs";
  qs::c_qsave(ease,ease_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ease values: "<< ease << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    numeric_at_interpolator(from,to,at,ease);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
