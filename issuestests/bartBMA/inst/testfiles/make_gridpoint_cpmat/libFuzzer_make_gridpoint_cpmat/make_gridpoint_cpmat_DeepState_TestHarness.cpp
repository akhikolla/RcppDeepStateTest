// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// make_gridpoint_cpmat_DeepState_TestHarness_generation.cpp and make_gridpoint_cpmat_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List make_gridpoint_cpmat(NumericMatrix data, NumericVector resp, int gridsize, int num_cp);

TEST(bartBMA_deepstate_test,make_gridpoint_cpmat_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix data  = RcppDeepState_NumericMatrix();
  std::string data_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/make_gridpoint_cpmat/libFuzzer_make_gridpoint_cpmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_data.qs";
  qs::c_qsave(data,data_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "data values: "<< data << std::endl;
  NumericVector resp  = RcppDeepState_NumericVector();
  std::string resp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/make_gridpoint_cpmat/libFuzzer_make_gridpoint_cpmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_resp.qs";
  qs::c_qsave(resp,resp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "resp values: "<< resp << std::endl;
  IntegerVector gridsize(1);
  gridsize[0]  = RcppDeepState_int();
  std::string gridsize_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/make_gridpoint_cpmat/libFuzzer_make_gridpoint_cpmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_gridsize.qs";
  qs::c_qsave(gridsize,gridsize_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gridsize values: "<< gridsize << std::endl;
  IntegerVector num_cp(1);
  num_cp[0]  = RcppDeepState_int();
  std::string num_cp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/make_gridpoint_cpmat/libFuzzer_make_gridpoint_cpmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_num_cp.qs";
  qs::c_qsave(num_cp,num_cp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "num_cp values: "<< num_cp << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    make_gridpoint_cpmat(data,resp,gridsize[0],num_cp[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
