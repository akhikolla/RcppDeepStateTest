// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// likelihood_function2_exact_DeepState_TestHarness_generation.cpp and likelihood_function2_exact_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List likelihood_function2_exact(NumericVector y_temp, NumericMatrix treetable_temp, NumericMatrix obs_to_nodes_temp, double a, double mu, double nu, double lambda);

TEST(bartBMA_deepstate_test,likelihood_function2_exact_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector y_temp  = RcppDeepState_NumericVector();
  std::string y_temp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/likelihood_function2_exact/AFL_likelihood_function2_exact/afl_inputs/" + std::to_string(t) + "_y_temp.qs";
  qs::c_qsave(y_temp,y_temp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y_temp values: "<< y_temp << std::endl;
  NumericMatrix treetable_temp  = RcppDeepState_NumericMatrix();
  std::string treetable_temp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/likelihood_function2_exact/AFL_likelihood_function2_exact/afl_inputs/" + std::to_string(t) + "_treetable_temp.qs";
  qs::c_qsave(treetable_temp,treetable_temp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "treetable_temp values: "<< treetable_temp << std::endl;
  NumericMatrix obs_to_nodes_temp  = RcppDeepState_NumericMatrix();
  std::string obs_to_nodes_temp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/likelihood_function2_exact/AFL_likelihood_function2_exact/afl_inputs/" + std::to_string(t) + "_obs_to_nodes_temp.qs";
  qs::c_qsave(obs_to_nodes_temp,obs_to_nodes_temp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "obs_to_nodes_temp values: "<< obs_to_nodes_temp << std::endl;
  NumericVector a(1);
  a[0]  = RcppDeepState_double();
  std::string a_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/likelihood_function2_exact/AFL_likelihood_function2_exact/afl_inputs/" + std::to_string(t) + "_a.qs";
  qs::c_qsave(a,a_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a values: "<< a << std::endl;
  NumericVector mu(1);
  mu[0]  = RcppDeepState_double();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/likelihood_function2_exact/AFL_likelihood_function2_exact/afl_inputs/" + std::to_string(t) + "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  NumericVector nu(1);
  nu[0]  = RcppDeepState_double();
  std::string nu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/likelihood_function2_exact/AFL_likelihood_function2_exact/afl_inputs/" + std::to_string(t) + "_nu.qs";
  qs::c_qsave(nu,nu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nu values: "<< nu << std::endl;
  NumericVector lambda(1);
  lambda[0]  = RcppDeepState_double();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/likelihood_function2_exact/AFL_likelihood_function2_exact/afl_inputs/" + std::to_string(t) + "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    likelihood_function2_exact(y_temp,treetable_temp,obs_to_nodes_temp,a[0],mu[0],nu[0],lambda[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
