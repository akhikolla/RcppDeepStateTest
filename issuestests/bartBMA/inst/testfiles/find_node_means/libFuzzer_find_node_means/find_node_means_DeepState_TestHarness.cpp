// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// find_node_means_DeepState_TestHarness_generation.cpp and find_node_means_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector find_node_means(NumericMatrix sum_tree, NumericVector term_nodes);

TEST(bartBMA_deepstate_test,find_node_means_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix sum_tree  = RcppDeepState_NumericMatrix();
  std::string sum_tree_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/find_node_means/libFuzzer_find_node_means/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_sum_tree.qs";
  qs::c_qsave(sum_tree,sum_tree_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "sum_tree values: "<< sum_tree << std::endl;
  NumericVector term_nodes  = RcppDeepState_NumericVector();
  std::string term_nodes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/find_node_means/libFuzzer_find_node_means/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_term_nodes.qs";
  qs::c_qsave(term_nodes,term_nodes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "term_nodes values: "<< term_nodes << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    find_node_means(sum_tree,term_nodes);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
