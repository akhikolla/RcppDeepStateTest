// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// start_tree_DeepState_TestHarness_generation.cpp and start_tree_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix start_tree(double start_mean, double start_sd);

TEST(bartBMA_deepstate_test,start_tree_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector start_mean(1);
  start_mean[0]  = RcppDeepState_double();
  std::string start_mean_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/start_tree/libFuzzer_start_tree/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_start_mean.qs";
  qs::c_qsave(start_mean,start_mean_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "start_mean values: "<< start_mean << std::endl;
  NumericVector start_sd(1);
  start_sd[0]  = RcppDeepState_double();
  std::string start_sd_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/start_tree/libFuzzer_start_tree/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_start_sd.qs";
  qs::c_qsave(start_sd,start_sd_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "start_sd values: "<< start_sd << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    start_tree(start_mean[0],start_sd[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
