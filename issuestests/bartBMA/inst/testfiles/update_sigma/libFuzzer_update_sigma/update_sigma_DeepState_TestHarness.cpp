// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// update_sigma_DeepState_TestHarness_generation.cpp and update_sigma_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double update_sigma(double a1, double b, NumericVector resids, int n);

TEST(bartBMA_deepstate_test,update_sigma_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector a1(1);
  a1[0]  = RcppDeepState_double();
  std::string a1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/update_sigma/libFuzzer_update_sigma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_a1.qs";
  qs::c_qsave(a1,a1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "a1 values: "<< a1 << std::endl;
  NumericVector b(1);
  b[0]  = RcppDeepState_double();
  std::string b_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/update_sigma/libFuzzer_update_sigma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_b.qs";
  qs::c_qsave(b,b_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "b values: "<< b << std::endl;
  NumericVector resids  = RcppDeepState_NumericVector();
  std::string resids_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/update_sigma/libFuzzer_update_sigma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_resids.qs";
  qs::c_qsave(resids,resids_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "resids values: "<< resids << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/update_sigma/libFuzzer_update_sigma/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    update_sigma(a1[0],b[0],resids,n[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
