// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// min_which2_DeepState_TestHarness_generation.cpp and min_which2_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List min_which2(NumericVector array, int n, double minout, int whichout);

TEST(bartBMA_deepstate_test,min_which2_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector array  = RcppDeepState_NumericVector();
  std::string array_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/min_which2/libFuzzer_min_which2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_array.qs";
  qs::c_qsave(array,array_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "array values: "<< array << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/min_which2/libFuzzer_min_which2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  NumericVector minout(1);
  minout[0]  = RcppDeepState_double();
  std::string minout_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/min_which2/libFuzzer_min_which2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_minout.qs";
  qs::c_qsave(minout,minout_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minout values: "<< minout << std::endl;
  IntegerVector whichout(1);
  whichout[0]  = RcppDeepState_int();
  std::string whichout_t = "/home/akhila/fuzzer_packages/fuzzedpackages/bartBMA/inst/testfiles/min_which2/libFuzzer_min_which2/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_whichout.qs";
  qs::c_qsave(whichout,whichout_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "whichout values: "<< whichout << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    min_which2(array,n[0],minout[0],whichout[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
