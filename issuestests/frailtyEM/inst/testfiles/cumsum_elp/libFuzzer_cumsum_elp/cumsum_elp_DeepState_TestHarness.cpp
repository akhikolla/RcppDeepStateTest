// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// cumsum_elp_DeepState_TestHarness_generation.cpp and cumsum_elp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector cumsum_elp(NumericVector left, NumericVector right, NumericVector elp, int maxlength);

TEST(frailtyEM_deepstate_test,cumsum_elp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector left  = RcppDeepState_NumericVector();
  std::string left_t = "/home/akhila/fuzzer_packages/fuzzedpackages/frailtyEM/inst/testfiles/cumsum_elp/libFuzzer_cumsum_elp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_left.qs";
  qs::c_qsave(left,left_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "left values: "<< left << std::endl;
  NumericVector right  = RcppDeepState_NumericVector();
  std::string right_t = "/home/akhila/fuzzer_packages/fuzzedpackages/frailtyEM/inst/testfiles/cumsum_elp/libFuzzer_cumsum_elp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_right.qs";
  qs::c_qsave(right,right_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "right values: "<< right << std::endl;
  NumericVector elp  = RcppDeepState_NumericVector();
  std::string elp_t = "/home/akhila/fuzzer_packages/fuzzedpackages/frailtyEM/inst/testfiles/cumsum_elp/libFuzzer_cumsum_elp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_elp.qs";
  qs::c_qsave(elp,elp_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "elp values: "<< elp << std::endl;
  IntegerVector maxlength(1);
  maxlength[0]  = RcppDeepState_int();
  std::string maxlength_t = "/home/akhila/fuzzer_packages/fuzzedpackages/frailtyEM/inst/testfiles/cumsum_elp/libFuzzer_cumsum_elp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxlength.qs";
  qs::c_qsave(maxlength,maxlength_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxlength values: "<< maxlength << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    cumsum_elp(left,right,elp,maxlength[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
