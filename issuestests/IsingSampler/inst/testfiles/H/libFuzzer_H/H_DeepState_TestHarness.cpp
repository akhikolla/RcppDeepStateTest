// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// H_DeepState_TestHarness_generation.cpp and H_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double H(NumericMatrix J, IntegerVector s, NumericVector h);

TEST(IsingSampler_deepstate_test,H_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix J  = RcppDeepState_NumericMatrix();
  std::string J_t = "/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/H/libFuzzer_H/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_J.qs";
  qs::c_qsave(J,J_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "J values: "<< J << std::endl;
  IntegerVector s  = RcppDeepState_IntegerVector();
  std::string s_t = "/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/H/libFuzzer_H/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_s.qs";
  qs::c_qsave(s,s_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "s values: "<< s << std::endl;
  NumericVector h  = RcppDeepState_NumericVector();
  std::string h_t = "/home/akhila/fuzzer_packages/fuzzedpackages/IsingSampler/inst/testfiles/H/libFuzzer_H/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_h.qs";
  qs::c_qsave(h,h_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "h values: "<< h << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    H(J,s,h);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
