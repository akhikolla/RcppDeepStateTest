// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// beta_ridge_C_DeepState_TestHarness_generation.cpp and beta_ridge_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix beta_ridge_C(NumericMatrix X, NumericMatrix Y, double lambda_beta);

TEST(graphicalVAR_deepstate_test,beta_ridge_C_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/beta_ridge_C/AFL_beta_ridge_C/afl_inputs/" + std::to_string(t) + "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericMatrix Y  = RcppDeepState_NumericMatrix();
  std::string Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/beta_ridge_C/AFL_beta_ridge_C/afl_inputs/" + std::to_string(t) + "_Y.qs";
  qs::c_qsave(Y,Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericVector lambda_beta(1);
  lambda_beta[0]  = RcppDeepState_double();
  std::string lambda_beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/beta_ridge_C/AFL_beta_ridge_C/afl_inputs/" + std::to_string(t) + "_lambda_beta.qs";
  qs::c_qsave(lambda_beta,lambda_beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_beta values: "<< lambda_beta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    beta_ridge_C(X,Y,lambda_beta[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
