// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// Beta_C_DeepState_TestHarness_generation.cpp and Beta_C_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix Beta_C(NumericMatrix kappa, NumericMatrix beta, NumericMatrix X, NumericMatrix Y, double lambda_beta, NumericMatrix lambda_beta_mat, double convergence, int maxit);

TEST(graphicalVAR_deepstate_test,Beta_C_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix kappa  = RcppDeepState_NumericMatrix();
  std::string kappa_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_kappa.qs";
  qs::c_qsave(kappa,kappa_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "kappa values: "<< kappa << std::endl;
  NumericMatrix beta  = RcppDeepState_NumericMatrix();
  std::string beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_beta.qs";
  qs::c_qsave(beta,beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "beta values: "<< beta << std::endl;
  NumericMatrix X  = RcppDeepState_NumericMatrix();
  std::string X_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_X.qs";
  qs::c_qsave(X,X_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "X values: "<< X << std::endl;
  NumericMatrix Y  = RcppDeepState_NumericMatrix();
  std::string Y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Y.qs";
  qs::c_qsave(Y,Y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Y values: "<< Y << std::endl;
  NumericVector lambda_beta(1);
  lambda_beta[0]  = RcppDeepState_double();
  std::string lambda_beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda_beta.qs";
  qs::c_qsave(lambda_beta,lambda_beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_beta values: "<< lambda_beta << std::endl;
  NumericMatrix lambda_beta_mat  = RcppDeepState_NumericMatrix();
  std::string lambda_beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda_beta.qs";
  std::string lambda_beta_mat_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_lambda_beta_mat.qs";
  qs::c_qsave(lambda_beta_mat,lambda_beta_mat_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda_beta_mat values: "<< lambda_beta_mat << std::endl;
  NumericVector convergence(1);
  convergence[0]  = RcppDeepState_double();
  std::string convergence_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_convergence.qs";
  qs::c_qsave(convergence,convergence_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "convergence values: "<< convergence << std::endl;
  IntegerVector maxit(1);
  maxit[0]  = RcppDeepState_int();
  std::string maxit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/graphicalVAR/inst/testfiles/Beta_C/libFuzzer_Beta_C/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_maxit.qs";
  qs::c_qsave(maxit,maxit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxit values: "<< maxit << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    Beta_C(kappa,beta,X,Y,lambda_beta[0],lambda_beta_mat,convergence[0],maxit[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
