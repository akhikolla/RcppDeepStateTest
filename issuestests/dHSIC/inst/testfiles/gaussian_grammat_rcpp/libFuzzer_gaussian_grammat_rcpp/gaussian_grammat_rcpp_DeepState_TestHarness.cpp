// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// gaussian_grammat_rcpp_DeepState_TestHarness_generation.cpp and gaussian_grammat_rcpp_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix gaussian_grammat_rcpp(NumericMatrix x, double bandwidth, int n, int d);

TEST(dHSIC_deepstate_test,gaussian_grammat_rcpp_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix x  = RcppDeepState_NumericMatrix();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dHSIC/inst/testfiles/gaussian_grammat_rcpp/libFuzzer_gaussian_grammat_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector bandwidth(1);
  bandwidth[0]  = RcppDeepState_double();
  std::string bandwidth_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dHSIC/inst/testfiles/gaussian_grammat_rcpp/libFuzzer_gaussian_grammat_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_bandwidth.qs";
  qs::c_qsave(bandwidth,bandwidth_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bandwidth values: "<< bandwidth << std::endl;
  IntegerVector n(1);
  n[0]  = RcppDeepState_int();
  std::string n_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dHSIC/inst/testfiles/gaussian_grammat_rcpp/libFuzzer_gaussian_grammat_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_n.qs";
  qs::c_qsave(n,n_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "n values: "<< n << std::endl;
  IntegerVector d(1);
  d[0]  = RcppDeepState_int();
  std::string d_t = "/home/akhila/fuzzer_packages/fuzzedpackages/dHSIC/inst/testfiles/gaussian_grammat_rcpp/libFuzzer_gaussian_grammat_rcpp/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_d.qs";
  qs::c_qsave(d,d_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "d values: "<< d << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    gaussian_grammat_rcpp(x,bandwidth[0],n[0],d[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
