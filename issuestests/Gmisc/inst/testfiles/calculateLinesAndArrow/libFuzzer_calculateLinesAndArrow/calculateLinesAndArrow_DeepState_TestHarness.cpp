// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// calculateLinesAndArrow_DeepState_TestHarness_generation.cpp and calculateLinesAndArrow_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

Rcpp::List calculateLinesAndArrow(NumericVector x, NumericVector y, NumericVector offset, double end_x, double end_y, double arrow_offset, int rm_intersect);

TEST(Gmisc_deepstate_test,calculateLinesAndArrow_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Gmisc/inst/testfiles/calculateLinesAndArrow/libFuzzer_calculateLinesAndArrow/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Gmisc/inst/testfiles/calculateLinesAndArrow/libFuzzer_calculateLinesAndArrow/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector offset  = RcppDeepState_NumericVector();
  std::string offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Gmisc/inst/testfiles/calculateLinesAndArrow/libFuzzer_calculateLinesAndArrow/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_offset.qs";
  qs::c_qsave(offset,offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "offset values: "<< offset << std::endl;
  NumericVector end_x(1);
  end_x[0]  = RcppDeepState_double();
  std::string end_x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Gmisc/inst/testfiles/calculateLinesAndArrow/libFuzzer_calculateLinesAndArrow/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_end_x.qs";
  qs::c_qsave(end_x,end_x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "end_x values: "<< end_x << std::endl;
  NumericVector end_y(1);
  end_y[0]  = RcppDeepState_double();
  std::string end_y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Gmisc/inst/testfiles/calculateLinesAndArrow/libFuzzer_calculateLinesAndArrow/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_end_y.qs";
  qs::c_qsave(end_y,end_y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "end_y values: "<< end_y << std::endl;
  NumericVector arrow_offset(1);
  arrow_offset[0]  = RcppDeepState_double();
  std::string arrow_offset_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Gmisc/inst/testfiles/calculateLinesAndArrow/libFuzzer_calculateLinesAndArrow/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_arrow_offset.qs";
  qs::c_qsave(arrow_offset,arrow_offset_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "arrow_offset values: "<< arrow_offset << std::endl;
  IntegerVector rm_intersect(1);
  rm_intersect[0]  = RcppDeepState_int();
  std::string rm_intersect_t = "/home/akhila/fuzzer_packages/fuzzedpackages/Gmisc/inst/testfiles/calculateLinesAndArrow/libFuzzer_calculateLinesAndArrow/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_rm_intersect.qs";
  qs::c_qsave(rm_intersect,rm_intersect_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rm_intersect values: "<< rm_intersect << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    calculateLinesAndArrow(x,y,offset,end_x[0],end_y[0],arrow_offset[0],rm_intersect[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
