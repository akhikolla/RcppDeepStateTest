% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/odf.R
\name{read.odf}
\alias{read.odf}
\title{Read an ODF file}
\usage{
read.odf(file, columns = NULL, header = "list", debug = getOption("oceDebug"))
}
\arguments{
\item{file}{the file containing the data.}

\item{columns}{An optional \link{list} that can be used to convert unrecognized
data names to resultant variable names.  For example,
\verb{columns=list(salinity=list(name="salt", unit=list(unit=expression(), scale="PSS-78"))}
states that a short-name of \code{"salt"} represents salinity, and that the unit is
as indicated. This is passed to \code{\link[=cnvName2oceName]{cnvName2oceName()}} or \code{\link[=ODFNames2oceNames]{ODFNames2oceNames()}},
as appropriate, and takes precedence over the lookup table in that function.}

\item{header}{An indication of whether, or how, to store the entire
ODF file header in the \code{metadata} slot of the returned object.
There are three choices for the \code{header} argument.
(1) If it is \code{NULL}, then the ODF header is not stored in
the \code{metadata} slot (although some of its contents are).
(2) If it is \code{"character"}, the header is stored within
the \code{metadata} as a vector named \code{header}, comprising
a character string for each line of the header within the ODF file.
(3) If it is \code{"list"}, then the \code{metadata} slot of the
returned object will contain a \code{list} named \code{header} that
has lists as its entries. (The sub-lists are in the form of
key-value pairs.) The naming of list entries is patterned on
that in the ODF header, except that \code{\link[=unduplicateNames]{unduplicateNames()}}
is used to transform repeated names by adding numerical suffices.
Note: on June 6, 2019, the default value of \code{header} was
changed from \code{NULL} to \code{"list"}; in addition, the resultant
list was made to contain every single item in the ODF header, with
\code{\link[=unduplicateNames]{unduplicateNames()}} being used to append integers to
distinguish between repeated names in the ODF format.}

\item{debug}{an integer specifying whether debugging information is
to be printed during the processing. This is a general parameter that
is used by many \code{oce} functions. Generally, setting \code{debug=0}
turns off the printing, while higher values suggest that more information
be printed. If one function calls another, it usually reduces the value of
\code{debug} first, so that a user can often obtain deeper debugging
by specifying higher \code{debug} values.}
}
\value{
An \linkS4class{oce} object.
}
\description{
ODF (Ocean Data Format) is a
format developed at the Bedford Institute of Oceanography and also used
at other Canadian Department of Fisheries and Oceans (DFO) facilities
(see references 1 and 2).
It can hold various types of time-series data, which includes a variety
of instrument types. Thus, \code{\link[=read.odf]{read.odf()}}
is used by \code{read.ctd.odf} for CTD data, etc. As of mid-2018,
\code{\link[=read.odf]{read.odf()}} is still in development, with features being added as a
project with DFO makes available more files.
}
\details{
Note that some elements of the metadata are particular to ODF objects,
e.g. \code{depthMin}, \code{depthMax} and \code{sounding}, which
are inferred from ODF items named \code{MIN_DEPTH}, \code{MAX_DEPTH}
and \code{SOUNDING}, respectively. In addition, the more common metadata
item \code{waterDepth}, which is used in \code{ctd} objects to refer to
the total water depth, is set to \code{sounding} if that is finite,
or to \code{maxDepth} otherwise.

The function \code{\link[=ODFNames2oceNames]{ODFNames2oceNames()}} is used to translate
data names from the ODF file to standard \code{oce} names, and
handles conversion for a few non-standard units. The documentation
of \code{\link[=ODFNames2oceNames]{ODFNames2oceNames()}} should be consulted for more
details.
}
\section{Metadata conventions}{


Some metadata items may be specific to certain instruments, and
certain research groups. It can be important for analysts to be aware of
the conventions used in datasets that are under study.
For example, as of June 2018, \code{adp}
objects created at the Bedford Institute of Oceanography may
have a metadata item named \code{depthOffBottom} (called
\code{DEPTH_OFF_BOTTOM} in ODF files), which is not typically
present in \code{ctd} files. This item illustrates the renaming
convention, from the CAMEL_CASE used in ODF files to the snakeCase
used in oce. Bearing this conversion in mind, users should not
find it difficult to understand the meaning of items that \code{\link[=read.odf]{read.odf()}}
stores within the \code{metadata} slot. Users should bear in mind
that the whole ODF header is saved as a list by
calling the function with \code{header="list"}, after which
e.g. \link{str}\code{(rval[["header"]])} or \link{View}\code{(rval[["header"]])}
can be used to isolate any information of interest (but bear in mind
that suffices are used to disambiguate sibling items of identical
name in the ODF header).
}

\section{Caution}{

ODF files do not store information on the temperature or salinity scale, and \code{\link[=read.odf]{read.odf()}}
assumes these to be ITS-90 and PSS-78, respectively. These scales may be incorrect for old
data files. Note that the temperature scale can be converted from old scales
using \code{\link[=T90fromT68]{T90fromT68()}} and \code{\link[=T90fromT48]{T90fromT48()}}, although the change will be in
a fraction of a millidegree, which probably exceeds reasonable confidence in old data.
}

\examples{
library(oce)
#
# 1. Read a CTD cast made on the Scotian Shelf. Note that the file's metadata
# states that conductivity is in S/m, but it is really conductivity ratio,
# so we must alter the unit before converting to a CTD object. Note that
# read.odf() on this data file produces a warning suggesting that the user
# repair the unit, using the method outlined here.
odf <- read.odf(system.file("extdata", "CTD_BCD2014666_008_1_DN.ODF.gz", package="oce"))
ctd <- as.ctd(odf) ## so we can e.g. extract potential temperature
ctd[["conductivityUnit"]] <- list(unit=expression(), scale="")
#
# 2. Make a CTD, and plot (with span to show NS)
plot(ctd, span=500)
#
# 3. Highlight bad data on TS diagram. (Note that the eos
# is specified, because we will extract practical-salinity and
# UNESCO-defined potential temperatures for the added points.)
plotTS(ctd, type="o", eos="unesco") # use a line to show loops
bad <- ctd[["QCFlag"]]!=0
points(ctd[['salinity']][bad],ctd[['theta']][bad],col='red',pch=20)

}
\references{
\enumerate{
\item Anthony W. Isenor and David Kellow, 2011. ODF Format Specification
Version 2.0. (This is a .doc file downloaded from a now-forgotten URL by Dan Kelley,
in June 2011.)
\item The St Lawrence Global Observatory website has information on ODF format at
\url{https://slgo.ca/app-sgdo/en/docs_reference/documents.html}
and this is perhaps the best resource to learn more.
}
}
\seealso{
\code{\link[=ODF2oce]{ODF2oce()}} will be an alternative to this, once (or perhaps if) a \code{ODF}
package is released by the Canadian Department of Fisheries and Oceans.

Other things related to odf data: 
\code{\link{CTD_BCD2014666_008_1_DN.ODF.gz}},
\code{\link{ODF2oce}()},
\code{\link{ODFListFromHeader}()},
\code{\link{ODFNames2oceNames}()},
\code{\link{[[,odf-method}},
\code{\link{[[<-,odf-method}},
\code{\link{odf-class}},
\code{\link{plot,odf-method}},
\code{\link{read.ctd.odf}()},
\code{\link{subset,odf-method}},
\code{\link{summary,odf-method}}
}
\concept{things related to odf data}
