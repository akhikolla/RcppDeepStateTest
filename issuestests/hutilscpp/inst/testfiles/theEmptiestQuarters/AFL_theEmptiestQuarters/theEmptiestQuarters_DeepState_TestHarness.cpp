// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// theEmptiestQuarters_DeepState_TestHarness_generation.cpp and theEmptiestQuarters_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerVector theEmptiestQuarters(NumericVector x, NumericVector y, double minx, double maxx, double miny, double maxy, int depth);

TEST(hutilscpp_deepstate_test,theEmptiestQuarters_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/theEmptiestQuarters/AFL_theEmptiestQuarters/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector y  = RcppDeepState_NumericVector();
  std::string y_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/theEmptiestQuarters/AFL_theEmptiestQuarters/afl_inputs/" + std::to_string(t) + "_y.qs";
  qs::c_qsave(y,y_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "y values: "<< y << std::endl;
  NumericVector minx(1);
  minx[0]  = RcppDeepState_double();
  std::string minx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/theEmptiestQuarters/AFL_theEmptiestQuarters/afl_inputs/" + std::to_string(t) + "_minx.qs";
  qs::c_qsave(minx,minx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minx values: "<< minx << std::endl;
  NumericVector maxx(1);
  maxx[0]  = RcppDeepState_double();
  std::string maxx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/theEmptiestQuarters/AFL_theEmptiestQuarters/afl_inputs/" + std::to_string(t) + "_maxx.qs";
  qs::c_qsave(maxx,maxx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxx values: "<< maxx << std::endl;
  NumericVector miny(1);
  miny[0]  = RcppDeepState_double();
  std::string miny_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/theEmptiestQuarters/AFL_theEmptiestQuarters/afl_inputs/" + std::to_string(t) + "_miny.qs";
  qs::c_qsave(miny,miny_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "miny values: "<< miny << std::endl;
  NumericVector maxy(1);
  maxy[0]  = RcppDeepState_double();
  std::string maxy_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/theEmptiestQuarters/AFL_theEmptiestQuarters/afl_inputs/" + std::to_string(t) + "_maxy.qs";
  qs::c_qsave(maxy,maxy_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxy values: "<< maxy << std::endl;
  IntegerVector depth(1);
  depth[0]  = RcppDeepState_int();
  std::string depth_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/theEmptiestQuarters/AFL_theEmptiestQuarters/afl_inputs/" + std::to_string(t) + "_depth.qs";
  qs::c_qsave(depth,depth_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "depth values: "<< depth << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    theEmptiestQuarters(x,y,minx[0],maxx[0],miny[0],maxy[0],depth[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
