// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// which_min_HaversineDistance_DeepState_TestHarness_generation.cpp and which_min_HaversineDistance_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

int which_min_HaversineDistance(NumericVector lat1, NumericVector lon1, double lat2, double lon2, double upperBound);

TEST(hutilscpp_deepstate_test,which_min_HaversineDistance_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector lat1  = RcppDeepState_NumericVector();
  std::string lat1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/which_min_HaversineDistance/AFL_which_min_HaversineDistance/afl_inputs/" + std::to_string(t) + "_lat1.qs";
  qs::c_qsave(lat1,lat1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lat1 values: "<< lat1 << std::endl;
  NumericVector lon1  = RcppDeepState_NumericVector();
  std::string lon1_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/which_min_HaversineDistance/AFL_which_min_HaversineDistance/afl_inputs/" + std::to_string(t) + "_lon1.qs";
  qs::c_qsave(lon1,lon1_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lon1 values: "<< lon1 << std::endl;
  NumericVector lat2(1);
  lat2[0]  = RcppDeepState_double();
  std::string lat2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/which_min_HaversineDistance/AFL_which_min_HaversineDistance/afl_inputs/" + std::to_string(t) + "_lat2.qs";
  qs::c_qsave(lat2,lat2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lat2 values: "<< lat2 << std::endl;
  NumericVector lon2(1);
  lon2[0]  = RcppDeepState_double();
  std::string lon2_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/which_min_HaversineDistance/AFL_which_min_HaversineDistance/afl_inputs/" + std::to_string(t) + "_lon2.qs";
  qs::c_qsave(lon2,lon2_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lon2 values: "<< lon2 << std::endl;
  NumericVector upperBound(1);
  upperBound[0]  = RcppDeepState_double();
  std::string upperBound_t = "/home/akhila/fuzzer_packages/fuzzedpackages/hutilscpp/inst/testfiles/which_min_HaversineDistance/AFL_which_min_HaversineDistance/afl_inputs/" + std::to_string(t) + "_upperBound.qs";
  qs::c_qsave(upperBound,upperBound_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "upperBound values: "<< upperBound << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    which_min_HaversineDistance(lat1,lon1,lat2[0],lon2[0],upperBound[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
