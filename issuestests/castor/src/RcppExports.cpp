// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// evaluate_univariate_expression_CPP
Rcpp::List evaluate_univariate_expression_CPP(const std::string& expression, const std::string& Xname, const std::vector<double>& X);
RcppExport SEXP _castor_evaluate_univariate_expression_CPP(SEXP expressionSEXP, SEXP XnameSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type Xname(XnameSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_univariate_expression_CPP(expression, Xname, X));
    return rcpp_result_gen;
END_RCPP
}
// dense_binary_matrix_row2column_major_CPP
Rcpp::List dense_binary_matrix_row2column_major_CPP(const long NR, const long NC, const Rcpp::List& dense_rows, const bool Rindexing);
RcppExport SEXP _castor_dense_binary_matrix_row2column_major_CPP(SEXP NRSEXP, SEXP NCSEXP, SEXP dense_rowsSEXP, SEXP RindexingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< const long >::type NC(NCSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type dense_rows(dense_rowsSEXP);
    Rcpp::traits::input_parameter< const bool >::type Rindexing(RindexingSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_binary_matrix_row2column_major_CPP(NR, NC, dense_rows, Rindexing));
    return rcpp_result_gen;
END_RCPP
}
// get_member_lists_from_group_assignments_CPP
Rcpp::List get_member_lists_from_group_assignments_CPP(const long Ngroups, const std::vector<long>& pool2group);
RcppExport SEXP _castor_get_member_lists_from_group_assignments_CPP(SEXP NgroupsSEXP, SEXP pool2groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ngroups(NgroupsSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type pool2group(pool2groupSEXP);
    rcpp_result_gen = Rcpp::wrap(get_member_lists_from_group_assignments_CPP(Ngroups, pool2group));
    return rcpp_result_gen;
END_RCPP
}
// place_sorted_values_into_bins_CPP
Rcpp::List place_sorted_values_into_bins_CPP(const std::vector<double>& items, const std::vector<double>& bin_mins, const std::vector<double>& bin_maxs);
RcppExport SEXP _castor_place_sorted_values_into_bins_CPP(SEXP itemsSEXP, SEXP bin_minsSEXP, SEXP bin_maxsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type bin_mins(bin_minsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type bin_maxs(bin_maxsSEXP);
    rcpp_result_gen = Rcpp::wrap(place_sorted_values_into_bins_CPP(items, bin_mins, bin_maxs));
    return rcpp_result_gen;
END_RCPP
}
// split_undirected_graph_CPP
Rcpp::List split_undirected_graph_CPP(const long Nnodes, const long Nedges, const std::vector<long>& edges);
RcppExport SEXP _castor_split_undirected_graph_CPP(SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(split_undirected_graph_CPP(Nnodes, Nedges, edges));
    return rcpp_result_gen;
END_RCPP
}
// evaluate_spline_CPP
NumericVector evaluate_spline_CPP(const std::vector<double>& Xgrid, const std::vector<double>& Ygrid, const long splines_degree, const std::vector<double>& Xtarget, const std::string& extrapolate, const long derivative);
RcppExport SEXP _castor_evaluate_spline_CPP(SEXP XgridSEXP, SEXP YgridSEXP, SEXP splines_degreeSEXP, SEXP XtargetSEXP, SEXP extrapolateSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Xgrid(XgridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Ygrid(YgridSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Xtarget(XtargetSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type extrapolate(extrapolateSEXP);
    Rcpp::traits::input_parameter< const long >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(evaluate_spline_CPP(Xgrid, Ygrid, splines_degree, Xtarget, extrapolate, derivative));
    return rcpp_result_gen;
END_RCPP
}
// derivatives_of_grid_curve_CPP
NumericVector derivatives_of_grid_curve_CPP(const std::vector<double>& Xgrid, const std::vector<double>& Ygrid);
RcppExport SEXP _castor_derivatives_of_grid_curve_CPP(SEXP XgridSEXP, SEXP YgridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Xgrid(XgridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Ygrid(YgridSEXP);
    rcpp_result_gen = Rcpp::wrap(derivatives_of_grid_curve_CPP(Xgrid, Ygrid));
    return rcpp_result_gen;
END_RCPP
}
// get_antiderivative_CPP
NumericVector get_antiderivative_CPP(const std::vector<double>& Xgrid, const double Xstart, const std::vector<double>& Ygrid, const long splines_degree, const std::vector<double>& Xtarget);
RcppExport SEXP _castor_get_antiderivative_CPP(SEXP XgridSEXP, SEXP XstartSEXP, SEXP YgridSEXP, SEXP splines_degreeSEXP, SEXP XtargetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Xgrid(XgridSEXP);
    Rcpp::traits::input_parameter< const double >::type Xstart(XstartSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Ygrid(YgridSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Xtarget(XtargetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_antiderivative_CPP(Xgrid, Xstart, Ygrid, splines_degree, Xtarget));
    return rcpp_result_gen;
END_RCPP
}
// get_derivative_CPP
NumericVector get_derivative_CPP(const std::vector<double>& Xgrid, const std::vector<double>& Ygrid, const long splines_degree, const std::vector<double>& Xtarget);
RcppExport SEXP _castor_get_derivative_CPP(SEXP XgridSEXP, SEXP YgridSEXP, SEXP splines_degreeSEXP, SEXP XtargetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Xgrid(XgridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Ygrid(YgridSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Xtarget(XtargetSEXP);
    rcpp_result_gen = Rcpp::wrap(get_derivative_CPP(Xgrid, Ygrid, splines_degree, Xtarget));
    return rcpp_result_gen;
END_RCPP
}
// exponentiate_matrix_for_multiple_scalings_CPP
NumericVector exponentiate_matrix_for_multiple_scalings_CPP(const long NR, const std::vector<double>& A, const std::vector<double>& scalings, const double epsilon, const long NPmin, const long NPmax, const bool enforce_probability_matrix);
RcppExport SEXP _castor_exponentiate_matrix_for_multiple_scalings_CPP(SEXP NRSEXP, SEXP ASEXP, SEXP scalingsSEXP, SEXP epsilonSEXP, SEXP NPminSEXP, SEXP NPmaxSEXP, SEXP enforce_probability_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type NR(NRSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type scalings(scalingsSEXP);
    Rcpp::traits::input_parameter< const double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< const long >::type NPmin(NPminSEXP);
    Rcpp::traits::input_parameter< const long >::type NPmax(NPmaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type enforce_probability_matrix(enforce_probability_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(exponentiate_matrix_for_multiple_scalings_CPP(NR, A, scalings, epsilon, NPmin, NPmax, enforce_probability_matrix));
    return rcpp_result_gen;
END_RCPP
}
// smoothenTimeSeriesSavitzkyGolay_CPP
Rcpp::List smoothenTimeSeriesSavitzkyGolay_CPP(const std::vector<double>& times, const std::vector<double>& data, double windowTimeSpan, long windowIndexSpan, int order);
RcppExport SEXP _castor_smoothenTimeSeriesSavitzkyGolay_CPP(SEXP timesSEXP, SEXP dataSEXP, SEXP windowTimeSpanSEXP, SEXP windowIndexSpanSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type windowTimeSpan(windowTimeSpanSEXP);
    Rcpp::traits::input_parameter< long >::type windowIndexSpan(windowIndexSpanSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(smoothenTimeSeriesSavitzkyGolay_CPP(times, data, windowTimeSpan, windowIndexSpan, order));
    return rcpp_result_gen;
END_RCPP
}
// get_inhomogeneous_grid_1D_CPP
NumericVector get_inhomogeneous_grid_1D_CPP(const double Xstart, const double Xend, const long Ngrid, const std::vector<double>& densityX, const std::vector<double>& densityY, const double xepsilon);
RcppExport SEXP _castor_get_inhomogeneous_grid_1D_CPP(SEXP XstartSEXP, SEXP XendSEXP, SEXP NgridSEXP, SEXP densityXSEXP, SEXP densityYSEXP, SEXP xepsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type Xstart(XstartSEXP);
    Rcpp::traits::input_parameter< const double >::type Xend(XendSEXP);
    Rcpp::traits::input_parameter< const long >::type Ngrid(NgridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type densityX(densityXSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type densityY(densityYSEXP);
    Rcpp::traits::input_parameter< const double >::type xepsilon(xepsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inhomogeneous_grid_1D_CPP(Xstart, Xend, Ngrid, densityX, densityY, xepsilon));
    return rcpp_result_gen;
END_RCPP
}
// monotonize_time_series_CPP
Rcpp::List monotonize_time_series_CPP(std::vector<double>& values, const bool increasing, const bool prefer_later_data);
RcppExport SEXP _castor_monotonize_time_series_CPP(SEXP valuesSEXP, SEXP increasingSEXP, SEXP prefer_later_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double>& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const bool >::type increasing(increasingSEXP);
    Rcpp::traits::input_parameter< const bool >::type prefer_later_data(prefer_later_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(monotonize_time_series_CPP(values, increasing, prefer_later_data));
    return rcpp_result_gen;
END_RCPP
}
// get_Ornstein_Uhlenbeck_time_series_CPP
Rcpp::List get_Ornstein_Uhlenbeck_time_series_CPP(const std::vector<double>& times, const double start_value, const double stationary_mean, const double stationary_std, const double decay_rate);
RcppExport SEXP _castor_get_Ornstein_Uhlenbeck_time_series_CPP(SEXP timesSEXP, SEXP start_valueSEXP, SEXP stationary_meanSEXP, SEXP stationary_stdSEXP, SEXP decay_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type start_value(start_valueSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_mean(stationary_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_std(stationary_stdSEXP);
    Rcpp::traits::input_parameter< const double >::type decay_rate(decay_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Ornstein_Uhlenbeck_time_series_CPP(times, start_value, stationary_mean, stationary_std, decay_rate));
    return rcpp_result_gen;
END_RCPP
}
// get_Poisson_event_times_CPP
Rcpp::List get_Poisson_event_times_CPP(const std::vector<double>& time_grid, const std::vector<double>& rates, const long splines_degree, const long Nevents, const double time0);
RcppExport SEXP _castor_get_Poisson_event_times_CPP(SEXP time_gridSEXP, SEXP ratesSEXP, SEXP splines_degreeSEXP, SEXP NeventsSEXP, SEXP time0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_grid(time_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type rates(ratesSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const long >::type Nevents(NeventsSEXP);
    Rcpp::traits::input_parameter< const double >::type time0(time0SEXP);
    rcpp_result_gen = Rcpp::wrap(get_Poisson_event_times_CPP(time_grid, rates, splines_degree, Nevents, time0));
    return rcpp_result_gen;
END_RCPP
}
// simulate_deterministic_diversity_growth_CPP
Rcpp::List simulate_deterministic_diversity_growth_CPP(const double birth_rate_intercept, const double birth_rate_factor, const double birth_rate_exponent, const double death_rate_intercept, const double death_rate_factor, const double death_rate_exponent, const double resolution, const double rarefaction, const long Nsplits, const std::vector<double>& additional_rates_times, const std::vector<double>& additional_birth_rates_pc, const std::vector<double>& additional_death_rates_pc, const bool additional_periodic, const std::vector<double>& times, const double start_time, const double final_time, const double start_diversity, const double final_diversity, const bool reverse, const bool include_coalescent, const bool include_probabilities, const bool include_birth_rates, const bool include_death_rates, const bool include_Nevents, const double runtime_out_seconds);
RcppExport SEXP _castor_simulate_deterministic_diversity_growth_CPP(SEXP birth_rate_interceptSEXP, SEXP birth_rate_factorSEXP, SEXP birth_rate_exponentSEXP, SEXP death_rate_interceptSEXP, SEXP death_rate_factorSEXP, SEXP death_rate_exponentSEXP, SEXP resolutionSEXP, SEXP rarefactionSEXP, SEXP NsplitsSEXP, SEXP additional_rates_timesSEXP, SEXP additional_birth_rates_pcSEXP, SEXP additional_death_rates_pcSEXP, SEXP additional_periodicSEXP, SEXP timesSEXP, SEXP start_timeSEXP, SEXP final_timeSEXP, SEXP start_diversitySEXP, SEXP final_diversitySEXP, SEXP reverseSEXP, SEXP include_coalescentSEXP, SEXP include_probabilitiesSEXP, SEXP include_birth_ratesSEXP, SEXP include_death_ratesSEXP, SEXP include_NeventsSEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type birth_rate_intercept(birth_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_factor(birth_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_exponent(birth_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_intercept(death_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_factor(death_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_exponent(death_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const double >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< const double >::type rarefaction(rarefactionSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_rates_times(additional_rates_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_birth_rates_pc(additional_birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_death_rates_pc(additional_death_rates_pcSEXP);
    Rcpp::traits::input_parameter< const bool >::type additional_periodic(additional_periodicSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type start_time(start_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type final_time(final_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type start_diversity(start_diversitySEXP);
    Rcpp::traits::input_parameter< const double >::type final_diversity(final_diversitySEXP);
    Rcpp::traits::input_parameter< const bool >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_coalescent(include_coalescentSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_probabilities(include_probabilitiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_rates(include_birth_ratesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_rates(include_death_ratesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_Nevents(include_NeventsSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_deterministic_diversity_growth_CPP(birth_rate_intercept, birth_rate_factor, birth_rate_exponent, death_rate_intercept, death_rate_factor, death_rate_exponent, resolution, rarefaction, Nsplits, additional_rates_times, additional_birth_rates_pc, additional_death_rates_pc, additional_periodic, times, start_time, final_time, start_diversity, final_diversity, reverse, include_coalescent, include_probabilities, include_birth_rates, include_death_rates, include_Nevents, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_past_diversity_from_coalescent_CPP
Rcpp::List reconstruct_past_diversity_from_coalescent_CPP(const std::vector<double>& times, const std::vector<double>& raw_coalescent_diversities, const std::vector<double>& birth_rates_pc, const double rarefaction, const double max_age, const long smoothing_span, const long smoothing_order);
RcppExport SEXP _castor_reconstruct_past_diversity_from_coalescent_CPP(SEXP timesSEXP, SEXP raw_coalescent_diversitiesSEXP, SEXP birth_rates_pcSEXP, SEXP rarefactionSEXP, SEXP max_ageSEXP, SEXP smoothing_spanSEXP, SEXP smoothing_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type raw_coalescent_diversities(raw_coalescent_diversitiesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_rates_pc(birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type rarefaction(rarefactionSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_span(smoothing_spanSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_order(smoothing_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_past_diversity_from_coalescent_CPP(times, raw_coalescent_diversities, birth_rates_pc, rarefaction, max_age, smoothing_span, smoothing_order));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_past_diversity_from_biased_coalescent_CPP
Rcpp::List reconstruct_past_diversity_from_biased_coalescent_CPP(const std::vector<double>& times, const std::vector<double>& raw_coalescent_diversities, const std::vector<double>& birth_rates_pc, const std::vector<double>& discovery_fractions, const std::vector<double>& discovery_fraction_slopes, const double max_age, const long smoothing_span, const long smoothing_order);
RcppExport SEXP _castor_reconstruct_past_diversity_from_biased_coalescent_CPP(SEXP timesSEXP, SEXP raw_coalescent_diversitiesSEXP, SEXP birth_rates_pcSEXP, SEXP discovery_fractionsSEXP, SEXP discovery_fraction_slopesSEXP, SEXP max_ageSEXP, SEXP smoothing_spanSEXP, SEXP smoothing_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type raw_coalescent_diversities(raw_coalescent_diversitiesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_rates_pc(birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type discovery_fractions(discovery_fractionsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type discovery_fraction_slopes(discovery_fraction_slopesSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_span(smoothing_spanSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_order(smoothing_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_past_diversity_from_biased_coalescent_CPP(times, raw_coalescent_diversities, birth_rates_pc, discovery_fractions, discovery_fraction_slopes, max_age, smoothing_span, smoothing_order));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct_past_diversifications_CPP
Rcpp::List reconstruct_past_diversifications_CPP(const std::vector<double>& times, const std::vector<double>& raw_diversities, const std::vector<double>& birth_rates_pc, const double rarefaction, const long Nsplits, const double max_age, const long smoothing_span, const long smoothing_order);
RcppExport SEXP _castor_reconstruct_past_diversifications_CPP(SEXP timesSEXP, SEXP raw_diversitiesSEXP, SEXP birth_rates_pcSEXP, SEXP rarefactionSEXP, SEXP NsplitsSEXP, SEXP max_ageSEXP, SEXP smoothing_spanSEXP, SEXP smoothing_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type raw_diversities(raw_diversitiesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_rates_pc(birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type rarefaction(rarefactionSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_span(smoothing_spanSEXP);
    Rcpp::traits::input_parameter< const long >::type smoothing_order(smoothing_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct_past_diversifications_CPP(times, raw_diversities, birth_rates_pc, rarefaction, Nsplits, max_age, smoothing_span, smoothing_order));
    return rcpp_result_gen;
END_RCPP
}
// get_diversities_from_birth_and_death_events_CPP
Rcpp::List get_diversities_from_birth_and_death_events_CPP(const std::vector<double>& times, const std::vector<double>& birth_times, const std::vector<double>& death_times, const double start_diversity, const double Nsplits);
RcppExport SEXP _castor_get_diversities_from_birth_and_death_events_CPP(SEXP timesSEXP, SEXP birth_timesSEXP, SEXP death_timesSEXP, SEXP start_diversitySEXP, SEXP NsplitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_times(birth_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type death_times(death_timesSEXP);
    Rcpp::traits::input_parameter< const double >::type start_diversity(start_diversitySEXP);
    Rcpp::traits::input_parameter< const double >::type Nsplits(NsplitsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_diversities_from_birth_and_death_events_CPP(times, birth_times, death_times, start_diversity, Nsplits));
    return rcpp_result_gen;
END_RCPP
}
// get_incoming_edges_per_clade_CPP
std::vector<std::vector<long> > get_incoming_edges_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_get_incoming_edges_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_incoming_edges_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_root_clade_CPP
long get_root_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_get_root_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_root_clade_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_traversal_root_to_tips_CPP
Rcpp::List get_tree_traversal_root_to_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const bool include_tips);
RcppExport SEXP _castor_get_tree_traversal_root_to_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP include_tipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_traversal_root_to_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, include_tips));
    return rcpp_result_gen;
END_RCPP
}
// get_outgoing_edges_per_clade_CPP
std::vector<std::vector<long> > get_outgoing_edges_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_get_outgoing_edges_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_outgoing_edges_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_paths_root_to_tips_CPP
std::vector<std::vector<long> > get_paths_root_to_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_get_paths_root_to_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_paths_root_to_tips_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_adjacent_edges_per_edge_CPP
std::vector<std::vector<long> > get_adjacent_edges_per_edge_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_get_adjacent_edges_per_edge_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_adjacent_edges_per_edge_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_total_tip_count_per_node_CPP
IntegerVector get_total_tip_count_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_get_total_tip_count_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_total_tip_count_per_node_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_mean_depth_per_node_CPP
NumericVector get_mean_depth_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length);
RcppExport SEXP _castor_get_mean_depth_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mean_depth_per_node_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_child_count_per_node_CPP
NumericVector get_child_count_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_get_child_count_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_child_count_per_node_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_min_max_tip_distance_from_root_CPP
Rcpp::List get_min_max_tip_distance_from_root_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length);
RcppExport SEXP _castor_get_min_max_tip_distance_from_root_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_min_max_tip_distance_from_root_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_distances_from_root_CPP
NumericVector get_distances_from_root_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length);
RcppExport SEXP _castor_get_distances_from_root_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_distances_from_root_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_closest_tip_per_clade_CPP
Rcpp::List get_closest_tip_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& onlyToTips, bool only_descending_tips, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_get_closest_tip_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP onlyToTipsSEXP, SEXP only_descending_tipsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type onlyToTips(onlyToTipsSEXP);
    Rcpp::traits::input_parameter< bool >::type only_descending_tips(only_descending_tipsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_closest_tip_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, onlyToTips, only_descending_tips, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_farthest_tip_per_clade_CPP
Rcpp::List get_farthest_tip_per_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& onlyToTips, bool only_descending_tips, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_get_farthest_tip_per_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP onlyToTipsSEXP, SEXP only_descending_tipsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type onlyToTips(onlyToTipsSEXP);
    Rcpp::traits::input_parameter< bool >::type only_descending_tips(only_descending_tipsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_farthest_tip_per_clade_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, onlyToTips, only_descending_tips, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_distance_matrix_between_clades_CPP
NumericMatrix get_distance_matrix_between_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& focal_clades, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_get_distance_matrix_between_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP focal_cladesSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type focal_clades(focal_cladesSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_distance_matrix_between_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, focal_clades, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_distances_between_clades_CPP
NumericVector get_distances_between_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& cladesA, const std::vector<long>& cladesB, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_get_distances_between_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP cladesASEXP, SEXP cladesBSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type cladesA(cladesASEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type cladesB(cladesBSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_distances_between_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, cladesA, cladesB, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// count_transitions_between_clades_CPP
Rcpp::List count_transitions_between_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& clade_states, const std::vector<long>& cladesA, const std::vector<long>& cladesB);
RcppExport SEXP _castor_count_transitions_between_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP clade_statesSEXP, SEXP cladesASEXP, SEXP cladesBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type clade_states(clade_statesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type cladesA(cladesASEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type cladesB(cladesBSEXP);
    rcpp_result_gen = Rcpp::wrap(count_transitions_between_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, clade_states, cladesA, cladesB));
    return rcpp_result_gen;
END_RCPP
}
// count_clades_at_regular_times_CPP
Rcpp::List count_clades_at_regular_times_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const long Ntimes, double min_time, double max_time, const long degree, const bool include_slopes);
RcppExport SEXP _castor_count_clades_at_regular_times_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP NtimesSEXP, SEXP min_timeSEXP, SEXP max_timeSEXP, SEXP degreeSEXP, SEXP include_slopesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntimes(NtimesSEXP);
    Rcpp::traits::input_parameter< double >::type min_time(min_timeSEXP);
    Rcpp::traits::input_parameter< double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const long >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_slopes(include_slopesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_clades_at_regular_times_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, Ntimes, min_time, max_time, degree, include_slopes));
    return rcpp_result_gen;
END_RCPP
}
// count_clades_at_times_CPP
IntegerVector count_clades_at_times_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& times, const long degree);
RcppExport SEXP _castor_count_clades_at_times_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP timesSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const long >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(count_clades_at_times_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, times, degree));
    return rcpp_result_gen;
END_RCPP
}
// get_LTT_BD_CPP
NumericVector get_LTT_BD_CPP(const std::vector<double>& birth_times, const std::vector<double>& death_times, const std::vector<double>& time_grid);
RcppExport SEXP _castor_get_LTT_BD_CPP(SEXP birth_timesSEXP, SEXP death_timesSEXP, SEXP time_gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_times(birth_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type death_times(death_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_grid(time_gridSEXP);
    rcpp_result_gen = Rcpp::wrap(get_LTT_BD_CPP(birth_times, death_times, time_grid));
    return rcpp_result_gen;
END_RCPP
}
// tree_has_multifurcations_CPP
bool tree_has_multifurcations_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_tree_has_multifurcations_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_has_multifurcations_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_speciation_extinction_events_CPP
Rcpp::List get_speciation_extinction_events_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double min_age, const double max_age, const std::vector<long>& only_clades, const std::vector<long>& omit_clades);
RcppExport SEXP _castor_get_speciation_extinction_events_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP min_ageSEXP, SEXP max_ageSEXP, SEXP only_cladesSEXP, SEXP omit_cladesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type min_age(min_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type max_age(max_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type only_clades(only_cladesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type omit_clades(omit_cladesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_speciation_extinction_events_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, min_age, max_age, only_clades, omit_clades));
    return rcpp_result_gen;
END_RCPP
}
// get_relative_evolutionary_divergences_CPP
NumericVector get_relative_evolutionary_divergences_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length);
RcppExport SEXP _castor_get_relative_evolutionary_divergences_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_relative_evolutionary_divergences_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// date_tree_via_RED_CPP
Rcpp::List date_tree_via_RED_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const long anchor_node, const long anchor_age);
RcppExport SEXP _castor_date_tree_via_RED_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP anchor_nodeSEXP, SEXP anchor_ageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const long >::type anchor_node(anchor_nodeSEXP);
    Rcpp::traits::input_parameter< const long >::type anchor_age(anchor_ageSEXP);
    rcpp_result_gen = Rcpp::wrap(date_tree_via_RED_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, anchor_node, anchor_age));
    return rcpp_result_gen;
END_RCPP
}
// tree_to_clade_list_CPP
Rcpp::List tree_to_clade_list_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const bool postorder);
RcppExport SEXP _castor_tree_to_clade_list_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP postorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const bool >::type postorder(postorderSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_to_clade_list_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, postorder));
    return rcpp_result_gen;
END_RCPP
}
// extract_fasttree_constraints_CPP
Rcpp::List extract_fasttree_constraints_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_extract_fasttree_constraints_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_fasttree_constraints_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// get_gamma_statistic_CPP
double get_gamma_statistic_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length);
RcppExport SEXP _castor_get_gamma_statistic_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gamma_statistic_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// get_Colless_Imbalance_CPP
double get_Colless_Imbalance_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const bool normalized);
RcppExport SEXP _castor_get_Colless_Imbalance_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Colless_Imbalance_CPP(Ntips, Nnodes, Nedges, tree_edge, normalized));
    return rcpp_result_gen;
END_RCPP
}
// sort_tree_edges_root_to_tips_CPP
IntegerVector sort_tree_edges_root_to_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const bool depth_first_search, const bool root_to_tips, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_sort_tree_edges_root_to_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP depth_first_searchSEXP, SEXP root_to_tipsSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const bool >::type depth_first_search(depth_first_searchSEXP);
    Rcpp::traits::input_parameter< const bool >::type root_to_tips(root_to_tipsSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_tree_edges_root_to_tips_CPP(Ntips, Nnodes, Nedges, depth_first_search, root_to_tips, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// root_tree_at_node_CPP
IntegerVector root_tree_at_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const long new_root_node);
RcppExport SEXP _castor_root_tree_at_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP new_root_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const long >::type new_root_node(new_root_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(root_tree_at_node_CPP(Ntips, Nnodes, Nedges, tree_edge, new_root_node));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_with_collapsed_monofurcations_CPP
Rcpp::List get_tree_with_collapsed_monofurcations_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const bool force_keep_root, const std::vector<long>& force_keep_nodes);
RcppExport SEXP _castor_get_tree_with_collapsed_monofurcations_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP force_keep_rootSEXP, SEXP force_keep_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_keep_root(force_keep_rootSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type force_keep_nodes(force_keep_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_with_collapsed_monofurcations_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, force_keep_root, force_keep_nodes));
    return rcpp_result_gen;
END_RCPP
}
// get_subtree_with_specific_clades_CPP
Rcpp::List get_subtree_with_specific_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& clades_to_keep, const bool collapse_monofurcations, const bool force_keep_root, bool keep_all_children_of_explicit_clades_to_keep, bool keep_all_tips_of_explicit_clades_to_keep);
RcppExport SEXP _castor_get_subtree_with_specific_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP clades_to_keepSEXP, SEXP collapse_monofurcationsSEXP, SEXP force_keep_rootSEXP, SEXP keep_all_children_of_explicit_clades_to_keepSEXP, SEXP keep_all_tips_of_explicit_clades_to_keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type clades_to_keep(clades_to_keepSEXP);
    Rcpp::traits::input_parameter< const bool >::type collapse_monofurcations(collapse_monofurcationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_keep_root(force_keep_rootSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all_children_of_explicit_clades_to_keep(keep_all_children_of_explicit_clades_to_keepSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_all_tips_of_explicit_clades_to_keep(keep_all_tips_of_explicit_clades_to_keepSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subtree_with_specific_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, clades_to_keep, collapse_monofurcations, force_keep_root, keep_all_children_of_explicit_clades_to_keep, keep_all_tips_of_explicit_clades_to_keep));
    return rcpp_result_gen;
END_RCPP
}
// get_subtree_at_node_CPP
Rcpp::List get_subtree_at_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const long new_root_node);
RcppExport SEXP _castor_get_subtree_at_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP new_root_nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const long >::type new_root_node(new_root_nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subtree_at_node_CPP(Ntips, Nnodes, Nedges, tree_edge, new_root_node));
    return rcpp_result_gen;
END_RCPP
}
// get_subtrees_at_nodes_CPP
Rcpp::List get_subtrees_at_nodes_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& new_root_nodes);
RcppExport SEXP _castor_get_subtrees_at_nodes_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP new_root_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type new_root_nodes(new_root_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subtrees_at_nodes_CPP(Ntips, Nnodes, Nedges, tree_edge, new_root_nodes));
    return rcpp_result_gen;
END_RCPP
}
// get_subtree_with_specific_tips_CPP
Rcpp::List get_subtree_with_specific_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& tips_to_keep, bool collapse_monofurcations, bool force_keep_root);
RcppExport SEXP _castor_get_subtree_with_specific_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tips_to_keepSEXP, SEXP collapse_monofurcationsSEXP, SEXP force_keep_rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tips_to_keep(tips_to_keepSEXP);
    Rcpp::traits::input_parameter< bool >::type collapse_monofurcations(collapse_monofurcationsSEXP);
    Rcpp::traits::input_parameter< bool >::type force_keep_root(force_keep_rootSEXP);
    rcpp_result_gen = Rcpp::wrap(get_subtree_with_specific_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tips_to_keep, collapse_monofurcations, force_keep_root));
    return rcpp_result_gen;
END_RCPP
}
// find_root_for_monophyletic_clade_CPP
long find_root_for_monophyletic_clade_CPP(const long Ntips, const long Nnodes, const long Nedges, std::vector<long> tree_edge, const bool is_rooted, const std::vector<long>& target_tips, const bool as_MRCA);
RcppExport SEXP _castor_find_root_for_monophyletic_clade_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP is_rootedSEXP, SEXP target_tipsSEXP, SEXP as_MRCASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< std::vector<long> >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_rooted(is_rootedSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type target_tips(target_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_MRCA(as_MRCASEXP);
    rcpp_result_gen = Rcpp::wrap(find_root_for_monophyletic_clade_CPP(Ntips, Nnodes, Nedges, tree_edge, is_rooted, target_tips, as_MRCA));
    return rcpp_result_gen;
END_RCPP
}
// find_edge_splitting_tree_CPP
Rcpp::List find_edge_splitting_tree_CPP(const long Ntips, const long Nnodes, const long Nedges, std::vector<long> tree_edge, const bool is_rooted, const std::vector<long>& target_tips, const bool include_misplaced);
RcppExport SEXP _castor_find_edge_splitting_tree_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP is_rootedSEXP, SEXP target_tipsSEXP, SEXP include_misplacedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< std::vector<long> >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const bool >::type is_rooted(is_rootedSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type target_tips(target_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_misplaced(include_misplacedSEXP);
    rcpp_result_gen = Rcpp::wrap(find_edge_splitting_tree_CPP(Ntips, Nnodes, Nedges, tree_edge, is_rooted, target_tips, include_misplaced));
    return rcpp_result_gen;
END_RCPP
}
// collapse_tree_at_resolution_CPP
Rcpp::List collapse_tree_at_resolution_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double resolution, const bool shorten, const std::string& criterion);
RcppExport SEXP _castor_collapse_tree_at_resolution_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP resolutionSEXP, SEXP shortenSEXP, SEXP criterionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< const bool >::type shorten(shortenSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type criterion(criterionSEXP);
    rcpp_result_gen = Rcpp::wrap(collapse_tree_at_resolution_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, resolution, shorten, criterion));
    return rcpp_result_gen;
END_RCPP
}
// trim_tree_at_height_CPP
Rcpp::List trim_tree_at_height_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double max_distance_from_root);
RcppExport SEXP _castor_trim_tree_at_height_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP max_distance_from_rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type max_distance_from_root(max_distance_from_rootSEXP);
    rcpp_result_gen = Rcpp::wrap(trim_tree_at_height_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, max_distance_from_root));
    return rcpp_result_gen;
END_RCPP
}
// split_tree_at_height_CPP
Rcpp::List split_tree_at_height_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double root_edge, const double split_height);
RcppExport SEXP _castor_split_tree_at_height_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP root_edgeSEXP, SEXP split_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type root_edge(root_edgeSEXP);
    Rcpp::traits::input_parameter< const double >::type split_height(split_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(split_tree_at_height_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, root_edge, split_height));
    return rcpp_result_gen;
END_RCPP
}
// extend_tree_to_height_CPP
Rcpp::List extend_tree_to_height_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, double new_height);
RcppExport SEXP _castor_extend_tree_to_height_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP new_heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type new_height(new_heightSEXP);
    rcpp_result_gen = Rcpp::wrap(extend_tree_to_height_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, new_height));
    return rcpp_result_gen;
END_RCPP
}
// multifurcations_to_bifurcations_CPP
Rcpp::List multifurcations_to_bifurcations_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double dummy_edge_length);
RcppExport SEXP _castor_multifurcations_to_bifurcations_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP dummy_edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type dummy_edge_length(dummy_edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(multifurcations_to_bifurcations_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, dummy_edge_length));
    return rcpp_result_gen;
END_RCPP
}
// merge_short_edges_CPP
Rcpp::List merge_short_edges_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double edge_length_epsilon, const bool force_keep_tips);
RcppExport SEXP _castor_merge_short_edges_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP edge_length_epsilonSEXP, SEXP force_keep_tipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type edge_length_epsilon(edge_length_epsilonSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_keep_tips(force_keep_tipsSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_short_edges_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, edge_length_epsilon, force_keep_tips));
    return rcpp_result_gen;
END_RCPP
}
// pick_random_tips_CPP
std::vector<long> pick_random_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const long Nrandoms, const long Nsubsets, const bool with_replacement);
RcppExport SEXP _castor_pick_random_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP NrandomsSEXP, SEXP NsubsetsSEXP, SEXP with_replacementSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const long >::type Nrandoms(NrandomsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsubsets(NsubsetsSEXP);
    Rcpp::traits::input_parameter< const bool >::type with_replacement(with_replacementSEXP);
    rcpp_result_gen = Rcpp::wrap(pick_random_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, Nrandoms, Nsubsets, with_replacement));
    return rcpp_result_gen;
END_RCPP
}
// assign_clades_to_taxa_CPP
Rcpp::List assign_clades_to_taxa_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& representatives);
RcppExport SEXP _castor_assign_clades_to_taxa_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP representativesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type representatives(representativesSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_clades_to_taxa_CPP(Ntips, Nnodes, Nedges, tree_edge, representatives));
    return rcpp_result_gen;
END_RCPP
}
// extract_independent_sister_tips_CPP
Rcpp::List extract_independent_sister_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge);
RcppExport SEXP _castor_extract_independent_sister_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_independent_sister_tips_CPP(Ntips, Nnodes, Nedges, tree_edge));
    return rcpp_result_gen;
END_RCPP
}
// congruify_trees_CPP
Rcpp::List congruify_trees_CPP(const long RNtips, const long RNnodes, const long RNedges, const std::vector<long>& Rtree_edge, const long TNtips, const long TNnodes, const long TNedges, const std::vector<long>& Ttree_edge, const std::vector<long>& mapping);
RcppExport SEXP _castor_congruify_trees_CPP(SEXP RNtipsSEXP, SEXP RNnodesSEXP, SEXP RNedgesSEXP, SEXP Rtree_edgeSEXP, SEXP TNtipsSEXP, SEXP TNnodesSEXP, SEXP TNedgesSEXP, SEXP Ttree_edgeSEXP, SEXP mappingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type RNtips(RNtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type RNnodes(RNnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type RNedges(RNedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type Rtree_edge(Rtree_edgeSEXP);
    Rcpp::traits::input_parameter< const long >::type TNtips(TNtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type TNnodes(TNnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type TNedges(TNedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type Ttree_edge(Ttree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type mapping(mappingSEXP);
    rcpp_result_gen = Rcpp::wrap(congruify_trees_CPP(RNtips, RNnodes, RNedges, Rtree_edge, TNtips, TNnodes, TNedges, Ttree_edge, mapping));
    return rcpp_result_gen;
END_RCPP
}
// match_tree_nodes_CPP
Rcpp::List match_tree_nodes_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edgeA, const std::vector<long>& tree_edgeB, const std::vector<long>& tipsA2B);
RcppExport SEXP _castor_match_tree_nodes_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeASEXP, SEXP tree_edgeBSEXP, SEXP tipsA2BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edgeA(tree_edgeASEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edgeB(tree_edgeBSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tipsA2B(tipsA2BSEXP);
    rcpp_result_gen = Rcpp::wrap(match_tree_nodes_CPP(Ntips, Nnodes, Nedges, tree_edgeA, tree_edgeB, tipsA2B));
    return rcpp_result_gen;
END_RCPP
}
// get_Robinson_Foulds_distance_CPP
Rcpp::List get_Robinson_Foulds_distance_CPP(const long Ntips, const long NnodesA, const long NedgesA, const std::vector<long>& tree_edgeA, const long NnodesB, const long NedgesB, const std::vector<long>& tree_edgeB, const std::vector<long>& tipsA2B);
RcppExport SEXP _castor_get_Robinson_Foulds_distance_CPP(SEXP NtipsSEXP, SEXP NnodesASEXP, SEXP NedgesASEXP, SEXP tree_edgeASEXP, SEXP NnodesBSEXP, SEXP NedgesBSEXP, SEXP tree_edgeBSEXP, SEXP tipsA2BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type NnodesA(NnodesASEXP);
    Rcpp::traits::input_parameter< const long >::type NedgesA(NedgesASEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edgeA(tree_edgeASEXP);
    Rcpp::traits::input_parameter< const long >::type NnodesB(NnodesBSEXP);
    Rcpp::traits::input_parameter< const long >::type NedgesB(NedgesBSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edgeB(tree_edgeBSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tipsA2B(tipsA2BSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Robinson_Foulds_distance_CPP(Ntips, NnodesA, NedgesA, tree_edgeA, NnodesB, NedgesB, tree_edgeB, tipsA2B));
    return rcpp_result_gen;
END_RCPP
}
// relative_to_absolute_node_ages_CPP
std::vector<double> relative_to_absolute_node_ages_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& traversal_queue, const std::vector<double>& relative_node_ages, const std::vector<double>& min_abs_node_ages, const std::vector<double>& max_abs_node_ages);
RcppExport SEXP _castor_relative_to_absolute_node_ages_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP traversal_queueSEXP, SEXP relative_node_agesSEXP, SEXP min_abs_node_agesSEXP, SEXP max_abs_node_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type traversal_queue(traversal_queueSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type relative_node_ages(relative_node_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type min_abs_node_ages(min_abs_node_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type max_abs_node_ages(max_abs_node_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(relative_to_absolute_node_ages_CPP(Ntips, Nnodes, Nedges, tree_edge, traversal_queue, relative_node_ages, min_abs_node_ages, max_abs_node_ages));
    return rcpp_result_gen;
END_RCPP
}
// propagate_min_ages_upstream_CPP
std::vector<double> propagate_min_ages_upstream_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& traversal_queue, const std::vector<long>& anchor_nodes, const std::vector<long>& anchor_min_ages);
RcppExport SEXP _castor_propagate_min_ages_upstream_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP traversal_queueSEXP, SEXP anchor_nodesSEXP, SEXP anchor_min_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type traversal_queue(traversal_queueSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_nodes(anchor_nodesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_min_ages(anchor_min_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(propagate_min_ages_upstream_CPP(Ntips, Nnodes, Nedges, tree_edge, traversal_queue, anchor_nodes, anchor_min_ages));
    return rcpp_result_gen;
END_RCPP
}
// propagate_max_ages_downstream_CPP
std::vector<double> propagate_max_ages_downstream_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& traversal_queue, const std::vector<long>& anchor_nodes, const std::vector<long>& anchor_max_ages);
RcppExport SEXP _castor_propagate_max_ages_downstream_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP traversal_queueSEXP, SEXP anchor_nodesSEXP, SEXP anchor_max_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type traversal_queue(traversal_queueSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_nodes(anchor_nodesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type anchor_max_ages(anchor_max_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(propagate_max_ages_downstream_CPP(Ntips, Nnodes, Nedges, tree_edge, traversal_queue, anchor_nodes, anchor_max_ages));
    return rcpp_result_gen;
END_RCPP
}
// get_phylogram_geometry_CPP
Rcpp::List get_phylogram_geometry_CPP(const long Ntips, const long Nnodes, const long Nedges, std::vector<long> tree_edge, const std::vector<double>& edge_length);
RcppExport SEXP _castor_get_phylogram_geometry_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< std::vector<long> >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_phylogram_geometry_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length));
    return rcpp_result_gen;
END_RCPP
}
// tree_to_Newick_string_CPP
std::string tree_to_Newick_string_CPP(const long Ntips, const long Nnodes, const long Nedges, std::vector<long> tree_edge, const std::vector<double>& edge_length, const StringVector& tip_labels, const StringVector& node_labels, const StringVector& edge_labels, const std::vector<long>& edge_numbers, const long digits, const double root_edge_length, const int quoting);
RcppExport SEXP _castor_tree_to_Newick_string_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_labelsSEXP, SEXP node_labelsSEXP, SEXP edge_labelsSEXP, SEXP edge_numbersSEXP, SEXP digitsSEXP, SEXP root_edge_lengthSEXP, SEXP quotingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< std::vector<long> >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type tip_labels(tip_labelsSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type node_labels(node_labelsSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type edge_labels(edge_labelsSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type edge_numbers(edge_numbersSEXP);
    Rcpp::traits::input_parameter< const long >::type digits(digitsSEXP);
    Rcpp::traits::input_parameter< const double >::type root_edge_length(root_edge_lengthSEXP);
    Rcpp::traits::input_parameter< const int >::type quoting(quotingSEXP);
    rcpp_result_gen = Rcpp::wrap(tree_to_Newick_string_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_labels, node_labels, edge_labels, edge_numbers, digits, root_edge_length, quoting));
    return rcpp_result_gen;
END_RCPP
}
// read_Newick_string_CPP
Rcpp::List read_Newick_string_CPP(std::string input, const bool underscores_as_blanks, const bool interpret_quotes, const bool look_for_edge_names, const bool look_for_edge_numbers);
RcppExport SEXP _castor_read_Newick_string_CPP(SEXP inputSEXP, SEXP underscores_as_blanksSEXP, SEXP interpret_quotesSEXP, SEXP look_for_edge_namesSEXP, SEXP look_for_edge_numbersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input(inputSEXP);
    Rcpp::traits::input_parameter< const bool >::type underscores_as_blanks(underscores_as_blanksSEXP);
    Rcpp::traits::input_parameter< const bool >::type interpret_quotes(interpret_quotesSEXP);
    Rcpp::traits::input_parameter< const bool >::type look_for_edge_names(look_for_edge_namesSEXP);
    Rcpp::traits::input_parameter< const bool >::type look_for_edge_numbers(look_for_edge_numbersSEXP);
    rcpp_result_gen = Rcpp::wrap(read_Newick_string_CPP(input, underscores_as_blanks, interpret_quotes, look_for_edge_names, look_for_edge_numbers));
    return rcpp_result_gen;
END_RCPP
}
// get_trait_depth_consenTRAIT_CPP
Rcpp::List get_trait_depth_consenTRAIT_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& state_per_tip, const double threshold_fraction, const bool count_singletons, const bool weighted, const double singleton_threshold, const long Npermutations, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_get_trait_depth_consenTRAIT_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP state_per_tipSEXP, SEXP threshold_fractionSEXP, SEXP count_singletonsSEXP, SEXP weightedSEXP, SEXP singleton_thresholdSEXP, SEXP NpermutationsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type state_per_tip(state_per_tipSEXP);
    Rcpp::traits::input_parameter< const double >::type threshold_fraction(threshold_fractionSEXP);
    Rcpp::traits::input_parameter< const bool >::type count_singletons(count_singletonsSEXP);
    Rcpp::traits::input_parameter< const bool >::type weighted(weightedSEXP);
    Rcpp::traits::input_parameter< const double >::type singleton_threshold(singleton_thresholdSEXP);
    Rcpp::traits::input_parameter< const long >::type Npermutations(NpermutationsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_trait_depth_consenTRAIT_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, state_per_tip, threshold_fraction, count_singletons, weighted, singleton_threshold, Npermutations, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// ACF_continuous_trait_CPP
Rcpp::List ACF_continuous_trait_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& state_per_tip, long Npairs, const long Nbins, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_ACF_continuous_trait_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP state_per_tipSEXP, SEXP NpairsSEXP, SEXP NbinsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_per_tip(state_per_tipSEXP);
    Rcpp::traits::input_parameter< long >::type Npairs(NpairsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nbins(NbinsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(ACF_continuous_trait_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, state_per_tip, Npairs, Nbins, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_empirical_state_frequencies_per_node_CPP
Rcpp::List get_empirical_state_frequencies_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const std::vector<long>& tree_edge, const std::vector<long>& tip_states);
RcppExport SEXP _castor_get_empirical_state_frequencies_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP tip_statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tip_states(tip_statesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_empirical_state_frequencies_per_node_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, tip_states));
    return rcpp_result_gen;
END_RCPP
}
// get_trait_richness_collectors_curve_CPP
Rcpp::List get_trait_richness_collectors_curve_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Ntraits, const long root, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& tip2first_trait, const std::vector<long>& tip2last_trait, const std::vector<long>& traits, const std::vector<long>& rarefaction_depths, const long Nrepeats, const std::string& tip_distribution, const bool use_realized_depths);
RcppExport SEXP _castor_get_trait_richness_collectors_curve_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NtraitsSEXP, SEXP rootSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip2first_traitSEXP, SEXP tip2last_traitSEXP, SEXP traitsSEXP, SEXP rarefaction_depthsSEXP, SEXP NrepeatsSEXP, SEXP tip_distributionSEXP, SEXP use_realized_depthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntraits(NtraitsSEXP);
    Rcpp::traits::input_parameter< const long >::type root(rootSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tip2first_trait(tip2first_traitSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tip2last_trait(tip2last_traitSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type traits(traitsSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type rarefaction_depths(rarefaction_depthsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nrepeats(NrepeatsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type tip_distribution(tip_distributionSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_realized_depths(use_realized_depthsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_trait_richness_collectors_curve_CPP(Ntips, Nnodes, Nedges, Ntraits, root, tree_edge, edge_length, tip2first_trait, tip2last_trait, traits, rarefaction_depths, Nrepeats, tip_distribution, use_realized_depths));
    return rcpp_result_gen;
END_RCPP
}
// get_phylogenetic_independent_contrasts_CPP
Rcpp::List get_phylogenetic_independent_contrasts_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Ntraits, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& tip_states, const bool only_bifurcations, const bool scaled);
RcppExport SEXP _castor_get_phylogenetic_independent_contrasts_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NtraitsSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP only_bifurcationsSEXP, SEXP scaledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntraits(NtraitsSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< const bool >::type only_bifurcations(only_bifurcationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type scaled(scaledSEXP);
    rcpp_result_gen = Rcpp::wrap(get_phylogenetic_independent_contrasts_CPP(Ntips, Nnodes, Nedges, Ntraits, tree_edge, edge_length, tip_states, only_bifurcations, scaled));
    return rcpp_result_gen;
END_RCPP
}
// get_trait_stats_at_times_CPP
Rcpp::List get_trait_stats_at_times_CPP(const long Ntips, const long Nnodes, const long Nedges, std::vector<long> tree_edge, const std::vector<double>& edge_length, const std::vector<double>& times, const std::vector<double>& states);
RcppExport SEXP _castor_get_trait_stats_at_times_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP timesSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< std::vector<long> >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_trait_stats_at_times_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, times, states));
    return rcpp_result_gen;
END_RCPP
}
// get_mrca_defining_tips_CPP
Rcpp::List get_mrca_defining_tips_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& mrcas, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_get_mrca_defining_tips_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP mrcasSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type mrcas(mrcasSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mrca_defining_tips_CPP(Ntips, Nnodes, Nedges, tree_edge, mrcas, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_pairwise_ancestries_CPP
IntegerVector get_pairwise_ancestries_CPP(const long Ntips, const long Nnodes, const long Nedges, const long root, const std::vector<long>& tree_edge, const std::vector<long>& focal_clades);
RcppExport SEXP _castor_get_pairwise_ancestries_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP rootSEXP, SEXP tree_edgeSEXP, SEXP focal_cladesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type root(rootSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type focal_clades(focal_cladesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pairwise_ancestries_CPP(Ntips, Nnodes, Nedges, root, tree_edge, focal_clades));
    return rcpp_result_gen;
END_RCPP
}
// get_most_recent_common_ancestors_CPP
IntegerVector get_most_recent_common_ancestors_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& cladesA, const std::vector<long>& cladesB, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_get_most_recent_common_ancestors_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP cladesASEXP, SEXP cladesBSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type cladesA(cladesASEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type cladesB(cladesBSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_most_recent_common_ancestors_CPP(Ntips, Nnodes, Nedges, tree_edge, cladesA, cladesB, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// get_most_recent_common_ancestor_CPP
long get_most_recent_common_ancestor_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& descendants);
RcppExport SEXP _castor_get_most_recent_common_ancestor_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP descendantsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type descendants(descendantsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_most_recent_common_ancestor_CPP(Ntips, Nnodes, Nedges, tree_edge, descendants));
    return rcpp_result_gen;
END_RCPP
}
// is_monophyletic_tip_set_CPP
bool is_monophyletic_tip_set_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& focal_tips);
RcppExport SEXP _castor_is_monophyletic_tip_set_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP focal_tipsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type focal_tips(focal_tipsSEXP);
    rcpp_result_gen = Rcpp::wrap(is_monophyletic_tip_set_CPP(Ntips, Nnodes, Nedges, tree_edge, focal_tips));
    return rcpp_result_gen;
END_RCPP
}
// WMPR_ASR_CPP
Rcpp::List WMPR_ASR_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& tip_states, const std::vector<double>& transition_costs, const double branch_length_exponent, bool weight_posteriors_by_scenario_counts, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_WMPR_ASR_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP transition_costsSEXP, SEXP branch_length_exponentSEXP, SEXP weight_posteriors_by_scenario_countsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_costs(transition_costsSEXP);
    Rcpp::traits::input_parameter< const double >::type branch_length_exponent(branch_length_exponentSEXP);
    Rcpp::traits::input_parameter< bool >::type weight_posteriors_by_scenario_counts(weight_posteriors_by_scenario_countsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(WMPR_ASR_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, tip_states, transition_costs, branch_length_exponent, weight_posteriors_by_scenario_counts, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// ASR_with_fixed_rates_Markov_model_CPP
Rcpp::List ASR_with_fixed_rates_Markov_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& transition_matrix, const ComplexVector& eigenvalues, const ComplexVector& EVmatrix, const ComplexVector& inverse_EVmatrix, const std::vector<double>& prior_probabilities_per_tip, const std::string& root_prior_type, const std::vector<double>& root_prior, bool include_ancestral_likelihoods, bool reroot, const double runtime_out_seconds, const double exponentiation_accuracy, const long max_polynomials, const bool store_exponentials);
RcppExport SEXP _castor_ASR_with_fixed_rates_Markov_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP transition_matrixSEXP, SEXP eigenvaluesSEXP, SEXP EVmatrixSEXP, SEXP inverse_EVmatrixSEXP, SEXP prior_probabilities_per_tipSEXP, SEXP root_prior_typeSEXP, SEXP root_priorSEXP, SEXP include_ancestral_likelihoodsSEXP, SEXP rerootSEXP, SEXP runtime_out_secondsSEXP, SEXP exponentiation_accuracySEXP, SEXP max_polynomialsSEXP, SEXP store_exponentialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const ComplexVector& >::type eigenvalues(eigenvaluesSEXP);
    Rcpp::traits::input_parameter< const ComplexVector& >::type EVmatrix(EVmatrixSEXP);
    Rcpp::traits::input_parameter< const ComplexVector& >::type inverse_EVmatrix(inverse_EVmatrixSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type prior_probabilities_per_tip(prior_probabilities_per_tipSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type root_prior_type(root_prior_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type root_prior(root_priorSEXP);
    Rcpp::traits::input_parameter< bool >::type include_ancestral_likelihoods(include_ancestral_likelihoodsSEXP);
    Rcpp::traits::input_parameter< bool >::type reroot(rerootSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    Rcpp::traits::input_parameter< const double >::type exponentiation_accuracy(exponentiation_accuracySEXP);
    Rcpp::traits::input_parameter< const long >::type max_polynomials(max_polynomialsSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_exponentials(store_exponentialsSEXP);
    rcpp_result_gen = Rcpp::wrap(ASR_with_fixed_rates_Markov_model_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, transition_matrix, eigenvalues, EVmatrix, inverse_EVmatrix, prior_probabilities_per_tip, root_prior_type, root_prior, include_ancestral_likelihoods, reroot, runtime_out_seconds, exponentiation_accuracy, max_polynomials, store_exponentials));
    return rcpp_result_gen;
END_RCPP
}
// Mk_loglikelihood_CPP
Rcpp::List Mk_loglikelihood_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& transition_matrix, const std::vector<double>& prior_probabilities_per_tip, const std::string& root_prior_type, const std::vector<double>& root_prior, const double oldest_age, const double runtime_out_seconds, const double exponentiation_accuracy, const long max_polynomials);
RcppExport SEXP _castor_Mk_loglikelihood_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP transition_matrixSEXP, SEXP prior_probabilities_per_tipSEXP, SEXP root_prior_typeSEXP, SEXP root_priorSEXP, SEXP oldest_ageSEXP, SEXP runtime_out_secondsSEXP, SEXP exponentiation_accuracySEXP, SEXP max_polynomialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type prior_probabilities_per_tip(prior_probabilities_per_tipSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type root_prior_type(root_prior_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type root_prior(root_priorSEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    Rcpp::traits::input_parameter< const double >::type exponentiation_accuracy(exponentiation_accuracySEXP);
    Rcpp::traits::input_parameter< const long >::type max_polynomials(max_polynomialsSEXP);
    rcpp_result_gen = Rcpp::wrap(Mk_loglikelihood_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, transition_matrix, prior_probabilities_per_tip, root_prior_type, root_prior, oldest_age, runtime_out_seconds, exponentiation_accuracy, max_polynomials));
    return rcpp_result_gen;
END_RCPP
}
// TR_Mk_loglikelihood_ICs_CPP
Rcpp::List TR_Mk_loglikelihood_ICs_CPP(const long Nstates, const std::vector<double>& phylodistances, const std::vector<double>& transitions, const std::vector<double>& transition_matrix, const double runtime_out_seconds, const double exponentiation_accuracy, const long max_polynomials);
RcppExport SEXP _castor_TR_Mk_loglikelihood_ICs_CPP(SEXP NstatesSEXP, SEXP phylodistancesSEXP, SEXP transitionsSEXP, SEXP transition_matrixSEXP, SEXP runtime_out_secondsSEXP, SEXP exponentiation_accuracySEXP, SEXP max_polynomialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type phylodistances(phylodistancesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    Rcpp::traits::input_parameter< const double >::type exponentiation_accuracy(exponentiation_accuracySEXP);
    Rcpp::traits::input_parameter< const long >::type max_polynomials(max_polynomialsSEXP);
    rcpp_result_gen = Rcpp::wrap(TR_Mk_loglikelihood_ICs_CPP(Nstates, phylodistances, transitions, transition_matrix, runtime_out_seconds, exponentiation_accuracy, max_polynomials));
    return rcpp_result_gen;
END_RCPP
}
// apply_fixed_rate_Markov_model_to_missing_clades_CPP
NumericVector apply_fixed_rate_Markov_model_to_missing_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& transition_matrix, const double exponentiation_accuracy, const long max_polynomials, LogicalVector likelihoods_known, std::vector<double> likelihoods, const bool unknown_likelihoods_as_priors);
RcppExport SEXP _castor_apply_fixed_rate_Markov_model_to_missing_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP transition_matrixSEXP, SEXP exponentiation_accuracySEXP, SEXP max_polynomialsSEXP, SEXP likelihoods_knownSEXP, SEXP likelihoodsSEXP, SEXP unknown_likelihoods_as_priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const double >::type exponentiation_accuracy(exponentiation_accuracySEXP);
    Rcpp::traits::input_parameter< const long >::type max_polynomials(max_polynomialsSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type likelihoods_known(likelihoods_knownSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type likelihoods(likelihoodsSEXP);
    Rcpp::traits::input_parameter< const bool >::type unknown_likelihoods_as_priors(unknown_likelihoods_as_priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_fixed_rate_Markov_model_to_missing_clades_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, transition_matrix, exponentiation_accuracy, max_polynomials, likelihoods_known, likelihoods, unknown_likelihoods_as_priors));
    return rcpp_result_gen;
END_RCPP
}
// apply_attributes_to_descendants_CPP
NumericVector apply_attributes_to_descendants_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nattributes, const std::vector<long>& tree_edge, std::vector<long> attributes_known, std::vector<double> attributes);
RcppExport SEXP _castor_apply_attributes_to_descendants_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NattributesSEXP, SEXP tree_edgeSEXP, SEXP attributes_knownSEXP, SEXP attributesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nattributes(NattributesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< std::vector<long> >::type attributes_known(attributes_knownSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type attributes(attributesSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_attributes_to_descendants_CPP(Ntips, Nnodes, Nedges, Nattributes, tree_edge, attributes_known, attributes));
    return rcpp_result_gen;
END_RCPP
}
// ASR_via_squared_change_parsimony_CPP
Rcpp::List ASR_via_squared_change_parsimony_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& tip_states, bool global);
RcppExport SEXP _castor_ASR_via_squared_change_parsimony_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP globalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< bool >::type global(globalSEXP);
    rcpp_result_gen = Rcpp::wrap(ASR_via_squared_change_parsimony_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_states, global));
    return rcpp_result_gen;
END_RCPP
}
// get_mean_state_per_node_CPP
Rcpp::List get_mean_state_per_node_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& tip_states);
RcppExport SEXP _castor_get_mean_state_per_node_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_states(tip_statesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_mean_state_per_node_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_states));
    return rcpp_result_gen;
END_RCPP
}
// ASR_via_independent_contrasts_CPP
Rcpp::List ASR_via_independent_contrasts_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& tip_states, const bool include_standard_errors);
RcppExport SEXP _castor_ASR_via_independent_contrasts_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_statesSEXP, SEXP include_standard_errorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_standard_errors(include_standard_errorsSEXP);
    rcpp_result_gen = Rcpp::wrap(ASR_via_independent_contrasts_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_states, include_standard_errors));
    return rcpp_result_gen;
END_RCPP
}
// apply_BM_parsimony_to_missing_clades_CPP
NumericVector apply_BM_parsimony_to_missing_clades_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, LogicalVector states_known, std::vector<double> states);
RcppExport SEXP _castor_apply_BM_parsimony_to_missing_clades_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP states_knownSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type states_known(states_knownSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_BM_parsimony_to_missing_clades_CPP(Ntips, Nnodes, Nedges, tree_edge, states_known, states));
    return rcpp_result_gen;
END_RCPP
}
// ASR_binomial_CPP
Rcpp::List ASR_binomial_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<long>& tip_states, const std::vector<double>& reveal_probs, const std::vector<double>& state0_probs, const long min_revealed);
RcppExport SEXP _castor_ASR_binomial_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP tip_statesSEXP, SEXP reveal_probsSEXP, SEXP state0_probsSEXP, SEXP min_revealedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tip_states(tip_statesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type reveal_probs(reveal_probsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state0_probs(state0_probsSEXP);
    Rcpp::traits::input_parameter< const long >::type min_revealed(min_revealedSEXP);
    rcpp_result_gen = Rcpp::wrap(ASR_binomial_CPP(Ntips, Nnodes, Nedges, tree_edge, tip_states, reveal_probs, state0_probs, min_revealed));
    return rcpp_result_gen;
END_RCPP
}
// get_MuSSE_loglikelihood_classic_CPP
Rcpp::List get_MuSSE_loglikelihood_classic_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const std::vector<long>& tree_edge, const std::vector<double>& node_ages, const std::vector<double>& transition_rates, const std::vector<double>& speciation_rates, const std::vector<double>& extinction_rates, const std::vector<double>& sampling_rates, const std::vector<double>& initial_D_per_tip, const std::vector<double>& initial_E_per_state, const std::vector<double>& root_prior, const double runtime_out_seconds);
RcppExport SEXP _castor_get_MuSSE_loglikelihood_classic_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP node_agesSEXP, SEXP transition_ratesSEXP, SEXP speciation_ratesSEXP, SEXP extinction_ratesSEXP, SEXP sampling_ratesSEXP, SEXP initial_D_per_tipSEXP, SEXP initial_E_per_stateSEXP, SEXP root_priorSEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type node_ages(node_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_rates(transition_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type speciation_rates(speciation_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type extinction_rates(extinction_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sampling_rates(sampling_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type initial_D_per_tip(initial_D_per_tipSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type initial_E_per_state(initial_E_per_stateSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type root_prior(root_priorSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_MuSSE_loglikelihood_classic_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, node_ages, transition_rates, speciation_rates, extinction_rates, sampling_rates, initial_D_per_tip, initial_E_per_state, root_prior, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// get_MuSSE_loglikelihood_CPP
Rcpp::List get_MuSSE_loglikelihood_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const double oldest_age, const std::vector<long>& tree_edge, const std::vector<double>& clade_ages, const std::vector<double>& transition_rates, const std::vector<double>& speciation_rates, const std::vector<double>& extinction_rates, const std::vector<double>& sampling_rates, const std::vector<double>& initial_D_per_tip, const std::vector<double>& initial_E_per_state, const std::string& root_prior_type, const std::vector<double>& root_prior, const std::string& root_conditioning, const bool include_ancestral_likelihoods, const bool include_warnings, const double max_condition_number, const double relative_ODE_step, const double E_value_step, const double D_temporal_resolution, const double runtime_out_seconds);
RcppExport SEXP _castor_get_MuSSE_loglikelihood_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP oldest_ageSEXP, SEXP tree_edgeSEXP, SEXP clade_agesSEXP, SEXP transition_ratesSEXP, SEXP speciation_ratesSEXP, SEXP extinction_ratesSEXP, SEXP sampling_ratesSEXP, SEXP initial_D_per_tipSEXP, SEXP initial_E_per_stateSEXP, SEXP root_prior_typeSEXP, SEXP root_priorSEXP, SEXP root_conditioningSEXP, SEXP include_ancestral_likelihoodsSEXP, SEXP include_warningsSEXP, SEXP max_condition_numberSEXP, SEXP relative_ODE_stepSEXP, SEXP E_value_stepSEXP, SEXP D_temporal_resolutionSEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type clade_ages(clade_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_rates(transition_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type speciation_rates(speciation_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type extinction_rates(extinction_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sampling_rates(sampling_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type initial_D_per_tip(initial_D_per_tipSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type initial_E_per_state(initial_E_per_stateSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type root_prior_type(root_prior_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type root_prior(root_priorSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type root_conditioning(root_conditioningSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_ancestral_likelihoods(include_ancestral_likelihoodsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_warnings(include_warningsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_condition_number(max_condition_numberSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_ODE_step(relative_ODE_stepSEXP);
    Rcpp::traits::input_parameter< const double >::type E_value_step(E_value_stepSEXP);
    Rcpp::traits::input_parameter< const double >::type D_temporal_resolution(D_temporal_resolutionSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_MuSSE_loglikelihood_CPP(Ntips, Nnodes, Nedges, Nstates, oldest_age, tree_edge, clade_ages, transition_rates, speciation_rates, extinction_rates, sampling_rates, initial_D_per_tip, initial_E_per_state, root_prior_type, root_prior, root_conditioning, include_ancestral_likelihoods, include_warnings, max_condition_number, relative_ODE_step, E_value_step, D_temporal_resolution, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// simulate_deterministic_HBD_model_CPP
Rcpp::List simulate_deterministic_HBD_model_CPP(const double census_age, const double oldest_age, const std::vector<double>& age_grid, const std::vector<double>& lambdas, const std::vector<double>& mus, const std::vector<double> mu_over_lambda, const std::vector<double>& PDRs, const double anchor_age, const double anchor_rho, double anchor_lambda, const double anchor_LTT, const long splines_degree, const double relative_dt, const bool allow_unreal);
RcppExport SEXP _castor_simulate_deterministic_HBD_model_CPP(SEXP census_ageSEXP, SEXP oldest_ageSEXP, SEXP age_gridSEXP, SEXP lambdasSEXP, SEXP musSEXP, SEXP mu_over_lambdaSEXP, SEXP PDRsSEXP, SEXP anchor_ageSEXP, SEXP anchor_rhoSEXP, SEXP anchor_lambdaSEXP, SEXP anchor_LTTSEXP, SEXP splines_degreeSEXP, SEXP relative_dtSEXP, SEXP allow_unrealSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type census_age(census_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mus(musSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type mu_over_lambda(mu_over_lambdaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PDRs(PDRsSEXP);
    Rcpp::traits::input_parameter< const double >::type anchor_age(anchor_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type anchor_rho(anchor_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type anchor_lambda(anchor_lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type anchor_LTT(anchor_LTTSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    Rcpp::traits::input_parameter< const bool >::type allow_unreal(allow_unrealSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_deterministic_HBD_model_CPP(census_age, oldest_age, age_grid, lambdas, mus, mu_over_lambda, PDRs, anchor_age, anchor_rho, anchor_lambda, anchor_LTT, splines_degree, relative_dt, allow_unreal));
    return rcpp_result_gen;
END_RCPP
}
// get_PSR_from_PDR_HBD_CPP
Rcpp::List get_PSR_from_PDR_HBD_CPP(const double age0, const double oldest_age, const std::vector<double>& age_grid, const std::vector<double>& PDR, const double rholambda0, const long splines_degree, const double relative_dt, const bool include_nLTT0);
RcppExport SEXP _castor_get_PSR_from_PDR_HBD_CPP(SEXP age0SEXP, SEXP oldest_ageSEXP, SEXP age_gridSEXP, SEXP PDRSEXP, SEXP rholambda0SEXP, SEXP splines_degreeSEXP, SEXP relative_dtSEXP, SEXP include_nLTT0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type age0(age0SEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PDR(PDRSEXP);
    Rcpp::traits::input_parameter< const double >::type rholambda0(rholambda0SEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nLTT0(include_nLTT0SEXP);
    rcpp_result_gen = Rcpp::wrap(get_PSR_from_PDR_HBD_CPP(age0, oldest_age, age_grid, PDR, rholambda0, splines_degree, relative_dt, include_nLTT0));
    return rcpp_result_gen;
END_RCPP
}
// get_PSR_of_HBD_model_CPP
Rcpp::List get_PSR_of_HBD_model_CPP(const double age0, const double oldest_age, const std::vector<double>& age_grid, const std::vector<double>& lambda, const std::vector<double>& mu, const double rho0, const long splines_degree, const double relative_dt);
RcppExport SEXP _castor_get_PSR_of_HBD_model_CPP(SEXP age0SEXP, SEXP oldest_ageSEXP, SEXP age_gridSEXP, SEXP lambdaSEXP, SEXP muSEXP, SEXP rho0SEXP, SEXP splines_degreeSEXP, SEXP relative_dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type age0(age0SEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    rcpp_result_gen = Rcpp::wrap(get_PSR_of_HBD_model_CPP(age0, oldest_age, age_grid, lambda, mu, rho0, splines_degree, relative_dt));
    return rcpp_result_gen;
END_RCPP
}
// get_HBD_model_loglikelihood_CPP
Rcpp::List get_HBD_model_loglikelihood_CPP(const std::vector<double>& branching_ages, const double oldest_age, const double rarefaction, const std::vector<double>& age_grid, const std::vector<double>& lambdas, const std::vector<double>& mus, const long splines_degree, const std::string& condition, const double relative_dt, const double runtime_out_seconds);
RcppExport SEXP _castor_get_HBD_model_loglikelihood_CPP(SEXP branching_agesSEXP, SEXP oldest_ageSEXP, SEXP rarefactionSEXP, SEXP age_gridSEXP, SEXP lambdasSEXP, SEXP musSEXP, SEXP splines_degreeSEXP, SEXP conditionSEXP, SEXP relative_dtSEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type branching_ages(branching_agesSEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type rarefaction(rarefactionSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mus(musSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_HBD_model_loglikelihood_CPP(branching_ages, oldest_age, rarefaction, age_grid, lambdas, mus, splines_degree, condition, relative_dt, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// get_HBD_PDR_loglikelihood_CPP
Rcpp::List get_HBD_PDR_loglikelihood_CPP(const std::vector<double>& branching_ages, const double oldest_age, const double rholambda0, const std::vector<double>& age_grid, const std::vector<double>& PDRs, const long splines_degree, const std::string& condition, const double relative_dt, const double runtime_out_seconds, const std::vector<double> diff_PDR, const long diff_PDR_degree);
RcppExport SEXP _castor_get_HBD_PDR_loglikelihood_CPP(SEXP branching_agesSEXP, SEXP oldest_ageSEXP, SEXP rholambda0SEXP, SEXP age_gridSEXP, SEXP PDRsSEXP, SEXP splines_degreeSEXP, SEXP conditionSEXP, SEXP relative_dtSEXP, SEXP runtime_out_secondsSEXP, SEXP diff_PDRSEXP, SEXP diff_PDR_degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type branching_ages(branching_agesSEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type rholambda0(rholambda0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PDRs(PDRsSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type diff_PDR(diff_PDRSEXP);
    Rcpp::traits::input_parameter< const long >::type diff_PDR_degree(diff_PDR_degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_HBD_PDR_loglikelihood_CPP(branching_ages, oldest_age, rholambda0, age_grid, PDRs, splines_degree, condition, relative_dt, runtime_out_seconds, diff_PDR, diff_PDR_degree));
    return rcpp_result_gen;
END_RCPP
}
// get_HBD_PSR_loglikelihood_CPP
Rcpp::List get_HBD_PSR_loglikelihood_CPP(const std::vector<double>& branching_ages, const double oldest_age, const std::vector<double>& age_grid, const std::vector<double>& PSRs, const long splines_degree, const std::string& condition, const double relative_dt, const double runtime_out_seconds);
RcppExport SEXP _castor_get_HBD_PSR_loglikelihood_CPP(SEXP branching_agesSEXP, SEXP oldest_ageSEXP, SEXP age_gridSEXP, SEXP PSRsSEXP, SEXP splines_degreeSEXP, SEXP conditionSEXP, SEXP relative_dtSEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type branching_ages(branching_agesSEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PSRs(PSRsSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_HBD_PSR_loglikelihood_CPP(branching_ages, oldest_age, age_grid, PSRs, splines_degree, condition, relative_dt, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// get_HBDS_model_loglikelihood_CPP
Rcpp::List get_HBDS_model_loglikelihood_CPP(const std::vector<double>& branching_ages, const std::vector<double>& Ptip_ages, const std::vector<double>& Pnode_ages, const std::vector<double>& CSA_ages, const std::vector<double>& CSA_probs, const std::vector<double>& CSA_kappas, const std::vector<double>& concentrated_tip_counts, const std::vector<double>& concentrated_node_counts, const double oldest_age, const std::vector<double>& age_grid, const std::vector<double>& lambdas, const std::vector<double>& mus, const std::vector<double>& psis, const std::vector<double>& kappas, const long splines_degree, const std::string& condition, const double relative_ODE_step, const double E_value_step, const double runtime_out_seconds);
RcppExport SEXP _castor_get_HBDS_model_loglikelihood_CPP(SEXP branching_agesSEXP, SEXP Ptip_agesSEXP, SEXP Pnode_agesSEXP, SEXP CSA_agesSEXP, SEXP CSA_probsSEXP, SEXP CSA_kappasSEXP, SEXP concentrated_tip_countsSEXP, SEXP concentrated_node_countsSEXP, SEXP oldest_ageSEXP, SEXP age_gridSEXP, SEXP lambdasSEXP, SEXP musSEXP, SEXP psisSEXP, SEXP kappasSEXP, SEXP splines_degreeSEXP, SEXP conditionSEXP, SEXP relative_ODE_stepSEXP, SEXP E_value_stepSEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type branching_ages(branching_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Ptip_ages(Ptip_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Pnode_ages(Pnode_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_ages(CSA_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_probs(CSA_probsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_kappas(CSA_kappasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type concentrated_tip_counts(concentrated_tip_countsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type concentrated_node_counts(concentrated_node_countsSEXP);
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mus(musSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type psis(psisSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type kappas(kappasSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type condition(conditionSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_ODE_step(relative_ODE_stepSEXP);
    Rcpp::traits::input_parameter< const double >::type E_value_step(E_value_stepSEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_HBDS_model_loglikelihood_CPP(branching_ages, Ptip_ages, Pnode_ages, CSA_ages, CSA_probs, CSA_kappas, concentrated_tip_counts, concentrated_node_counts, oldest_age, age_grid, lambdas, mus, psis, kappas, splines_degree, condition, relative_ODE_step, E_value_step, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// simulate_deterministic_HBDS_CPP
Rcpp::List simulate_deterministic_HBDS_CPP(const std::vector<double>& CSA_ages, const std::vector<double>& CSA_probs, const std::vector<double>& CSA_kappas, const std::vector<double>& age_grid, const std::vector<double>& lambdas, const std::vector<double>& mus, const std::vector<double>& psis, const std::vector<double>& kappas, const long splines_degree, const double age0, const double N0, const double LTT0, const std::vector<double>& requested_ages, const double ODE_relative_dt, const double ODE_relative_dy, const double runtime_out_seconds);
RcppExport SEXP _castor_simulate_deterministic_HBDS_CPP(SEXP CSA_agesSEXP, SEXP CSA_probsSEXP, SEXP CSA_kappasSEXP, SEXP age_gridSEXP, SEXP lambdasSEXP, SEXP musSEXP, SEXP psisSEXP, SEXP kappasSEXP, SEXP splines_degreeSEXP, SEXP age0SEXP, SEXP N0SEXP, SEXP LTT0SEXP, SEXP requested_agesSEXP, SEXP ODE_relative_dtSEXP, SEXP ODE_relative_dySEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_ages(CSA_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_probs(CSA_probsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_kappas(CSA_kappasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mus(musSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type psis(psisSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type kappas(kappasSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const double >::type age0(age0SEXP);
    Rcpp::traits::input_parameter< const double >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const double >::type LTT0(LTT0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type requested_ages(requested_agesSEXP);
    Rcpp::traits::input_parameter< const double >::type ODE_relative_dt(ODE_relative_dtSEXP);
    Rcpp::traits::input_parameter< const double >::type ODE_relative_dy(ODE_relative_dySEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_deterministic_HBDS_CPP(CSA_ages, CSA_probs, CSA_kappas, age_grid, lambdas, mus, psis, kappas, splines_degree, age0, N0, LTT0, requested_ages, ODE_relative_dt, ODE_relative_dy, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// get_congruent_HBDS_CPP
Rcpp::List get_congruent_HBDS_CPP(const std::vector<double>& CSA_ages, const std::vector<double>& CSA_pulled_probs, const std::vector<double>& CSA_PSRs, const std::vector<double>& age_grid, const std::vector<double>& PSRs, const std::vector<double>& PDRs, const std::vector<double>& lambda_psis, std::vector<double> lambdas, std::vector<double> mus, std::vector<double> psis, std::vector<double> Reffs, std::vector<double> removal_rates, const double lambda0, const long splines_degree, const double ODE_relative_dt, const double ODE_relative_dy, const double runtime_out_seconds);
RcppExport SEXP _castor_get_congruent_HBDS_CPP(SEXP CSA_agesSEXP, SEXP CSA_pulled_probsSEXP, SEXP CSA_PSRsSEXP, SEXP age_gridSEXP, SEXP PSRsSEXP, SEXP PDRsSEXP, SEXP lambda_psisSEXP, SEXP lambdasSEXP, SEXP musSEXP, SEXP psisSEXP, SEXP ReffsSEXP, SEXP removal_ratesSEXP, SEXP lambda0SEXP, SEXP splines_degreeSEXP, SEXP ODE_relative_dtSEXP, SEXP ODE_relative_dySEXP, SEXP runtime_out_secondsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_ages(CSA_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_pulled_probs(CSA_pulled_probsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_PSRs(CSA_PSRsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PSRs(PSRsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PDRs(PDRsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type lambda_psis(lambda_psisSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type lambdas(lambdasSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mus(musSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type psis(psisSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type Reffs(ReffsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type removal_rates(removal_ratesSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const double >::type ODE_relative_dt(ODE_relative_dtSEXP);
    Rcpp::traits::input_parameter< const double >::type ODE_relative_dy(ODE_relative_dySEXP);
    Rcpp::traits::input_parameter< const double >::type runtime_out_seconds(runtime_out_secondsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_congruent_HBDS_CPP(CSA_ages, CSA_pulled_probs, CSA_PSRs, age_grid, PSRs, PDRs, lambda_psis, lambdas, mus, psis, Reffs, removal_rates, lambda0, splines_degree, ODE_relative_dt, ODE_relative_dy, runtime_out_seconds));
    return rcpp_result_gen;
END_RCPP
}
// simulate_fixed_rates_Markov_model_CPP
Rcpp::List simulate_fixed_rates_Markov_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nstates, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& transition_matrix, const std::vector<double>& root_probabilities, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP _castor_simulate_fixed_rates_Markov_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP transition_matrixSEXP, SEXP root_probabilitiesSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type root_probabilities(root_probabilitiesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_fixed_rates_Markov_model_CPP(Ntips, Nnodes, Nedges, Nstates, tree_edge, edge_length, transition_matrix, root_probabilities, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_Ornstein_Uhlenbeck_on_tree_CPP
Rcpp::List simulate_Ornstein_Uhlenbeck_on_tree_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double stationary_mean, const double stationary_std, const double decay_rate, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP _castor_simulate_Ornstein_Uhlenbeck_on_tree_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP stationary_meanSEXP, SEXP stationary_stdSEXP, SEXP decay_rateSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_mean(stationary_meanSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_std(stationary_stdSEXP);
    Rcpp::traits::input_parameter< const double >::type decay_rate(decay_rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_Ornstein_Uhlenbeck_on_tree_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, stationary_mean, stationary_std, decay_rate, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_reflected_Ornstein_Uhlenbeck_on_tree_CPP
Rcpp::List simulate_reflected_Ornstein_Uhlenbeck_on_tree_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double reflection_point, const double spread, const double decay_rate, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP _castor_simulate_reflected_Ornstein_Uhlenbeck_on_tree_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP reflection_pointSEXP, SEXP spreadSEXP, SEXP decay_rateSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type reflection_point(reflection_pointSEXP);
    Rcpp::traits::input_parameter< const double >::type spread(spreadSEXP);
    Rcpp::traits::input_parameter< const double >::type decay_rate(decay_rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_reflected_Ornstein_Uhlenbeck_on_tree_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, reflection_point, spread, decay_rate, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_scalar_Brownian_motion_model_CPP
Rcpp::List simulate_scalar_Brownian_motion_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& root_states, const double diffusivity, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP _castor_simulate_scalar_Brownian_motion_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP root_statesSEXP, SEXP diffusivitySEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type root_states(root_statesSEXP);
    Rcpp::traits::input_parameter< const double >::type diffusivity(diffusivitySEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_scalar_Brownian_motion_model_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, root_states, diffusivity, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_multivariate_Brownian_motion_model_CPP
Rcpp::List simulate_multivariate_Brownian_motion_model_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Ntraits, const long Ndegrees, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& root_states, const std::vector<double>& sigma, const bool include_tips, const bool include_nodes, const long Nsimulations);
RcppExport SEXP _castor_simulate_multivariate_Brownian_motion_model_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NtraitsSEXP, SEXP NdegreesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP root_statesSEXP, SEXP sigmaSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntraits(NtraitsSEXP);
    Rcpp::traits::input_parameter< const long >::type Ndegrees(NdegreesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type root_states(root_statesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_multivariate_Brownian_motion_model_CPP(Ntips, Nnodes, Nedges, Ntraits, Ndegrees, tree_edge, edge_length, root_states, sigma, include_tips, include_nodes, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// simulate_neutral_gene_evolution_CPP
Rcpp::List simulate_neutral_gene_evolution_CPP(const long Ntips, const long Nnodes, const long Nedges, const long Nsites, const long Nstates, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<long>& root_states, const double mutation_rate, const bool include_tips, const bool include_nodes, const bool include_gene_distances, const long Nsimulations);
RcppExport SEXP _castor_simulate_neutral_gene_evolution_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP NsitesSEXP, SEXP NstatesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP root_statesSEXP, SEXP mutation_rateSEXP, SEXP include_tipsSEXP, SEXP include_nodesSEXP, SEXP include_gene_distancesSEXP, SEXP NsimulationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsites(NsitesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type root_states(root_statesSEXP);
    Rcpp::traits::input_parameter< const double >::type mutation_rate(mutation_rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_tips(include_tipsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_nodes(include_nodesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_gene_distances(include_gene_distancesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsimulations(NsimulationsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_neutral_gene_evolution_CPP(Ntips, Nnodes, Nedges, Nsites, Nstates, tree_edge, edge_length, root_states, mutation_rate, include_tips, include_nodes, include_gene_distances, Nsimulations));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_CPP
Rcpp::List generate_random_tree_CPP(const long max_tips, const double max_time, const double max_time_since_equilibrium, const double birth_rate_intercept, const double birth_rate_factor, const double birth_rate_exponent, const double death_rate_intercept, const double death_rate_factor, const double death_rate_exponent, const std::vector<double>& additional_rates_times, const std::vector<double>& additional_birth_rates_pc, const std::vector<double>& additional_death_rates_pc, const bool additional_periodic, const bool coalescent, const long Nsplits, const bool as_generations, const bool include_birth_times, const bool include_death_times);
RcppExport SEXP _castor_generate_random_tree_CPP(SEXP max_tipsSEXP, SEXP max_timeSEXP, SEXP max_time_since_equilibriumSEXP, SEXP birth_rate_interceptSEXP, SEXP birth_rate_factorSEXP, SEXP birth_rate_exponentSEXP, SEXP death_rate_interceptSEXP, SEXP death_rate_factorSEXP, SEXP death_rate_exponentSEXP, SEXP additional_rates_timesSEXP, SEXP additional_birth_rates_pcSEXP, SEXP additional_death_rates_pcSEXP, SEXP additional_periodicSEXP, SEXP coalescentSEXP, SEXP NsplitsSEXP, SEXP as_generationsSEXP, SEXP include_birth_timesSEXP, SEXP include_death_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time_since_equilibrium(max_time_since_equilibriumSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_intercept(birth_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_factor(birth_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_exponent(birth_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_intercept(death_rate_interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_factor(death_rate_factorSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_exponent(death_rate_exponentSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_rates_times(additional_rates_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_birth_rates_pc(additional_birth_rates_pcSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type additional_death_rates_pc(additional_death_rates_pcSEXP);
    Rcpp::traits::input_parameter< const bool >::type additional_periodic(additional_periodicSEXP);
    Rcpp::traits::input_parameter< const bool >::type coalescent(coalescentSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_times(include_birth_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_times(include_death_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_CPP(max_tips, max_time, max_time_since_equilibrium, birth_rate_intercept, birth_rate_factor, birth_rate_exponent, death_rate_intercept, death_rate_factor, death_rate_exponent, additional_rates_times, additional_birth_rates_pc, additional_death_rates_pc, additional_periodic, coalescent, Nsplits, as_generations, include_birth_times, include_death_times));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_HBDS_CPP
Rcpp::List generate_random_tree_HBDS_CPP(const long max_sampled_tips, const long max_sampled_nodes, const long max_extant_tips, const long max_extinct_tips, const long max_tips, const double max_time, const std::vector<double>& time_grid, const std::vector<double>& birth_rates, const std::vector<double>& death_rates, const std::vector<double>& sampling_rates, const std::vector<double>& retention_probs, const long splines_degree, const std::vector<double>& CSA_times, const std::vector<double>& CSA_probs, const std::vector<double>& CSA_kappas, const bool as_generations, const bool no_full_extinction, const bool include_extant, const bool include_extinct, const bool include_birth_times, const bool include_death_times);
RcppExport SEXP _castor_generate_random_tree_HBDS_CPP(SEXP max_sampled_tipsSEXP, SEXP max_sampled_nodesSEXP, SEXP max_extant_tipsSEXP, SEXP max_extinct_tipsSEXP, SEXP max_tipsSEXP, SEXP max_timeSEXP, SEXP time_gridSEXP, SEXP birth_ratesSEXP, SEXP death_ratesSEXP, SEXP sampling_ratesSEXP, SEXP retention_probsSEXP, SEXP splines_degreeSEXP, SEXP CSA_timesSEXP, SEXP CSA_probsSEXP, SEXP CSA_kappasSEXP, SEXP as_generationsSEXP, SEXP no_full_extinctionSEXP, SEXP include_extantSEXP, SEXP include_extinctSEXP, SEXP include_birth_timesSEXP, SEXP include_death_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_sampled_tips(max_sampled_tipsSEXP);
    Rcpp::traits::input_parameter< const long >::type max_sampled_nodes(max_sampled_nodesSEXP);
    Rcpp::traits::input_parameter< const long >::type max_extant_tips(max_extant_tipsSEXP);
    Rcpp::traits::input_parameter< const long >::type max_extinct_tips(max_extinct_tipsSEXP);
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_grid(time_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type birth_rates(birth_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type death_rates(death_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sampling_rates(sampling_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type retention_probs(retention_probsSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_times(CSA_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_probs(CSA_probsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CSA_kappas(CSA_kappasSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type no_full_extinction(no_full_extinctionSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_extant(include_extantSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_extinct(include_extinctSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_times(include_birth_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_times(include_death_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_HBDS_CPP(max_sampled_tips, max_sampled_nodes, max_extant_tips, max_extinct_tips, max_tips, max_time, time_grid, birth_rates, death_rates, sampling_rates, retention_probs, splines_degree, CSA_times, CSA_probs, CSA_kappas, as_generations, no_full_extinction, include_extant, include_extinct, include_birth_times, include_death_times));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_from_branching_ages_CPP
Rcpp::List get_tree_from_branching_ages_CPP(const std::vector<double>& branching_ages);
RcppExport SEXP _castor_get_tree_from_branching_ages_CPP(SEXP branching_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type branching_ages(branching_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_from_branching_ages_CPP(branching_ages));
    return rcpp_result_gen;
END_RCPP
}
// get_tree_from_sampling_branching_ages_CPP
Rcpp::List get_tree_from_sampling_branching_ages_CPP(const std::vector<double>& sampling_ages, const std::vector<double>& branching_ages);
RcppExport SEXP _castor_get_tree_from_sampling_branching_ages_CPP(SEXP sampling_agesSEXP, SEXP branching_agesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sampling_ages(sampling_agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type branching_ages(branching_agesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tree_from_sampling_branching_ages_CPP(sampling_ages, branching_ages));
    return rcpp_result_gen;
END_RCPP
}
// generate_tree_from_PSR_CPP
Rcpp::List generate_tree_from_PSR_CPP(const std::vector<double>& age_grid, const std::vector<double>& PSR, const long splines_degree, const long Ntips, const double stem_age, const double crown_age, const double relative_dt, const double force_max_age, const long Ntrees);
RcppExport SEXP _castor_generate_tree_from_PSR_CPP(SEXP age_gridSEXP, SEXP PSRSEXP, SEXP splines_degreeSEXP, SEXP NtipsSEXP, SEXP stem_ageSEXP, SEXP crown_ageSEXP, SEXP relative_dtSEXP, SEXP force_max_ageSEXP, SEXP NtreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PSR(PSRSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const double >::type stem_age(stem_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type crown_age(crown_ageSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    Rcpp::traits::input_parameter< const double >::type force_max_age(force_max_ageSEXP);
    Rcpp::traits::input_parameter< const long >::type Ntrees(NtreesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_tree_from_PSR_CPP(age_grid, PSR, splines_degree, Ntips, stem_age, crown_age, relative_dt, force_max_age, Ntrees));
    return rcpp_result_gen;
END_RCPP
}
// get_branching_ages_from_LTT_CPP
Rcpp::List get_branching_ages_from_LTT_CPP(const std::vector<double>& ages, const std::vector<double>& LTT);
RcppExport SEXP _castor_get_branching_ages_from_LTT_CPP(SEXP agesSEXP, SEXP LTTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type ages(agesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type LTT(LTTSEXP);
    rcpp_result_gen = Rcpp::wrap(get_branching_ages_from_LTT_CPP(ages, LTT));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_BM_rates_CPP
Rcpp::List generate_random_tree_BM_rates_CPP(const long max_tips, const double max_time, const double max_time_since_equilibrium, const double birth_rate_diffusivity, const double min_birth_rate_pc, const double max_birth_rate_pc, const double death_rate_diffusivity, const double min_death_rate_pc, const double max_death_rate_pc, const double root_birth_rate_pc, const double root_death_rate_pc, const bool coalescent, const long Nsplits, const bool as_generations, const bool include_event_times, const bool include_rates);
RcppExport SEXP _castor_generate_random_tree_BM_rates_CPP(SEXP max_tipsSEXP, SEXP max_timeSEXP, SEXP max_time_since_equilibriumSEXP, SEXP birth_rate_diffusivitySEXP, SEXP min_birth_rate_pcSEXP, SEXP max_birth_rate_pcSEXP, SEXP death_rate_diffusivitySEXP, SEXP min_death_rate_pcSEXP, SEXP max_death_rate_pcSEXP, SEXP root_birth_rate_pcSEXP, SEXP root_death_rate_pcSEXP, SEXP coalescentSEXP, SEXP NsplitsSEXP, SEXP as_generationsSEXP, SEXP include_event_timesSEXP, SEXP include_ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time_since_equilibrium(max_time_since_equilibriumSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate_diffusivity(birth_rate_diffusivitySEXP);
    Rcpp::traits::input_parameter< const double >::type min_birth_rate_pc(min_birth_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type max_birth_rate_pc(max_birth_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate_diffusivity(death_rate_diffusivitySEXP);
    Rcpp::traits::input_parameter< const double >::type min_death_rate_pc(min_death_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type max_death_rate_pc(max_death_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type root_birth_rate_pc(root_birth_rate_pcSEXP);
    Rcpp::traits::input_parameter< const double >::type root_death_rate_pc(root_death_rate_pcSEXP);
    Rcpp::traits::input_parameter< const bool >::type coalescent(coalescentSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_event_times(include_event_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_rates(include_ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_BM_rates_CPP(max_tips, max_time, max_time_since_equilibrium, birth_rate_diffusivity, min_birth_rate_pc, max_birth_rate_pc, death_rate_diffusivity, min_death_rate_pc, max_death_rate_pc, root_birth_rate_pc, root_death_rate_pc, coalescent, Nsplits, as_generations, include_event_times, include_rates));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_Mk_rates_CPP
Rcpp::List generate_random_tree_Mk_rates_CPP(const long max_tips, const long max_extant_tips, const long max_sampled_tips, const double max_time, const double max_time_since_equilibrium, const long max_events, const long Nstates, const long start_state, const std::vector<double>& state_birth_rates, const std::vector<double>& state_death_rates, const std::vector<double>& state_sampling_rates, const std::vector<double>& transition_matrix_A, const std::vector<double>& transition_matrix_C, const bool as_generations, const bool no_full_extinction, const bool include_extant, const bool include_extinct, const bool include_event_times, const bool include_rates);
RcppExport SEXP _castor_generate_random_tree_Mk_rates_CPP(SEXP max_tipsSEXP, SEXP max_extant_tipsSEXP, SEXP max_sampled_tipsSEXP, SEXP max_timeSEXP, SEXP max_time_since_equilibriumSEXP, SEXP max_eventsSEXP, SEXP NstatesSEXP, SEXP start_stateSEXP, SEXP state_birth_ratesSEXP, SEXP state_death_ratesSEXP, SEXP state_sampling_ratesSEXP, SEXP transition_matrix_ASEXP, SEXP transition_matrix_CSEXP, SEXP as_generationsSEXP, SEXP no_full_extinctionSEXP, SEXP include_extantSEXP, SEXP include_extinctSEXP, SEXP include_event_timesSEXP, SEXP include_ratesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const long >::type max_extant_tips(max_extant_tipsSEXP);
    Rcpp::traits::input_parameter< const long >::type max_sampled_tips(max_sampled_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time_since_equilibrium(max_time_since_equilibriumSEXP);
    Rcpp::traits::input_parameter< const long >::type max_events(max_eventsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const long >::type start_state(start_stateSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_birth_rates(state_birth_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_death_rates(state_death_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_sampling_rates(state_sampling_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix_A(transition_matrix_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix_C(transition_matrix_CSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type no_full_extinction(no_full_extinctionSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_extant(include_extantSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_extinct(include_extinctSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_event_times(include_event_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_rates(include_ratesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_Mk_rates_CPP(max_tips, max_extant_tips, max_sampled_tips, max_time, max_time_since_equilibrium, max_events, Nstates, start_state, state_birth_rates, state_death_rates, state_sampling_rates, transition_matrix_A, transition_matrix_C, as_generations, no_full_extinction, include_extant, include_extinct, include_event_times, include_rates));
    return rcpp_result_gen;
END_RCPP
}
// generate_random_tree_tdSSE_CPP
Rcpp::List generate_random_tree_tdSSE_CPP(const long max_tips, const double max_time, const long max_events, const long Nstates, const long start_state, const std::vector<double>& time_grid, const std::vector<double>& state_birth_rates, const std::vector<double>& state_death_rates, const std::vector<double>& transition_matrix_A, const std::vector<double>& transition_matrix_C, const long splines_degree, const bool coalescent, const long Nsplits, const bool as_generations, const bool no_full_extinction, const bool include_birth_times, const bool include_death_times);
RcppExport SEXP _castor_generate_random_tree_tdSSE_CPP(SEXP max_tipsSEXP, SEXP max_timeSEXP, SEXP max_eventsSEXP, SEXP NstatesSEXP, SEXP start_stateSEXP, SEXP time_gridSEXP, SEXP state_birth_ratesSEXP, SEXP state_death_ratesSEXP, SEXP transition_matrix_ASEXP, SEXP transition_matrix_CSEXP, SEXP splines_degreeSEXP, SEXP coalescentSEXP, SEXP NsplitsSEXP, SEXP as_generationsSEXP, SEXP no_full_extinctionSEXP, SEXP include_birth_timesSEXP, SEXP include_death_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type max_tips(max_tipsSEXP);
    Rcpp::traits::input_parameter< const double >::type max_time(max_timeSEXP);
    Rcpp::traits::input_parameter< const long >::type max_events(max_eventsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nstates(NstatesSEXP);
    Rcpp::traits::input_parameter< const long >::type start_state(start_stateSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_grid(time_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_birth_rates(state_birth_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type state_death_rates(state_death_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix_A(transition_matrix_ASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type transition_matrix_C(transition_matrix_CSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const bool >::type coalescent(coalescentSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsplits(NsplitsSEXP);
    Rcpp::traits::input_parameter< const bool >::type as_generations(as_generationsSEXP);
    Rcpp::traits::input_parameter< const bool >::type no_full_extinction(no_full_extinctionSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_birth_times(include_birth_timesSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_death_times(include_death_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_random_tree_tdSSE_CPP(max_tips, max_time, max_events, Nstates, start_state, time_grid, state_birth_rates, state_death_rates, transition_matrix_A, transition_matrix_C, splines_degree, coalescent, Nsplits, as_generations, no_full_extinction, include_birth_times, include_death_times));
    return rcpp_result_gen;
END_RCPP
}
// generate_gene_tree_in_species_tree_MSC_CPP
Rcpp::List generate_gene_tree_in_species_tree_MSC_CPP(const long NStips, const long NSnodes, const long NSedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& population_sizes, const std::vector<double>& generation_times, const std::vector<double>& mutation_rates, const std::vector<long>& allele_counts, const std::string& gene_edge_unit, const long Nsites, const bool bottleneck_at_speciation, const bool force_coalescence_at_root, const long ploidy);
RcppExport SEXP _castor_generate_gene_tree_in_species_tree_MSC_CPP(SEXP NStipsSEXP, SEXP NSnodesSEXP, SEXP NSedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP population_sizesSEXP, SEXP generation_timesSEXP, SEXP mutation_ratesSEXP, SEXP allele_countsSEXP, SEXP gene_edge_unitSEXP, SEXP NsitesSEXP, SEXP bottleneck_at_speciationSEXP, SEXP force_coalescence_at_rootSEXP, SEXP ploidySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type NStips(NStipsSEXP);
    Rcpp::traits::input_parameter< const long >::type NSnodes(NSnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type NSedges(NSedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type population_sizes(population_sizesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type generation_times(generation_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mutation_rates(mutation_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type allele_counts(allele_countsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type gene_edge_unit(gene_edge_unitSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsites(NsitesSEXP);
    Rcpp::traits::input_parameter< const bool >::type bottleneck_at_speciation(bottleneck_at_speciationSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_coalescence_at_root(force_coalescence_at_rootSEXP);
    Rcpp::traits::input_parameter< const long >::type ploidy(ploidySEXP);
    rcpp_result_gen = Rcpp::wrap(generate_gene_tree_in_species_tree_MSC_CPP(NStips, NSnodes, NSedges, tree_edge, edge_length, population_sizes, generation_times, mutation_rates, allele_counts, gene_edge_unit, Nsites, bottleneck_at_speciation, force_coalescence_at_root, ploidy));
    return rcpp_result_gen;
END_RCPP
}
// generate_gene_tree_in_species_tree_MSC_HGT_DL_CPP
Rcpp::List generate_gene_tree_in_species_tree_MSC_HGT_DL_CPP(const long NStips, const long NSnodes, const long NSedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& population_sizes, const std::vector<double>& generation_times, const std::vector<double>& mutation_rates, const std::vector<double>& HGT_rates, const std::vector<double>& duplication_rates, const std::vector<double>& loss_rates, const std::vector<long>& allele_counts, const std::string& gene_edge_unit, const long Nsites, const bool bottleneck_at_speciation, const bool force_coalescence_at_root, const long ploidy, const bool HGT_source_by_locus, const bool HGT_only_to_empty_clades, const double no_loss_before_time, const bool include_event_times);
RcppExport SEXP _castor_generate_gene_tree_in_species_tree_MSC_HGT_DL_CPP(SEXP NStipsSEXP, SEXP NSnodesSEXP, SEXP NSedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP population_sizesSEXP, SEXP generation_timesSEXP, SEXP mutation_ratesSEXP, SEXP HGT_ratesSEXP, SEXP duplication_ratesSEXP, SEXP loss_ratesSEXP, SEXP allele_countsSEXP, SEXP gene_edge_unitSEXP, SEXP NsitesSEXP, SEXP bottleneck_at_speciationSEXP, SEXP force_coalescence_at_rootSEXP, SEXP ploidySEXP, SEXP HGT_source_by_locusSEXP, SEXP HGT_only_to_empty_cladesSEXP, SEXP no_loss_before_timeSEXP, SEXP include_event_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type NStips(NStipsSEXP);
    Rcpp::traits::input_parameter< const long >::type NSnodes(NSnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type NSedges(NSedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type population_sizes(population_sizesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type generation_times(generation_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mutation_rates(mutation_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type HGT_rates(HGT_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type duplication_rates(duplication_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type loss_rates(loss_ratesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type allele_counts(allele_countsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type gene_edge_unit(gene_edge_unitSEXP);
    Rcpp::traits::input_parameter< const long >::type Nsites(NsitesSEXP);
    Rcpp::traits::input_parameter< const bool >::type bottleneck_at_speciation(bottleneck_at_speciationSEXP);
    Rcpp::traits::input_parameter< const bool >::type force_coalescence_at_root(force_coalescence_at_rootSEXP);
    Rcpp::traits::input_parameter< const long >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< const bool >::type HGT_source_by_locus(HGT_source_by_locusSEXP);
    Rcpp::traits::input_parameter< const bool >::type HGT_only_to_empty_clades(HGT_only_to_empty_cladesSEXP);
    Rcpp::traits::input_parameter< const double >::type no_loss_before_time(no_loss_before_timeSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_event_times(include_event_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_gene_tree_in_species_tree_MSC_HGT_DL_CPP(NStips, NSnodes, NSedges, tree_edge, edge_length, population_sizes, generation_times, mutation_rates, HGT_rates, duplication_rates, loss_rates, allele_counts, gene_edge_unit, Nsites, bottleneck_at_speciation, force_coalescence_at_root, ploidy, HGT_source_by_locus, HGT_only_to_empty_clades, no_loss_before_time, include_event_times));
    return rcpp_result_gen;
END_RCPP
}
// simulate_deterministic_HBD_MSC_CPP
Rcpp::List simulate_deterministic_HBD_MSC_CPP(const double oldest_age, const std::vector<double>& age_grid, const std::vector<double>& PSRs, const std::vector<double>& CTs, const double rho0, const double sLTT0, const double gLTT0, const long splines_degree, const double relative_dt);
RcppExport SEXP _castor_simulate_deterministic_HBD_MSC_CPP(SEXP oldest_ageSEXP, SEXP age_gridSEXP, SEXP PSRsSEXP, SEXP CTsSEXP, SEXP rho0SEXP, SEXP sLTT0SEXP, SEXP gLTT0SEXP, SEXP splines_degreeSEXP, SEXP relative_dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type oldest_age(oldest_ageSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type age_grid(age_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type PSRs(PSRsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type CTs(CTsSEXP);
    Rcpp::traits::input_parameter< const double >::type rho0(rho0SEXP);
    Rcpp::traits::input_parameter< const double >::type sLTT0(sLTT0SEXP);
    Rcpp::traits::input_parameter< const double >::type gLTT0(gLTT0SEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const double >::type relative_dt(relative_dtSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_deterministic_HBD_MSC_CPP(oldest_age, age_grid, PSRs, CTs, rho0, sLTT0, gLTT0, splines_degree, relative_dt));
    return rcpp_result_gen;
END_RCPP
}
// geodesic_angles_CPP
NumericVector geodesic_angles_CPP(const std::vector<double>& latitudes1, const std::vector<double>& longitudes1, const std::vector<double>& latitudes2, const std::vector<double>& longitudes2);
RcppExport SEXP _castor_geodesic_angles_CPP(SEXP latitudes1SEXP, SEXP longitudes1SEXP, SEXP latitudes2SEXP, SEXP longitudes2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type latitudes1(latitudes1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type longitudes1(longitudes1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type latitudes2(latitudes2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type longitudes2(longitudes2SEXP);
    rcpp_result_gen = Rcpp::wrap(geodesic_angles_CPP(latitudes1, longitudes1, latitudes2, longitudes2));
    return rcpp_result_gen;
END_RCPP
}
// get_all_pairwise_geodesic_angles_CPP
NumericVector get_all_pairwise_geodesic_angles_CPP(const std::vector<double>& latitudes1, const std::vector<double>& longitudes1, const std::vector<double>& latitudes2, const std::vector<double>& longitudes2);
RcppExport SEXP _castor_get_all_pairwise_geodesic_angles_CPP(SEXP latitudes1SEXP, SEXP longitudes1SEXP, SEXP latitudes2SEXP, SEXP longitudes2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type latitudes1(latitudes1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type longitudes1(longitudes1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type latitudes2(latitudes2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type longitudes2(longitudes2SEXP);
    rcpp_result_gen = Rcpp::wrap(get_all_pairwise_geodesic_angles_CPP(latitudes1, longitudes1, latitudes2, longitudes2));
    return rcpp_result_gen;
END_RCPP
}
// draw_SBM_geodesic_angle_CPP
double draw_SBM_geodesic_angle_CPP(const double tD);
RcppExport SEXP _castor_draw_SBM_geodesic_angle_CPP(SEXP tDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type tD(tDSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_SBM_geodesic_angle_CPP(tD));
    return rcpp_result_gen;
END_RCPP
}
// simulate_SBM_on_tree_CPP
Rcpp::List simulate_SBM_on_tree_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double radius, const double diffusivity, const double root_theta, const double root_phi);
RcppExport SEXP _castor_simulate_SBM_on_tree_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP radiusSEXP, SEXP diffusivitySEXP, SEXP root_thetaSEXP, SEXP root_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type diffusivity(diffusivitySEXP);
    Rcpp::traits::input_parameter< const double >::type root_theta(root_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type root_phi(root_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_SBM_on_tree_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, radius, diffusivity, root_theta, root_phi));
    return rcpp_result_gen;
END_RCPP
}
// simulate_TSBM_on_tree_CPP
Rcpp::List simulate_TSBM_on_tree_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const double radius, const std::vector<double>& time_grid, const std::vector<double>& diffusivities, const long splines_degree, const double root_theta, const double root_phi);
RcppExport SEXP _castor_simulate_TSBM_on_tree_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP radiusSEXP, SEXP time_gridSEXP, SEXP diffusivitiesSEXP, SEXP splines_degreeSEXP, SEXP root_thetaSEXP, SEXP root_phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_grid(time_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type diffusivities(diffusivitiesSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const double >::type root_theta(root_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type root_phi(root_phiSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_TSBM_on_tree_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, radius, time_grid, diffusivities, splines_degree, root_theta, root_phi));
    return rcpp_result_gen;
END_RCPP
}
// move_points_on_sphere_CPP
Rcpp::List move_points_on_sphere_CPP(const double radius, const std::vector<double>& old_latitudes, const std::vector<double>& old_longitudes, const std::vector<double>& distances, const std::vector<double>& directions);
RcppExport SEXP _castor_move_points_on_sphere_CPP(SEXP radiusSEXP, SEXP old_latitudesSEXP, SEXP old_longitudesSEXP, SEXP distancesSEXP, SEXP directionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_latitudes(old_latitudesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_longitudes(old_longitudesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type directions(directionsSEXP);
    rcpp_result_gen = Rcpp::wrap(move_points_on_sphere_CPP(radius, old_latitudes, old_longitudes, distances, directions));
    return rcpp_result_gen;
END_RCPP
}
// SBM_LLs_of_transitions_CPP
Rcpp::List SBM_LLs_of_transitions_CPP(const double radius, const std::vector<double>& time_steps, const std::vector<double>& distances, const std::vector<double>& diffusivities, const double max_error, const long max_Legendre_terms);
RcppExport SEXP _castor_SBM_LLs_of_transitions_CPP(SEXP radiusSEXP, SEXP time_stepsSEXP, SEXP distancesSEXP, SEXP diffusivitiesSEXP, SEXP max_errorSEXP, SEXP max_Legendre_termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_steps(time_stepsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type diffusivities(diffusivitiesSEXP);
    Rcpp::traits::input_parameter< const double >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< const long >::type max_Legendre_terms(max_Legendre_termsSEXP);
    rcpp_result_gen = Rcpp::wrap(SBM_LLs_of_transitions_CPP(radius, time_steps, distances, diffusivities, max_error, max_Legendre_terms));
    return rcpp_result_gen;
END_RCPP
}
// SBM_LLs_of_sampled_transitions_CPP
Rcpp::List SBM_LLs_of_sampled_transitions_CPP(const double radius, const std::vector<double>& time_steps, const std::vector<double>& old_thetas, const std::vector<double>& old_phis, const std::vector<double>& new_thetas, const std::vector<double>& new_phis, const std::vector<double>& diffusivities, const long Nlat, const long Nlon, const std::vector<double>& sampling_rates, const double max_error, const long max_Legendre_terms);
RcppExport SEXP _castor_SBM_LLs_of_sampled_transitions_CPP(SEXP radiusSEXP, SEXP time_stepsSEXP, SEXP old_thetasSEXP, SEXP old_phisSEXP, SEXP new_thetasSEXP, SEXP new_phisSEXP, SEXP diffusivitiesSEXP, SEXP NlatSEXP, SEXP NlonSEXP, SEXP sampling_ratesSEXP, SEXP max_errorSEXP, SEXP max_Legendre_termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_steps(time_stepsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_thetas(old_thetasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_phis(old_phisSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type new_thetas(new_thetasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type new_phis(new_phisSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type diffusivities(diffusivitiesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nlat(NlatSEXP);
    Rcpp::traits::input_parameter< const long >::type Nlon(NlonSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sampling_rates(sampling_ratesSEXP);
    Rcpp::traits::input_parameter< const double >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< const long >::type max_Legendre_terms(max_Legendre_termsSEXP);
    rcpp_result_gen = Rcpp::wrap(SBM_LLs_of_sampled_transitions_CPP(radius, time_steps, old_thetas, old_phis, new_thetas, new_phis, diffusivities, Nlat, Nlon, sampling_rates, max_error, max_Legendre_terms));
    return rcpp_result_gen;
END_RCPP
}
// SBM_get_SBM_PD_functor_CPP
Rcpp::List SBM_get_SBM_PD_functor_CPP(const double max_error, const long max_Legendre_terms);
RcppExport SEXP _castor_SBM_get_SBM_PD_functor_CPP(SEXP max_errorSEXP, SEXP max_Legendre_termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< const long >::type max_Legendre_terms(max_Legendre_termsSEXP);
    rcpp_result_gen = Rcpp::wrap(SBM_get_SBM_PD_functor_CPP(max_error, max_Legendre_terms));
    return rcpp_result_gen;
END_RCPP
}
// SBM_get_average_transition_angle_CPP
double SBM_get_average_transition_angle_CPP(const double tD, const double max_error, const long max_Legendre_terms);
RcppExport SEXP _castor_SBM_get_average_transition_angle_CPP(SEXP tDSEXP, SEXP max_errorSEXP, SEXP max_Legendre_termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type tD(tDSEXP);
    Rcpp::traits::input_parameter< const double >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< const long >::type max_Legendre_terms(max_Legendre_termsSEXP);
    rcpp_result_gen = Rcpp::wrap(SBM_get_average_transition_angle_CPP(tD, max_error, max_Legendre_terms));
    return rcpp_result_gen;
END_RCPP
}
// TSBM_LL_of_transitions_CPP
Rcpp::List TSBM_LL_of_transitions_CPP(const double radius, const std::vector<double>& MRCA_times, const std::vector<double>& child_times1, const std::vector<double>& child_times2, const std::vector<double>& distances, const std::vector<double>& time_grid, const std::vector<double>& diffusivities, const long splines_degree, const Rcpp::List& SBM_PD_functor);
RcppExport SEXP _castor_TSBM_LL_of_transitions_CPP(SEXP radiusSEXP, SEXP MRCA_timesSEXP, SEXP child_times1SEXP, SEXP child_times2SEXP, SEXP distancesSEXP, SEXP time_gridSEXP, SEXP diffusivitiesSEXP, SEXP splines_degreeSEXP, SEXP SBM_PD_functorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type MRCA_times(MRCA_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type child_times1(child_times1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type child_times2(child_times2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_grid(time_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type diffusivities(diffusivitiesSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type SBM_PD_functor(SBM_PD_functorSEXP);
    rcpp_result_gen = Rcpp::wrap(TSBM_LL_of_transitions_CPP(radius, MRCA_times, child_times1, child_times2, distances, time_grid, diffusivities, splines_degree, SBM_PD_functor));
    return rcpp_result_gen;
END_RCPP
}
// TSBM_LL_of_sampled_transitions_CPP
Rcpp::List TSBM_LL_of_sampled_transitions_CPP(const double radius, const std::vector<double>& MRCA_times, const std::vector<double>& child_times1, const std::vector<double>& child_times2, const std::vector<double>& old_thetas, const std::vector<double>& old_phis, const std::vector<double>& new_thetas, const std::vector<double>& new_phis, const std::vector<double>& time_grid, const std::vector<double>& diffusivities, const long splines_degree, const long Nlat, const long Nlon, const std::vector<double>& sampling_rates, const Rcpp::List& SBM_PD_functor);
RcppExport SEXP _castor_TSBM_LL_of_sampled_transitions_CPP(SEXP radiusSEXP, SEXP MRCA_timesSEXP, SEXP child_times1SEXP, SEXP child_times2SEXP, SEXP old_thetasSEXP, SEXP old_phisSEXP, SEXP new_thetasSEXP, SEXP new_phisSEXP, SEXP time_gridSEXP, SEXP diffusivitiesSEXP, SEXP splines_degreeSEXP, SEXP NlatSEXP, SEXP NlonSEXP, SEXP sampling_ratesSEXP, SEXP SBM_PD_functorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type MRCA_times(MRCA_timesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type child_times1(child_times1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type child_times2(child_times2SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_thetas(old_thetasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_phis(old_phisSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type new_thetas(new_thetasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type new_phis(new_phisSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_grid(time_gridSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type diffusivities(diffusivitiesSEXP);
    Rcpp::traits::input_parameter< const long >::type splines_degree(splines_degreeSEXP);
    Rcpp::traits::input_parameter< const long >::type Nlat(NlatSEXP);
    Rcpp::traits::input_parameter< const long >::type Nlon(NlonSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sampling_rates(sampling_ratesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type SBM_PD_functor(SBM_PD_functorSEXP);
    rcpp_result_gen = Rcpp::wrap(TSBM_LL_of_sampled_transitions_CPP(radius, MRCA_times, child_times1, child_times2, old_thetas, old_phis, new_thetas, new_phis, time_grid, diffusivities, splines_degree, Nlat, Nlon, sampling_rates, SBM_PD_functor));
    return rcpp_result_gen;
END_RCPP
}
// fit_SBM_diffusivity_from_transitions_CPP
Rcpp::List fit_SBM_diffusivity_from_transitions_CPP(const double radius, const std::vector<double>& time_steps, const std::vector<double>& distances, const double max_error, const long max_Legendre_terms, const double opt_epsilon, const long max_iterations, double min_diffusivity, double max_diffusivity, const long Nbootstraps, const Rcpp::List& SBM_PD_functor);
RcppExport SEXP _castor_fit_SBM_diffusivity_from_transitions_CPP(SEXP radiusSEXP, SEXP time_stepsSEXP, SEXP distancesSEXP, SEXP max_errorSEXP, SEXP max_Legendre_termsSEXP, SEXP opt_epsilonSEXP, SEXP max_iterationsSEXP, SEXP min_diffusivitySEXP, SEXP max_diffusivitySEXP, SEXP NbootstrapsSEXP, SEXP SBM_PD_functorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_steps(time_stepsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type distances(distancesSEXP);
    Rcpp::traits::input_parameter< const double >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< const long >::type max_Legendre_terms(max_Legendre_termsSEXP);
    Rcpp::traits::input_parameter< const double >::type opt_epsilon(opt_epsilonSEXP);
    Rcpp::traits::input_parameter< const long >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type min_diffusivity(min_diffusivitySEXP);
    Rcpp::traits::input_parameter< double >::type max_diffusivity(max_diffusivitySEXP);
    Rcpp::traits::input_parameter< const long >::type Nbootstraps(NbootstrapsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type SBM_PD_functor(SBM_PD_functorSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_SBM_diffusivity_from_transitions_CPP(radius, time_steps, distances, max_error, max_Legendre_terms, opt_epsilon, max_iterations, min_diffusivity, max_diffusivity, Nbootstraps, SBM_PD_functor));
    return rcpp_result_gen;
END_RCPP
}
// fit_SBM_from_sampled_transitions_CPP
Rcpp::List fit_SBM_from_sampled_transitions_CPP(const double radius, const std::vector<double>& time_steps, const std::vector<double>& old_thetas, const std::vector<double>& old_phis, const std::vector<double>& new_thetas, const std::vector<double>& new_phis, const long Nlat, const long Nlon, const std::vector<double>& sampling_rates, const double max_error, const long max_Legendre_terms, const double opt_epsilon, const long max_iterations, double min_diffusivity, double max_diffusivity, const long Nbootstraps);
RcppExport SEXP _castor_fit_SBM_from_sampled_transitions_CPP(SEXP radiusSEXP, SEXP time_stepsSEXP, SEXP old_thetasSEXP, SEXP old_phisSEXP, SEXP new_thetasSEXP, SEXP new_phisSEXP, SEXP NlatSEXP, SEXP NlonSEXP, SEXP sampling_ratesSEXP, SEXP max_errorSEXP, SEXP max_Legendre_termsSEXP, SEXP opt_epsilonSEXP, SEXP max_iterationsSEXP, SEXP min_diffusivitySEXP, SEXP max_diffusivitySEXP, SEXP NbootstrapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type time_steps(time_stepsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_thetas(old_thetasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type old_phis(old_phisSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type new_thetas(new_thetasSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type new_phis(new_phisSEXP);
    Rcpp::traits::input_parameter< const long >::type Nlat(NlatSEXP);
    Rcpp::traits::input_parameter< const long >::type Nlon(NlonSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sampling_rates(sampling_ratesSEXP);
    Rcpp::traits::input_parameter< const double >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< const long >::type max_Legendre_terms(max_Legendre_termsSEXP);
    Rcpp::traits::input_parameter< const double >::type opt_epsilon(opt_epsilonSEXP);
    Rcpp::traits::input_parameter< const long >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type min_diffusivity(min_diffusivitySEXP);
    Rcpp::traits::input_parameter< double >::type max_diffusivity(max_diffusivitySEXP);
    Rcpp::traits::input_parameter< const long >::type Nbootstraps(NbootstrapsSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_SBM_from_sampled_transitions_CPP(radius, time_steps, old_thetas, old_phis, new_thetas, new_phis, Nlat, Nlon, sampling_rates, max_error, max_Legendre_terms, opt_epsilon, max_iterations, min_diffusivity, max_diffusivity, Nbootstraps));
    return rcpp_result_gen;
END_RCPP
}
// ACF_spherical_CPP
Rcpp::List ACF_spherical_CPP(const long Ntips, const long Nnodes, const long Nedges, const std::vector<long>& tree_edge, const std::vector<double>& edge_length, const std::vector<double>& tip_latitudes, const std::vector<double>& tip_longitudes, long Npairs, const long Nbins, bool verbose, const std::string& verbose_prefix);
RcppExport SEXP _castor_ACF_spherical_CPP(SEXP NtipsSEXP, SEXP NnodesSEXP, SEXP NedgesSEXP, SEXP tree_edgeSEXP, SEXP edge_lengthSEXP, SEXP tip_latitudesSEXP, SEXP tip_longitudesSEXP, SEXP NpairsSEXP, SEXP NbinsSEXP, SEXP verboseSEXP, SEXP verbose_prefixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const long >::type Ntips(NtipsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nnodes(NnodesSEXP);
    Rcpp::traits::input_parameter< const long >::type Nedges(NedgesSEXP);
    Rcpp::traits::input_parameter< const std::vector<long>& >::type tree_edge(tree_edgeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type edge_length(edge_lengthSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_latitudes(tip_latitudesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type tip_longitudes(tip_longitudesSEXP);
    Rcpp::traits::input_parameter< long >::type Npairs(NpairsSEXP);
    Rcpp::traits::input_parameter< const long >::type Nbins(NbinsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type verbose_prefix(verbose_prefixSEXP);
    rcpp_result_gen = Rcpp::wrap(ACF_spherical_CPP(Ntips, Nnodes, Nedges, tree_edge, edge_length, tip_latitudes, tip_longitudes, Npairs, Nbins, verbose, verbose_prefix));
    return rcpp_result_gen;
END_RCPP
}
// read_fasta_from_file_CPP
Rcpp::List read_fasta_from_file_CPP(const std::string& fasta_path, const bool include_headers, const bool include_sequences);
RcppExport SEXP _castor_read_fasta_from_file_CPP(SEXP fasta_pathSEXP, SEXP include_headersSEXP, SEXP include_sequencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fasta_path(fasta_pathSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_headers(include_headersSEXP);
    Rcpp::traits::input_parameter< const bool >::type include_sequences(include_sequencesSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fasta_from_file_CPP(fasta_path, include_headers, include_sequences));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_castor_evaluate_univariate_expression_CPP", (DL_FUNC) &_castor_evaluate_univariate_expression_CPP, 3},
    {"_castor_dense_binary_matrix_row2column_major_CPP", (DL_FUNC) &_castor_dense_binary_matrix_row2column_major_CPP, 4},
    {"_castor_get_member_lists_from_group_assignments_CPP", (DL_FUNC) &_castor_get_member_lists_from_group_assignments_CPP, 2},
    {"_castor_place_sorted_values_into_bins_CPP", (DL_FUNC) &_castor_place_sorted_values_into_bins_CPP, 3},
    {"_castor_split_undirected_graph_CPP", (DL_FUNC) &_castor_split_undirected_graph_CPP, 3},
    {"_castor_evaluate_spline_CPP", (DL_FUNC) &_castor_evaluate_spline_CPP, 6},
    {"_castor_derivatives_of_grid_curve_CPP", (DL_FUNC) &_castor_derivatives_of_grid_curve_CPP, 2},
    {"_castor_get_antiderivative_CPP", (DL_FUNC) &_castor_get_antiderivative_CPP, 5},
    {"_castor_get_derivative_CPP", (DL_FUNC) &_castor_get_derivative_CPP, 4},
    {"_castor_exponentiate_matrix_for_multiple_scalings_CPP", (DL_FUNC) &_castor_exponentiate_matrix_for_multiple_scalings_CPP, 7},
    {"_castor_smoothenTimeSeriesSavitzkyGolay_CPP", (DL_FUNC) &_castor_smoothenTimeSeriesSavitzkyGolay_CPP, 5},
    {"_castor_get_inhomogeneous_grid_1D_CPP", (DL_FUNC) &_castor_get_inhomogeneous_grid_1D_CPP, 6},
    {"_castor_monotonize_time_series_CPP", (DL_FUNC) &_castor_monotonize_time_series_CPP, 3},
    {"_castor_get_Ornstein_Uhlenbeck_time_series_CPP", (DL_FUNC) &_castor_get_Ornstein_Uhlenbeck_time_series_CPP, 5},
    {"_castor_get_Poisson_event_times_CPP", (DL_FUNC) &_castor_get_Poisson_event_times_CPP, 5},
    {"_castor_simulate_deterministic_diversity_growth_CPP", (DL_FUNC) &_castor_simulate_deterministic_diversity_growth_CPP, 25},
    {"_castor_reconstruct_past_diversity_from_coalescent_CPP", (DL_FUNC) &_castor_reconstruct_past_diversity_from_coalescent_CPP, 7},
    {"_castor_reconstruct_past_diversity_from_biased_coalescent_CPP", (DL_FUNC) &_castor_reconstruct_past_diversity_from_biased_coalescent_CPP, 8},
    {"_castor_reconstruct_past_diversifications_CPP", (DL_FUNC) &_castor_reconstruct_past_diversifications_CPP, 8},
    {"_castor_get_diversities_from_birth_and_death_events_CPP", (DL_FUNC) &_castor_get_diversities_from_birth_and_death_events_CPP, 5},
    {"_castor_get_incoming_edges_per_clade_CPP", (DL_FUNC) &_castor_get_incoming_edges_per_clade_CPP, 4},
    {"_castor_get_root_clade_CPP", (DL_FUNC) &_castor_get_root_clade_CPP, 4},
    {"_castor_get_tree_traversal_root_to_tips_CPP", (DL_FUNC) &_castor_get_tree_traversal_root_to_tips_CPP, 5},
    {"_castor_get_outgoing_edges_per_clade_CPP", (DL_FUNC) &_castor_get_outgoing_edges_per_clade_CPP, 4},
    {"_castor_get_paths_root_to_tips_CPP", (DL_FUNC) &_castor_get_paths_root_to_tips_CPP, 4},
    {"_castor_get_adjacent_edges_per_edge_CPP", (DL_FUNC) &_castor_get_adjacent_edges_per_edge_CPP, 4},
    {"_castor_get_total_tip_count_per_node_CPP", (DL_FUNC) &_castor_get_total_tip_count_per_node_CPP, 4},
    {"_castor_get_mean_depth_per_node_CPP", (DL_FUNC) &_castor_get_mean_depth_per_node_CPP, 5},
    {"_castor_get_child_count_per_node_CPP", (DL_FUNC) &_castor_get_child_count_per_node_CPP, 4},
    {"_castor_get_min_max_tip_distance_from_root_CPP", (DL_FUNC) &_castor_get_min_max_tip_distance_from_root_CPP, 5},
    {"_castor_get_distances_from_root_CPP", (DL_FUNC) &_castor_get_distances_from_root_CPP, 5},
    {"_castor_get_closest_tip_per_clade_CPP", (DL_FUNC) &_castor_get_closest_tip_per_clade_CPP, 9},
    {"_castor_get_farthest_tip_per_clade_CPP", (DL_FUNC) &_castor_get_farthest_tip_per_clade_CPP, 9},
    {"_castor_get_distance_matrix_between_clades_CPP", (DL_FUNC) &_castor_get_distance_matrix_between_clades_CPP, 8},
    {"_castor_get_distances_between_clades_CPP", (DL_FUNC) &_castor_get_distances_between_clades_CPP, 9},
    {"_castor_count_transitions_between_clades_CPP", (DL_FUNC) &_castor_count_transitions_between_clades_CPP, 7},
    {"_castor_count_clades_at_regular_times_CPP", (DL_FUNC) &_castor_count_clades_at_regular_times_CPP, 10},
    {"_castor_count_clades_at_times_CPP", (DL_FUNC) &_castor_count_clades_at_times_CPP, 7},
    {"_castor_get_LTT_BD_CPP", (DL_FUNC) &_castor_get_LTT_BD_CPP, 3},
    {"_castor_tree_has_multifurcations_CPP", (DL_FUNC) &_castor_tree_has_multifurcations_CPP, 4},
    {"_castor_get_speciation_extinction_events_CPP", (DL_FUNC) &_castor_get_speciation_extinction_events_CPP, 9},
    {"_castor_get_relative_evolutionary_divergences_CPP", (DL_FUNC) &_castor_get_relative_evolutionary_divergences_CPP, 5},
    {"_castor_date_tree_via_RED_CPP", (DL_FUNC) &_castor_date_tree_via_RED_CPP, 7},
    {"_castor_tree_to_clade_list_CPP", (DL_FUNC) &_castor_tree_to_clade_list_CPP, 6},
    {"_castor_extract_fasttree_constraints_CPP", (DL_FUNC) &_castor_extract_fasttree_constraints_CPP, 4},
    {"_castor_get_gamma_statistic_CPP", (DL_FUNC) &_castor_get_gamma_statistic_CPP, 5},
    {"_castor_get_Colless_Imbalance_CPP", (DL_FUNC) &_castor_get_Colless_Imbalance_CPP, 5},
    {"_castor_sort_tree_edges_root_to_tips_CPP", (DL_FUNC) &_castor_sort_tree_edges_root_to_tips_CPP, 6},
    {"_castor_root_tree_at_node_CPP", (DL_FUNC) &_castor_root_tree_at_node_CPP, 5},
    {"_castor_get_tree_with_collapsed_monofurcations_CPP", (DL_FUNC) &_castor_get_tree_with_collapsed_monofurcations_CPP, 7},
    {"_castor_get_subtree_with_specific_clades_CPP", (DL_FUNC) &_castor_get_subtree_with_specific_clades_CPP, 10},
    {"_castor_get_subtree_at_node_CPP", (DL_FUNC) &_castor_get_subtree_at_node_CPP, 5},
    {"_castor_get_subtrees_at_nodes_CPP", (DL_FUNC) &_castor_get_subtrees_at_nodes_CPP, 5},
    {"_castor_get_subtree_with_specific_tips_CPP", (DL_FUNC) &_castor_get_subtree_with_specific_tips_CPP, 8},
    {"_castor_find_root_for_monophyletic_clade_CPP", (DL_FUNC) &_castor_find_root_for_monophyletic_clade_CPP, 7},
    {"_castor_find_edge_splitting_tree_CPP", (DL_FUNC) &_castor_find_edge_splitting_tree_CPP, 7},
    {"_castor_collapse_tree_at_resolution_CPP", (DL_FUNC) &_castor_collapse_tree_at_resolution_CPP, 8},
    {"_castor_trim_tree_at_height_CPP", (DL_FUNC) &_castor_trim_tree_at_height_CPP, 6},
    {"_castor_split_tree_at_height_CPP", (DL_FUNC) &_castor_split_tree_at_height_CPP, 7},
    {"_castor_extend_tree_to_height_CPP", (DL_FUNC) &_castor_extend_tree_to_height_CPP, 6},
    {"_castor_multifurcations_to_bifurcations_CPP", (DL_FUNC) &_castor_multifurcations_to_bifurcations_CPP, 6},
    {"_castor_merge_short_edges_CPP", (DL_FUNC) &_castor_merge_short_edges_CPP, 7},
    {"_castor_pick_random_tips_CPP", (DL_FUNC) &_castor_pick_random_tips_CPP, 7},
    {"_castor_assign_clades_to_taxa_CPP", (DL_FUNC) &_castor_assign_clades_to_taxa_CPP, 5},
    {"_castor_extract_independent_sister_tips_CPP", (DL_FUNC) &_castor_extract_independent_sister_tips_CPP, 4},
    {"_castor_congruify_trees_CPP", (DL_FUNC) &_castor_congruify_trees_CPP, 9},
    {"_castor_match_tree_nodes_CPP", (DL_FUNC) &_castor_match_tree_nodes_CPP, 6},
    {"_castor_get_Robinson_Foulds_distance_CPP", (DL_FUNC) &_castor_get_Robinson_Foulds_distance_CPP, 8},
    {"_castor_relative_to_absolute_node_ages_CPP", (DL_FUNC) &_castor_relative_to_absolute_node_ages_CPP, 8},
    {"_castor_propagate_min_ages_upstream_CPP", (DL_FUNC) &_castor_propagate_min_ages_upstream_CPP, 7},
    {"_castor_propagate_max_ages_downstream_CPP", (DL_FUNC) &_castor_propagate_max_ages_downstream_CPP, 7},
    {"_castor_get_phylogram_geometry_CPP", (DL_FUNC) &_castor_get_phylogram_geometry_CPP, 5},
    {"_castor_tree_to_Newick_string_CPP", (DL_FUNC) &_castor_tree_to_Newick_string_CPP, 12},
    {"_castor_read_Newick_string_CPP", (DL_FUNC) &_castor_read_Newick_string_CPP, 5},
    {"_castor_get_trait_depth_consenTRAIT_CPP", (DL_FUNC) &_castor_get_trait_depth_consenTRAIT_CPP, 13},
    {"_castor_ACF_continuous_trait_CPP", (DL_FUNC) &_castor_ACF_continuous_trait_CPP, 10},
    {"_castor_get_empirical_state_frequencies_per_node_CPP", (DL_FUNC) &_castor_get_empirical_state_frequencies_per_node_CPP, 6},
    {"_castor_get_trait_richness_collectors_curve_CPP", (DL_FUNC) &_castor_get_trait_richness_collectors_curve_CPP, 14},
    {"_castor_get_phylogenetic_independent_contrasts_CPP", (DL_FUNC) &_castor_get_phylogenetic_independent_contrasts_CPP, 9},
    {"_castor_get_trait_stats_at_times_CPP", (DL_FUNC) &_castor_get_trait_stats_at_times_CPP, 7},
    {"_castor_get_mrca_defining_tips_CPP", (DL_FUNC) &_castor_get_mrca_defining_tips_CPP, 7},
    {"_castor_get_pairwise_ancestries_CPP", (DL_FUNC) &_castor_get_pairwise_ancestries_CPP, 6},
    {"_castor_get_most_recent_common_ancestors_CPP", (DL_FUNC) &_castor_get_most_recent_common_ancestors_CPP, 8},
    {"_castor_get_most_recent_common_ancestor_CPP", (DL_FUNC) &_castor_get_most_recent_common_ancestor_CPP, 5},
    {"_castor_is_monophyletic_tip_set_CPP", (DL_FUNC) &_castor_is_monophyletic_tip_set_CPP, 5},
    {"_castor_WMPR_ASR_CPP", (DL_FUNC) &_castor_WMPR_ASR_CPP, 12},
    {"_castor_ASR_with_fixed_rates_Markov_model_CPP", (DL_FUNC) &_castor_ASR_with_fixed_rates_Markov_model_CPP, 19},
    {"_castor_Mk_loglikelihood_CPP", (DL_FUNC) &_castor_Mk_loglikelihood_CPP, 14},
    {"_castor_TR_Mk_loglikelihood_ICs_CPP", (DL_FUNC) &_castor_TR_Mk_loglikelihood_ICs_CPP, 7},
    {"_castor_apply_fixed_rate_Markov_model_to_missing_clades_CPP", (DL_FUNC) &_castor_apply_fixed_rate_Markov_model_to_missing_clades_CPP, 12},
    {"_castor_apply_attributes_to_descendants_CPP", (DL_FUNC) &_castor_apply_attributes_to_descendants_CPP, 7},
    {"_castor_ASR_via_squared_change_parsimony_CPP", (DL_FUNC) &_castor_ASR_via_squared_change_parsimony_CPP, 7},
    {"_castor_get_mean_state_per_node_CPP", (DL_FUNC) &_castor_get_mean_state_per_node_CPP, 6},
    {"_castor_ASR_via_independent_contrasts_CPP", (DL_FUNC) &_castor_ASR_via_independent_contrasts_CPP, 7},
    {"_castor_apply_BM_parsimony_to_missing_clades_CPP", (DL_FUNC) &_castor_apply_BM_parsimony_to_missing_clades_CPP, 6},
    {"_castor_ASR_binomial_CPP", (DL_FUNC) &_castor_ASR_binomial_CPP, 8},
    {"_castor_get_MuSSE_loglikelihood_classic_CPP", (DL_FUNC) &_castor_get_MuSSE_loglikelihood_classic_CPP, 14},
    {"_castor_get_MuSSE_loglikelihood_CPP", (DL_FUNC) &_castor_get_MuSSE_loglikelihood_CPP, 23},
    {"_castor_simulate_deterministic_HBD_model_CPP", (DL_FUNC) &_castor_simulate_deterministic_HBD_model_CPP, 14},
    {"_castor_get_PSR_from_PDR_HBD_CPP", (DL_FUNC) &_castor_get_PSR_from_PDR_HBD_CPP, 8},
    {"_castor_get_PSR_of_HBD_model_CPP", (DL_FUNC) &_castor_get_PSR_of_HBD_model_CPP, 8},
    {"_castor_get_HBD_model_loglikelihood_CPP", (DL_FUNC) &_castor_get_HBD_model_loglikelihood_CPP, 10},
    {"_castor_get_HBD_PDR_loglikelihood_CPP", (DL_FUNC) &_castor_get_HBD_PDR_loglikelihood_CPP, 11},
    {"_castor_get_HBD_PSR_loglikelihood_CPP", (DL_FUNC) &_castor_get_HBD_PSR_loglikelihood_CPP, 8},
    {"_castor_get_HBDS_model_loglikelihood_CPP", (DL_FUNC) &_castor_get_HBDS_model_loglikelihood_CPP, 19},
    {"_castor_simulate_deterministic_HBDS_CPP", (DL_FUNC) &_castor_simulate_deterministic_HBDS_CPP, 16},
    {"_castor_get_congruent_HBDS_CPP", (DL_FUNC) &_castor_get_congruent_HBDS_CPP, 17},
    {"_castor_simulate_fixed_rates_Markov_model_CPP", (DL_FUNC) &_castor_simulate_fixed_rates_Markov_model_CPP, 11},
    {"_castor_simulate_Ornstein_Uhlenbeck_on_tree_CPP", (DL_FUNC) &_castor_simulate_Ornstein_Uhlenbeck_on_tree_CPP, 11},
    {"_castor_simulate_reflected_Ornstein_Uhlenbeck_on_tree_CPP", (DL_FUNC) &_castor_simulate_reflected_Ornstein_Uhlenbeck_on_tree_CPP, 11},
    {"_castor_simulate_scalar_Brownian_motion_model_CPP", (DL_FUNC) &_castor_simulate_scalar_Brownian_motion_model_CPP, 10},
    {"_castor_simulate_multivariate_Brownian_motion_model_CPP", (DL_FUNC) &_castor_simulate_multivariate_Brownian_motion_model_CPP, 12},
    {"_castor_simulate_neutral_gene_evolution_CPP", (DL_FUNC) &_castor_simulate_neutral_gene_evolution_CPP, 13},
    {"_castor_generate_random_tree_CPP", (DL_FUNC) &_castor_generate_random_tree_CPP, 18},
    {"_castor_generate_random_tree_HBDS_CPP", (DL_FUNC) &_castor_generate_random_tree_HBDS_CPP, 21},
    {"_castor_get_tree_from_branching_ages_CPP", (DL_FUNC) &_castor_get_tree_from_branching_ages_CPP, 1},
    {"_castor_get_tree_from_sampling_branching_ages_CPP", (DL_FUNC) &_castor_get_tree_from_sampling_branching_ages_CPP, 2},
    {"_castor_generate_tree_from_PSR_CPP", (DL_FUNC) &_castor_generate_tree_from_PSR_CPP, 9},
    {"_castor_get_branching_ages_from_LTT_CPP", (DL_FUNC) &_castor_get_branching_ages_from_LTT_CPP, 2},
    {"_castor_generate_random_tree_BM_rates_CPP", (DL_FUNC) &_castor_generate_random_tree_BM_rates_CPP, 16},
    {"_castor_generate_random_tree_Mk_rates_CPP", (DL_FUNC) &_castor_generate_random_tree_Mk_rates_CPP, 19},
    {"_castor_generate_random_tree_tdSSE_CPP", (DL_FUNC) &_castor_generate_random_tree_tdSSE_CPP, 17},
    {"_castor_generate_gene_tree_in_species_tree_MSC_CPP", (DL_FUNC) &_castor_generate_gene_tree_in_species_tree_MSC_CPP, 14},
    {"_castor_generate_gene_tree_in_species_tree_MSC_HGT_DL_CPP", (DL_FUNC) &_castor_generate_gene_tree_in_species_tree_MSC_HGT_DL_CPP, 21},
    {"_castor_simulate_deterministic_HBD_MSC_CPP", (DL_FUNC) &_castor_simulate_deterministic_HBD_MSC_CPP, 9},
    {"_castor_geodesic_angles_CPP", (DL_FUNC) &_castor_geodesic_angles_CPP, 4},
    {"_castor_get_all_pairwise_geodesic_angles_CPP", (DL_FUNC) &_castor_get_all_pairwise_geodesic_angles_CPP, 4},
    {"_castor_draw_SBM_geodesic_angle_CPP", (DL_FUNC) &_castor_draw_SBM_geodesic_angle_CPP, 1},
    {"_castor_simulate_SBM_on_tree_CPP", (DL_FUNC) &_castor_simulate_SBM_on_tree_CPP, 9},
    {"_castor_simulate_TSBM_on_tree_CPP", (DL_FUNC) &_castor_simulate_TSBM_on_tree_CPP, 11},
    {"_castor_move_points_on_sphere_CPP", (DL_FUNC) &_castor_move_points_on_sphere_CPP, 5},
    {"_castor_SBM_LLs_of_transitions_CPP", (DL_FUNC) &_castor_SBM_LLs_of_transitions_CPP, 6},
    {"_castor_SBM_LLs_of_sampled_transitions_CPP", (DL_FUNC) &_castor_SBM_LLs_of_sampled_transitions_CPP, 12},
    {"_castor_SBM_get_SBM_PD_functor_CPP", (DL_FUNC) &_castor_SBM_get_SBM_PD_functor_CPP, 2},
    {"_castor_SBM_get_average_transition_angle_CPP", (DL_FUNC) &_castor_SBM_get_average_transition_angle_CPP, 3},
    {"_castor_TSBM_LL_of_transitions_CPP", (DL_FUNC) &_castor_TSBM_LL_of_transitions_CPP, 9},
    {"_castor_TSBM_LL_of_sampled_transitions_CPP", (DL_FUNC) &_castor_TSBM_LL_of_sampled_transitions_CPP, 15},
    {"_castor_fit_SBM_diffusivity_from_transitions_CPP", (DL_FUNC) &_castor_fit_SBM_diffusivity_from_transitions_CPP, 11},
    {"_castor_fit_SBM_from_sampled_transitions_CPP", (DL_FUNC) &_castor_fit_SBM_from_sampled_transitions_CPP, 16},
    {"_castor_ACF_spherical_CPP", (DL_FUNC) &_castor_ACF_spherical_CPP, 11},
    {"_castor_read_fasta_from_file_CPP", (DL_FUNC) &_castor_read_fasta_from_file_CPP, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_castor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
