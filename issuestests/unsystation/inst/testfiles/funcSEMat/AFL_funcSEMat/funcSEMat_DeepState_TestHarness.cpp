// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// funcSEMat_DeepState_TestHarness_generation.cpp and funcSEMat_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix funcSEMat(int T, int minLength, NumericVector probVec, IntegerVector topCand, IntegerVector bottomCand);

TEST(unsystation_deepstate_test,funcSEMat_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector T(1);
  T[0]  = RcppDeepState_int();
  std::string T_t = "/home/akhila/fuzzer_packages/fuzzedpackages/unsystation/inst/testfiles/funcSEMat/AFL_funcSEMat/afl_inputs/" + std::to_string(t) + "_T.qs";
  qs::c_qsave(T,T_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "T values: "<< T << std::endl;
  IntegerVector minLength(1);
  minLength[0]  = RcppDeepState_int();
  std::string minLength_t = "/home/akhila/fuzzer_packages/fuzzedpackages/unsystation/inst/testfiles/funcSEMat/AFL_funcSEMat/afl_inputs/" + std::to_string(t) + "_minLength.qs";
  qs::c_qsave(minLength,minLength_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "minLength values: "<< minLength << std::endl;
  NumericVector probVec  = RcppDeepState_NumericVector();
  std::string probVec_t = "/home/akhila/fuzzer_packages/fuzzedpackages/unsystation/inst/testfiles/funcSEMat/AFL_funcSEMat/afl_inputs/" + std::to_string(t) + "_probVec.qs";
  qs::c_qsave(probVec,probVec_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "probVec values: "<< probVec << std::endl;
  IntegerVector topCand  = RcppDeepState_IntegerVector();
  std::string topCand_t = "/home/akhila/fuzzer_packages/fuzzedpackages/unsystation/inst/testfiles/funcSEMat/AFL_funcSEMat/afl_inputs/" + std::to_string(t) + "_topCand.qs";
  qs::c_qsave(topCand,topCand_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "topCand values: "<< topCand << std::endl;
  IntegerVector bottomCand  = RcppDeepState_IntegerVector();
  std::string bottomCand_t = "/home/akhila/fuzzer_packages/fuzzedpackages/unsystation/inst/testfiles/funcSEMat/AFL_funcSEMat/afl_inputs/" + std::to_string(t) + "_bottomCand.qs";
  qs::c_qsave(bottomCand,bottomCand_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bottomCand values: "<< bottomCand << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    funcSEMat(T[0],minLength[0],probVec,topCand,bottomCand);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
