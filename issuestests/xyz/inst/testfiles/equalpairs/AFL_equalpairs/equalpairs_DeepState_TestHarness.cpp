// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// equalpairs_DeepState_TestHarness_generation.cpp and equalpairs_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

IntegerMatrix equalpairs(NumericVector u, NumericVector v, IntegerVector ou, IntegerVector ov, int max_number_of_pairs);

TEST(xyz_deepstate_test,equalpairs_test){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector u  = RcppDeepState_NumericVector();
  std::string u_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/equalpairs/AFL_equalpairs/afl_inputs/" + std::to_string(t) + "_u.qs";
  qs::c_qsave(u,u_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "u values: "<< u << std::endl;
  NumericVector v  = RcppDeepState_NumericVector();
  std::string v_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/equalpairs/AFL_equalpairs/afl_inputs/" + std::to_string(t) + "_v.qs";
  qs::c_qsave(v,v_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "v values: "<< v << std::endl;
  IntegerVector ou  = RcppDeepState_IntegerVector();
  std::string ou_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/equalpairs/AFL_equalpairs/afl_inputs/" + std::to_string(t) + "_ou.qs";
  qs::c_qsave(ou,ou_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ou values: "<< ou << std::endl;
  IntegerVector ov  = RcppDeepState_IntegerVector();
  std::string ov_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/equalpairs/AFL_equalpairs/afl_inputs/" + std::to_string(t) + "_ov.qs";
  qs::c_qsave(ov,ov_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ov values: "<< ov << std::endl;
  IntegerVector max_number_of_pairs(1);
  max_number_of_pairs[0]  = RcppDeepState_int();
  std::string max_number_of_pairs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/xyz/inst/testfiles/equalpairs/AFL_equalpairs/afl_inputs/" + std::to_string(t) + "_max_number_of_pairs.qs";
  qs::c_qsave(max_number_of_pairs,max_number_of_pairs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_number_of_pairs values: "<< max_number_of_pairs << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    equalpairs(u,v,ou,ov,max_number_of_pairs[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
