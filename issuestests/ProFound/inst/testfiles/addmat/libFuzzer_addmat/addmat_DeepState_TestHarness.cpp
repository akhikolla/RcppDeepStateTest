// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// addmat_DeepState_TestHarness_generation.cpp and addmat_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix addmat(NumericMatrix base, NumericMatrix add, IntegerVector xlim, IntegerVector ylim);

TEST(ProFound_deepstate_test,addmat_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix base  = RcppDeepState_NumericMatrix();
  std::string base_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ProFound/inst/testfiles/addmat/libFuzzer_addmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_base.qs";
  qs::c_qsave(base,base_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "base values: "<< base << std::endl;
  NumericMatrix add  = RcppDeepState_NumericMatrix();
  std::string add_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ProFound/inst/testfiles/addmat/libFuzzer_addmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_add.qs";
  qs::c_qsave(add,add_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "add values: "<< add << std::endl;
  IntegerVector xlim  = RcppDeepState_IntegerVector();
  std::string xlim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ProFound/inst/testfiles/addmat/libFuzzer_addmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_xlim.qs";
  qs::c_qsave(xlim,xlim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "xlim values: "<< xlim << std::endl;
  IntegerVector ylim  = RcppDeepState_IntegerVector();
  std::string ylim_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ProFound/inst/testfiles/addmat/libFuzzer_addmat/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ylim.qs";
  qs::c_qsave(ylim,ylim_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ylim values: "<< ylim << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    addmat(base,add,xlim,ylim);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
