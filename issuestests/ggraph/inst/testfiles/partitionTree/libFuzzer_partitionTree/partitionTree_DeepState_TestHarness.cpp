// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// partitionTree_DeepState_TestHarness_generation.cpp and partitionTree_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix partitionTree(IntegerVector parent, IntegerVector order, NumericVector weight, NumericVector height);

TEST(ggraph_deepstate_test,partitionTree_test){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  IntegerVector parent  = RcppDeepState_IntegerVector();
  std::string parent_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/partitionTree/libFuzzer_partitionTree/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_parent.qs";
  qs::c_qsave(parent,parent_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "parent values: "<< parent << std::endl;
  IntegerVector order  = RcppDeepState_IntegerVector();
  std::string order_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/partitionTree/libFuzzer_partitionTree/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_order.qs";
  qs::c_qsave(order,order_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "order values: "<< order << std::endl;
  NumericVector weight  = RcppDeepState_NumericVector();
  std::string weight_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/partitionTree/libFuzzer_partitionTree/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_weight.qs";
  qs::c_qsave(weight,weight_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "weight values: "<< weight << std::endl;
  NumericVector height  = RcppDeepState_NumericVector();
  std::string height_t = "/home/akhila/fuzzer_packages/fuzzedpackages/ggraph/inst/testfiles/partitionTree/libFuzzer_partitionTree/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_height.qs";
  qs::c_qsave(height,height_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "height values: "<< height << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    partitionTree(parent,order,weight,height);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
