==13479== Memcheck, a memory error detector
==13479== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==13479== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==13479== Command: ./simplex_4d_c_DeepState_TestHarness --fuzz --fuzz_save_passing --output_test_dir /home/akhila/Documents/compileAttributescheck/ambient/inst/testfiles/simplex_4d_c/simplex_4d_c_output
==13479== 
INFO: Starting fuzzing
WARNING: No seed provided; using 1597731743
WARNING: No test specified, defaulting to first test defined (ambient_deepstate_test_simplex_4d_c_test)
height values: -1291707392
width values: 1950790338
depth values: -1841108223
time values: 957767457
seed values: 1747525347
freq values: 9.31113e+170
fractal values: 715828957
octaves values: -1379214047
lacunarity values: 1.41933e-252
gain values: -1.37014e+30
pertube values: 1664818798
pertube_amp values: -1.63837e+174
input ends
EXTERNAL: Error: vector is too large

EXTERNAL: Execution halted

==13480== 
==13480== HEAP SUMMARY:
==13480==     in use at exit: 50,292,292 bytes in 9,714 blocks
==13480==   total heap usage: 27,820 allocs, 18,106 frees, 86,085,448 bytes allocated
==13480== 
==13480== 8 bytes in 1 blocks are definitely lost in loss record 10 of 1,307
==13480==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13480==    by 0x40E8B6: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:111)
==13480==    by 0x40E85B: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:436)
==13480==    by 0x40E802: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:172)
==13480==    by 0x40E73E: std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (stl_vector.h:187)
==13480==    by 0x40E5E4: std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (stl_vector.h:138)
==13480==    by 0x40E516: std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) (stl_vector.h:284)
==13480==    by 0x40E26F: Rcpp::Dimension::Dimension(unsigned long const&, unsigned long const&) (Dimension.h:45)
==13480==    by 0x40CD97: Rcpp::Matrix<14, Rcpp::PreserveStorage>::Matrix(int const&, int const&) (Matrix.h:59)
==13480==    by 0x43B263: simplex_4d_c(int, int, int, int, int, double, int, int, double, double, int, double) (simplex.cpp:83)
==13480==    by 0x409A55: DeepState_Test_ambient_deepstate_test_simplex_4d_c_test() (simplex_4d_c_DeepState_TestHarness.cpp:83)
==13480==    by 0x408E18: DeepState_Run_ambient_deepstate_test_simplex_4d_c_test() (simplex_4d_c_DeepState_TestHarness.cpp:7)
==13480== 
==13480== LEAK SUMMARY:
==13480==    definitely lost: 8 bytes in 1 blocks
==13480==    indirectly lost: 0 bytes in 0 blocks
==13480==      possibly lost: 0 bytes in 0 blocks
==13480==    still reachable: 50,292,284 bytes in 9,713 blocks
==13480==                       of which reachable via heuristic:
==13480==                         newarray           : 4,264 bytes in 1 blocks
==13480==         suppressed: 0 bytes in 0 blocks
==13480== Reachable blocks (those to which a pointer was found) are not shown.
==13480== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==13480== 
==13480== For counts of detected and suppressed errors, rerun with: -v
==13480== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
height values: 1967349273
width values: 974189773
depth values: 1294239211
time values: -564378833
seed values: 1631535825
freq values: 4.68458e-80
fractal values: -512796586
octaves values: -1296666644
lacunarity values: 2.15699e+183
gain values: -2.77048e-213
pertube values: -520764226
pertube_amp values: 1.799e+132
input ends
EXTERNAL: Error: vector is too large

EXTERNAL: Execution halted

==13485== 
==13485== HEAP SUMMARY:
==13485==     in use at exit: 50,292,293 bytes in 9,714 blocks
==13485==   total heap usage: 27,820 allocs, 18,106 frees, 86,085,449 bytes allocated
==13485== 
==13485== 8 bytes in 1 blocks are definitely lost in loss record 10 of 1,307
==13485==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13485==    by 0x40E8B6: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:111)
==13485==    by 0x40E85B: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:436)
==13485==    by 0x40E802: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:172)
==13485==    by 0x40E73E: std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (stl_vector.h:187)
==13485==    by 0x40E5E4: std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (stl_vector.h:138)
==13485==    by 0x40E516: std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&) (stl_vector.h:284)
==13485==    by 0x40E26F: Rcpp::Dimension::Dimension(unsigned long const&, unsigned long const&) (Dimension.h:45)
==13485==    by 0x40CD97: Rcpp::Matrix<14, Rcpp::PreserveStorage>::Matrix(int const&, int const&) (Matrix.h:59)
==13485==    by 0x43B263: simplex_4d_c(int, int, int, int, int, double, int, int, double, double, int, double) (simplex.cpp:83)
==13485==    by 0x409A55: DeepState_Test_ambient_deepstate_test_simplex_4d_c_test() (simplex_4d_c_DeepState_TestHarness.cpp:83)
==13485==    by 0x408E18: DeepState_Run_ambient_deepstate_test_simplex_4d_c_test() (simplex_4d_c_DeepState_TestHarness.cpp:7)
==13485== 
==13485== LEAK SUMMARY:
==13485==    definitely lost: 8 bytes in 1 blocks
==13485==    indirectly lost: 0 bytes in 0 blocks
==13485==      possibly lost: 0 bytes in 0 blocks
==13485==    still reachable: 50,292,285 bytes in 9,713 blocks
==13485==                       of which reachable via heuristic:
==13485==                         newarray           : 4,264 bytes in 1 blocks
==13485==         suppressed: 0 bytes in 0 blocks
==13485== Reachable blocks (those to which a pointer was found) are not shown.
==13485== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==13485== 
==13485== For counts of detected and suppressed errors, rerun with: -v
==13485== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
INFO: Done fuzzing! Ran 2 tests (0 tests/second) with 2 failed/0 passed/0 abandoned tests
==13479== 
==13479== HEAP SUMMARY:
==13479==     in use at exit: 8 bytes in 1 blocks
==13479==   total heap usage: 4 allocs, 3 frees, 106,568 bytes allocated
==13479== 
==13479== LEAK SUMMARY:
==13479==    definitely lost: 0 bytes in 0 blocks
==13479==    indirectly lost: 0 bytes in 0 blocks
==13479==      possibly lost: 0 bytes in 0 blocks
==13479==    still reachable: 8 bytes in 1 blocks
==13479==         suppressed: 0 bytes in 0 blocks
==13479== Reachable blocks (those to which a pointer was found) are not shown.
==13479== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==13479== 
==13479== For counts of detected and suppressed errors, rerun with: -v
==13479== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
